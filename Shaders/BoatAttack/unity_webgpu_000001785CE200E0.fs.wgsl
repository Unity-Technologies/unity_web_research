struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3295 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3751 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3861 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1839 : f32;
  var x_1852 : f32;
  var x_1864 : f32;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : vec2<bool>;
  var u_xlat54 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var x_3377 : f32;
  var x_3388 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4153 : f32;
  var x_4166 : f32;
  var x_4218 : f32;
  var x_4229 : vec3<f32>;
  var x_4410 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1819 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1819 == 0.0f);
  let x_1822 : vec3<f32> = vs_INTERP0;
  let x_1826 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat27 = (-(x_1822) + x_1826);
  let x_1828 : vec3<f32> = u_xlat27;
  let x_1829 : vec3<f32> = u_xlat27;
  u_xlat67 = dot(x_1828, x_1829);
  let x_1831 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1831);
  let x_1833 : f32 = u_xlat67;
  let x_1835 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1833, x_1833, x_1833) * x_1835);
  let x_1838 : bool = u_xlatb23.x;
  if (x_1838) {
    let x_1843 : f32 = u_xlat27.x;
    x_1839 = x_1843;
  } else {
    let x_1847 : f32 = x_66.unity_MatrixV[0i].z;
    x_1839 = x_1847;
  }
  let x_1848 : f32 = x_1839;
  u_xlat6.x = x_1848;
  let x_1851 : bool = u_xlatb23.x;
  if (x_1851) {
    let x_1856 : f32 = u_xlat27.y;
    x_1852 = x_1856;
  } else {
    let x_1859 : f32 = x_66.unity_MatrixV[1i].z;
    x_1852 = x_1859;
  }
  let x_1860 : f32 = x_1852;
  u_xlat6.y = x_1860;
  let x_1863 : bool = u_xlatb23.x;
  if (x_1863) {
    let x_1868 : f32 = u_xlat27.z;
    x_1864 = x_1868;
  } else {
    let x_1871 : f32 = x_66.unity_MatrixV[2i].z;
    x_1864 = x_1871;
  }
  let x_1872 : f32 = x_1864;
  u_xlat6.z = x_1872;
  let x_1881 : vec2<f32> = vs_INTERP5;
  let x_1883 : f32 = x_66.x_GlobalMipBias.x;
  let x_1884 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1881, x_1883);
  u_xlat7 = x_1884;
  let x_1889 : vec2<f32> = vs_INTERP5;
  let x_1891 : f32 = x_66.x_GlobalMipBias.x;
  let x_1892 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1889, x_1891);
  u_xlat27 = vec3<f32>(x_1892.x, x_1892.y, x_1892.z);
  let x_1894 : vec4<f32> = u_xlat7;
  let x_1897 : vec3<f32> = (vec3<f32>(x_1894.x, x_1894.y, x_1894.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1898 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1897.x, x_1897.y, x_1897.z, x_1898.w);
  let x_1900 : vec3<f32> = u_xlat25;
  let x_1901 : vec4<f32> = u_xlat7;
  u_xlat23.x = dot(x_1900, vec3<f32>(x_1901.x, x_1901.y, x_1901.z));
  let x_1906 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1906 + 0.5f);
  let x_1909 : vec3<f32> = u_xlat23;
  let x_1911 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1909.x, x_1909.x, x_1909.x) * x_1911);
  let x_1914 : f32 = u_xlat7.w;
  u_xlat23.x = max(x_1914, 0.0001f);
  let x_1917 : vec3<f32> = u_xlat27;
  let x_1918 : vec3<f32> = u_xlat23;
  u_xlat27 = (x_1917 / vec3<f32>(x_1918.x, x_1918.x, x_1918.x));
  let x_1922 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1923 : vec2<f32> = vec2<f32>(x_1922.x, x_1922.y);
  let x_1927 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1923.x, x_1923.y));
  let x_1928 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1927.x, x_1928.y, x_1927.y);
  let x_1930 : vec3<f32> = u_xlat23;
  let x_1932 : vec4<f32> = hlslcc_FragCoord;
  let x_1934 : vec2<f32> = (vec2<f32>(x_1930.x, x_1930.z) * vec2<f32>(x_1932.x, x_1932.y));
  let x_1935 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1934.x, x_1934.y, x_1935.z, x_1935.w);
  let x_1938 : f32 = u_xlat7.y;
  let x_1941 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1944 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1938 * x_1941) + x_1944);
  let x_1948 : f32 = u_xlat23.x;
  u_xlat7.z = (-(x_1948) + 1.0f);
  let x_1953 : f32 = u_xlat3.x;
  u_xlat3.x = x_1953;
  let x_1956 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1956, 0.0f, 1.0f);
  let x_1960 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1960, 1.0f);
  let x_1963 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1963 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1968 : f32 = u_xlat3.x;
  u_xlat23.x = (-(x_1968) + 1.0f);
  let x_1973 : f32 = u_xlat23.x;
  let x_1975 : f32 = u_xlat23.x;
  u_xlat67 = (x_1973 * x_1975);
  let x_1977 : f32 = u_xlat67;
  u_xlat67 = max(x_1977, 0.0078125f);
  let x_1980 : f32 = u_xlat67;
  let x_1981 : f32 = u_xlat67;
  u_xlat68 = (x_1980 * x_1981);
  let x_1984 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1984 + 0.040000021f);
  let x_1989 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1989, 1.0f);
  let x_1993 : f32 = u_xlat67;
  u_xlat72 = ((x_1993 * 4.0f) + 2.0f);
  let x_2001 : vec4<f32> = u_xlat7;
  let x_2004 : f32 = x_66.x_GlobalMipBias.x;
  let x_2005 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2001.x, x_2001.z), x_2004);
  u_xlat7.x = x_2005.x;
  let x_2009 : f32 = u_xlat7.x;
  u_xlat29.x = (x_2009 + -1.0f);
  let x_2013 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_2015 : f32 = u_xlat29.x;
  u_xlat29.x = ((x_2013 * x_2015) + 1.0f);
  let x_2020 : f32 = u_xlat7.x;
  let x_2022 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2020, x_2022);
  let x_2025 : bool = u_xlatb66;
  if (x_2025) {
    let x_2029 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2029 == 1.0f);
    let x_2031 : bool = u_xlatb66;
    if (x_2031) {
      let x_2034 : vec4<f32> = u_xlat4;
      let x_2037 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2034.x, x_2034.y, x_2034.x, x_2034.y) + x_2037);
      let x_2040 : vec4<f32> = u_xlat8;
      let x_2041 : vec2<f32> = vec2<f32>(x_2040.x, x_2040.y);
      let x_2043 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2041.x, x_2041.y, x_2043);
      let x_2050 : vec3<f32> = txVec30;
      let x_2052 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2050.xy, x_2050.z);
      u_xlat9.x = x_2052;
      let x_2055 : vec4<f32> = u_xlat8;
      let x_2056 : vec2<f32> = vec2<f32>(x_2055.z, x_2055.w);
      let x_2058 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2056.x, x_2056.y, x_2058);
      let x_2065 : vec3<f32> = txVec31;
      let x_2067 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2065.xy, x_2065.z);
      u_xlat9.y = x_2067;
      let x_2069 : vec4<f32> = u_xlat4;
      let x_2072 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2069.x, x_2069.y, x_2069.x, x_2069.y) + x_2072);
      let x_2075 : vec4<f32> = u_xlat8;
      let x_2076 : vec2<f32> = vec2<f32>(x_2075.x, x_2075.y);
      let x_2078 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2076.x, x_2076.y, x_2078);
      let x_2085 : vec3<f32> = txVec32;
      let x_2087 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2085.xy, x_2085.z);
      u_xlat9.z = x_2087;
      let x_2090 : vec4<f32> = u_xlat8;
      let x_2091 : vec2<f32> = vec2<f32>(x_2090.z, x_2090.w);
      let x_2093 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2091.x, x_2091.y, x_2093);
      let x_2100 : vec3<f32> = txVec33;
      let x_2102 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2100.xy, x_2100.z);
      u_xlat9.w = x_2102;
      let x_2104 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2104, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2111 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb51.x = (x_2111 == 2.0f);
      let x_2115 : bool = u_xlatb51.x;
      if (x_2115) {
        let x_2118 : vec4<f32> = u_xlat4;
        let x_2121 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2118.x, x_2118.y) * vec2<f32>(x_2121.z, x_2121.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2125 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2125);
        let x_2127 : vec4<f32> = u_xlat4;
        let x_2130 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2133 : vec2<f32> = u_xlat51;
        let x_2135 : vec2<f32> = ((vec2<f32>(x_2127.x, x_2127.y) * vec2<f32>(x_2130.z, x_2130.w)) + -(x_2133));
        let x_2136 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2135.x, x_2135.y, x_2136.z, x_2136.w);
        let x_2138 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2138.x, x_2138.x, x_2138.y, x_2138.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2141 : vec4<f32> = u_xlat9;
        let x_2143 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2141.x, x_2141.x, x_2141.z, x_2141.z) * vec4<f32>(x_2143.x, x_2143.x, x_2143.z, x_2143.z));
        let x_2146 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2146.y, x_2146.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2149 : vec4<f32> = u_xlat10;
        let x_2152 : vec4<f32> = u_xlat8;
        let x_2155 : vec2<f32> = ((vec2<f32>(x_2149.x, x_2149.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2152.x, x_2152.y)));
        let x_2156 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2155.x, x_2156.y, x_2155.y, x_2156.w);
        let x_2158 : vec4<f32> = u_xlat8;
        let x_2161 : vec2<f32> = (-(vec2<f32>(x_2158.x, x_2158.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2162 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2161.x, x_2161.y, x_2162.z, x_2162.w);
        let x_2165 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2165.x, x_2165.y), vec2<f32>(0.0f, 0.0f));
        let x_2168 : vec2<f32> = u_xlat54;
        let x_2170 : vec2<f32> = u_xlat54;
        let x_2172 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2168) * x_2170) + vec2<f32>(x_2172.x, x_2172.y));
        let x_2175 : vec4<f32> = u_xlat8;
        let x_2177 : vec2<f32> = max(vec2<f32>(x_2175.x, x_2175.y), vec2<f32>(0.0f, 0.0f));
        let x_2178 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2177.x, x_2177.y, x_2178.z, x_2178.w);
        let x_2180 : vec4<f32> = u_xlat8;
        let x_2183 : vec4<f32> = u_xlat8;
        let x_2186 : vec4<f32> = u_xlat9;
        let x_2188 : vec2<f32> = ((-(vec2<f32>(x_2180.x, x_2180.y)) * vec2<f32>(x_2183.x, x_2183.y)) + vec2<f32>(x_2186.y, x_2186.w));
        let x_2189 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2188.x, x_2188.y, x_2189.z, x_2189.w);
        let x_2191 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2191 + vec2<f32>(1.0f, 1.0f));
        let x_2193 : vec4<f32> = u_xlat8;
        let x_2195 : vec2<f32> = (vec2<f32>(x_2193.x, x_2193.y) + vec2<f32>(1.0f, 1.0f));
        let x_2196 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2195.x, x_2195.y, x_2196.z, x_2196.w);
        let x_2198 : vec4<f32> = u_xlat9;
        let x_2200 : vec2<f32> = (vec2<f32>(x_2198.x, x_2198.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2201 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2200.x, x_2200.y, x_2201.z, x_2201.w);
        let x_2203 : vec4<f32> = u_xlat10;
        let x_2205 : vec2<f32> = (vec2<f32>(x_2203.x, x_2203.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2206 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2205.x, x_2205.y, x_2206.z, x_2206.w);
        let x_2208 : vec2<f32> = u_xlat54;
        let x_2209 : vec2<f32> = (x_2208 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2210 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2209.x, x_2209.y, x_2210.z, x_2210.w);
        let x_2212 : vec4<f32> = u_xlat8;
        let x_2214 : vec2<f32> = (vec2<f32>(x_2212.x, x_2212.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2215 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2214.x, x_2214.y, x_2215.z, x_2215.w);
        let x_2217 : vec4<f32> = u_xlat9;
        let x_2219 : vec2<f32> = (vec2<f32>(x_2217.y, x_2217.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2220 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2219.x, x_2219.y, x_2220.z, x_2220.w);
        let x_2223 : f32 = u_xlat10.x;
        u_xlat11.z = x_2223;
        let x_2226 : f32 = u_xlat8.x;
        u_xlat11.w = x_2226;
        let x_2229 : f32 = u_xlat13.x;
        u_xlat12.z = x_2229;
        let x_2232 : f32 = u_xlat52.x;
        u_xlat12.w = x_2232;
        let x_2234 : vec4<f32> = u_xlat11;
        let x_2236 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2234.z, x_2234.w, x_2234.x, x_2234.z) + vec4<f32>(x_2236.z, x_2236.w, x_2236.x, x_2236.z));
        let x_2240 : f32 = u_xlat11.y;
        u_xlat10.z = x_2240;
        let x_2243 : f32 = u_xlat8.y;
        u_xlat10.w = x_2243;
        let x_2246 : f32 = u_xlat12.y;
        u_xlat13.z = x_2246;
        let x_2249 : f32 = u_xlat52.y;
        u_xlat13.w = x_2249;
        let x_2251 : vec4<f32> = u_xlat10;
        let x_2253 : vec4<f32> = u_xlat13;
        let x_2255 : vec3<f32> = (vec3<f32>(x_2251.z, x_2251.y, x_2251.w) + vec3<f32>(x_2253.z, x_2253.y, x_2253.w));
        let x_2256 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2255.x, x_2255.y, x_2255.z, x_2256.w);
        let x_2258 : vec4<f32> = u_xlat12;
        let x_2260 : vec4<f32> = u_xlat9;
        let x_2262 : vec3<f32> = (vec3<f32>(x_2258.x, x_2258.z, x_2258.w) / vec3<f32>(x_2260.z, x_2260.w, x_2260.y));
        let x_2263 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2262.x, x_2262.y, x_2262.z, x_2263.w);
        let x_2265 : vec4<f32> = u_xlat10;
        let x_2267 : vec3<f32> = (vec3<f32>(x_2265.x, x_2265.y, x_2265.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2268 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2267.x, x_2267.y, x_2267.z, x_2268.w);
        let x_2270 : vec4<f32> = u_xlat13;
        let x_2272 : vec4<f32> = u_xlat8;
        let x_2274 : vec3<f32> = (vec3<f32>(x_2270.z, x_2270.y, x_2270.w) / vec3<f32>(x_2272.x, x_2272.y, x_2272.z));
        let x_2275 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2274.x, x_2274.y, x_2274.z, x_2275.w);
        let x_2277 : vec4<f32> = u_xlat11;
        let x_2279 : vec3<f32> = (vec3<f32>(x_2277.x, x_2277.y, x_2277.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2280 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2279.x, x_2279.y, x_2279.z, x_2280.w);
        let x_2282 : vec4<f32> = u_xlat10;
        let x_2285 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2287 : vec3<f32> = (vec3<f32>(x_2282.y, x_2282.x, x_2282.z) * vec3<f32>(x_2285.x, x_2285.x, x_2285.x));
        let x_2288 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2287.x, x_2287.y, x_2287.z, x_2288.w);
        let x_2290 : vec4<f32> = u_xlat11;
        let x_2293 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2295 : vec3<f32> = (vec3<f32>(x_2290.x, x_2290.y, x_2290.z) * vec3<f32>(x_2293.y, x_2293.y, x_2293.y));
        let x_2296 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2295.x, x_2295.y, x_2295.z, x_2296.w);
        let x_2299 : f32 = u_xlat11.x;
        u_xlat10.w = x_2299;
        let x_2301 : vec2<f32> = u_xlat51;
        let x_2304 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2307 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2301.x, x_2301.y, x_2301.x, x_2301.y) * vec4<f32>(x_2304.x, x_2304.y, x_2304.x, x_2304.y)) + vec4<f32>(x_2307.y, x_2307.w, x_2307.x, x_2307.w));
        let x_2310 : vec2<f32> = u_xlat51;
        let x_2312 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2315 : vec4<f32> = u_xlat10;
        let x_2317 : vec2<f32> = ((x_2310 * vec2<f32>(x_2312.x, x_2312.y)) + vec2<f32>(x_2315.z, x_2315.w));
        let x_2318 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2317.x, x_2317.y, x_2318.z, x_2318.w);
        let x_2321 : f32 = u_xlat10.y;
        u_xlat11.w = x_2321;
        let x_2323 : vec4<f32> = u_xlat11;
        let x_2324 : vec2<f32> = vec2<f32>(x_2323.y, x_2323.z);
        let x_2325 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2325.x, x_2324.x, x_2325.z, x_2324.y);
        let x_2327 : vec2<f32> = u_xlat51;
        let x_2330 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2333 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2327.x, x_2327.y, x_2327.x, x_2327.y) * vec4<f32>(x_2330.x, x_2330.y, x_2330.x, x_2330.y)) + vec4<f32>(x_2333.x, x_2333.y, x_2333.z, x_2333.y));
        let x_2336 : vec2<f32> = u_xlat51;
        let x_2339 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2342 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2336.x, x_2336.y, x_2336.x, x_2336.y) * vec4<f32>(x_2339.x, x_2339.y, x_2339.x, x_2339.y)) + vec4<f32>(x_2342.w, x_2342.y, x_2342.w, x_2342.z));
        let x_2345 : vec2<f32> = u_xlat51;
        let x_2348 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2351 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2345.x, x_2345.y, x_2345.x, x_2345.y) * vec4<f32>(x_2348.x, x_2348.y, x_2348.x, x_2348.y)) + vec4<f32>(x_2351.x, x_2351.w, x_2351.z, x_2351.w));
        let x_2354 : vec4<f32> = u_xlat8;
        let x_2356 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2354.x, x_2354.x, x_2354.x, x_2354.y) * vec4<f32>(x_2356.z, x_2356.w, x_2356.y, x_2356.z));
        let x_2359 : vec4<f32> = u_xlat8;
        let x_2361 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2359.y, x_2359.y, x_2359.z, x_2359.z) * x_2361);
        let x_2364 : f32 = u_xlat8.z;
        let x_2366 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2364 * x_2366);
        let x_2370 : vec4<f32> = u_xlat12;
        let x_2371 : vec2<f32> = vec2<f32>(x_2370.x, x_2370.y);
        let x_2373 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2371.x, x_2371.y, x_2373);
        let x_2381 : vec3<f32> = txVec34;
        let x_2383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2381.xy, x_2381.z);
        u_xlat73 = x_2383;
        let x_2385 : vec4<f32> = u_xlat12;
        let x_2386 : vec2<f32> = vec2<f32>(x_2385.z, x_2385.w);
        let x_2388 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2386.x, x_2386.y, x_2388);
        let x_2395 : vec3<f32> = txVec35;
        let x_2397 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2395.xy, x_2395.z);
        u_xlat8.x = x_2397;
        let x_2400 : f32 = u_xlat8.x;
        let x_2402 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2400 * x_2402);
        let x_2406 : f32 = u_xlat15.x;
        let x_2407 : f32 = u_xlat73;
        let x_2410 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2406 * x_2407) + x_2410);
        let x_2413 : vec4<f32> = u_xlat13;
        let x_2414 : vec2<f32> = vec2<f32>(x_2413.x, x_2413.y);
        let x_2416 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2414.x, x_2414.y, x_2416);
        let x_2423 : vec3<f32> = txVec36;
        let x_2425 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2423.xy, x_2423.z);
        u_xlat8.x = x_2425;
        let x_2428 : f32 = u_xlat15.z;
        let x_2430 : f32 = u_xlat8.x;
        let x_2432 : f32 = u_xlat73;
        u_xlat73 = ((x_2428 * x_2430) + x_2432);
        let x_2435 : vec4<f32> = u_xlat11;
        let x_2436 : vec2<f32> = vec2<f32>(x_2435.x, x_2435.y);
        let x_2438 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2436.x, x_2436.y, x_2438);
        let x_2445 : vec3<f32> = txVec37;
        let x_2447 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2445.xy, x_2445.z);
        u_xlat8.x = x_2447;
        let x_2450 : f32 = u_xlat15.w;
        let x_2452 : f32 = u_xlat8.x;
        let x_2454 : f32 = u_xlat73;
        u_xlat73 = ((x_2450 * x_2452) + x_2454);
        let x_2457 : vec4<f32> = u_xlat14;
        let x_2458 : vec2<f32> = vec2<f32>(x_2457.x, x_2457.y);
        let x_2460 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2458.x, x_2458.y, x_2460);
        let x_2467 : vec3<f32> = txVec38;
        let x_2469 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2467.xy, x_2467.z);
        u_xlat8.x = x_2469;
        let x_2472 : f32 = u_xlat16.x;
        let x_2474 : f32 = u_xlat8.x;
        let x_2476 : f32 = u_xlat73;
        u_xlat73 = ((x_2472 * x_2474) + x_2476);
        let x_2479 : vec4<f32> = u_xlat14;
        let x_2480 : vec2<f32> = vec2<f32>(x_2479.z, x_2479.w);
        let x_2482 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2480.x, x_2480.y, x_2482);
        let x_2489 : vec3<f32> = txVec39;
        let x_2491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2489.xy, x_2489.z);
        u_xlat8.x = x_2491;
        let x_2494 : f32 = u_xlat16.y;
        let x_2496 : f32 = u_xlat8.x;
        let x_2498 : f32 = u_xlat73;
        u_xlat73 = ((x_2494 * x_2496) + x_2498);
        let x_2501 : vec4<f32> = u_xlat11;
        let x_2502 : vec2<f32> = vec2<f32>(x_2501.z, x_2501.w);
        let x_2504 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2502.x, x_2502.y, x_2504);
        let x_2511 : vec3<f32> = txVec40;
        let x_2513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2511.xy, x_2511.z);
        u_xlat8.x = x_2513;
        let x_2516 : f32 = u_xlat16.z;
        let x_2518 : f32 = u_xlat8.x;
        let x_2520 : f32 = u_xlat73;
        u_xlat73 = ((x_2516 * x_2518) + x_2520);
        let x_2523 : vec4<f32> = u_xlat10;
        let x_2524 : vec2<f32> = vec2<f32>(x_2523.x, x_2523.y);
        let x_2526 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2524.x, x_2524.y, x_2526);
        let x_2533 : vec3<f32> = txVec41;
        let x_2535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2533.xy, x_2533.z);
        u_xlat8.x = x_2535;
        let x_2538 : f32 = u_xlat16.w;
        let x_2540 : f32 = u_xlat8.x;
        let x_2542 : f32 = u_xlat73;
        u_xlat73 = ((x_2538 * x_2540) + x_2542);
        let x_2545 : vec4<f32> = u_xlat10;
        let x_2546 : vec2<f32> = vec2<f32>(x_2545.z, x_2545.w);
        let x_2548 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2546.x, x_2546.y, x_2548);
        let x_2555 : vec3<f32> = txVec42;
        let x_2557 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2555.xy, x_2555.z);
        u_xlat8.x = x_2557;
        let x_2560 : f32 = u_xlat51.x;
        let x_2562 : f32 = u_xlat8.x;
        let x_2564 : f32 = u_xlat73;
        u_xlat66 = ((x_2560 * x_2562) + x_2564);
      } else {
        let x_2567 : vec4<f32> = u_xlat4;
        let x_2570 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2567.x, x_2567.y) * vec2<f32>(x_2570.z, x_2570.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2574 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2574);
        let x_2576 : vec4<f32> = u_xlat4;
        let x_2579 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2582 : vec2<f32> = u_xlat51;
        let x_2584 : vec2<f32> = ((vec2<f32>(x_2576.x, x_2576.y) * vec2<f32>(x_2579.z, x_2579.w)) + -(x_2582));
        let x_2585 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2584.x, x_2584.y, x_2585.z, x_2585.w);
        let x_2587 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2587.x, x_2587.x, x_2587.y, x_2587.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2590 : vec4<f32> = u_xlat9;
        let x_2592 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2590.x, x_2590.x, x_2590.z, x_2590.z) * vec4<f32>(x_2592.x, x_2592.x, x_2592.z, x_2592.z));
        let x_2595 : vec4<f32> = u_xlat10;
        let x_2597 : vec2<f32> = (vec2<f32>(x_2595.y, x_2595.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2598 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2598.x, x_2597.x, x_2598.z, x_2597.y);
        let x_2600 : vec4<f32> = u_xlat10;
        let x_2603 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2600.x, x_2600.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2603.x, x_2603.y)));
        let x_2607 : vec4<f32> = u_xlat8;
        let x_2610 : vec2<f32> = (-(vec2<f32>(x_2607.x, x_2607.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2611 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2610.x, x_2611.y, x_2610.y, x_2611.w);
        let x_2613 : vec4<f32> = u_xlat8;
        let x_2615 : vec2<f32> = min(vec2<f32>(x_2613.x, x_2613.y), vec2<f32>(0.0f, 0.0f));
        let x_2616 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2615.x, x_2615.y, x_2616.z, x_2616.w);
        let x_2618 : vec4<f32> = u_xlat10;
        let x_2621 : vec4<f32> = u_xlat10;
        let x_2624 : vec4<f32> = u_xlat9;
        let x_2626 : vec2<f32> = ((-(vec2<f32>(x_2618.x, x_2618.y)) * vec2<f32>(x_2621.x, x_2621.y)) + vec2<f32>(x_2624.x, x_2624.z));
        let x_2627 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2626.x, x_2627.y, x_2626.y, x_2627.w);
        let x_2629 : vec4<f32> = u_xlat8;
        let x_2631 : vec2<f32> = max(vec2<f32>(x_2629.x, x_2629.y), vec2<f32>(0.0f, 0.0f));
        let x_2632 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2631.x, x_2631.y, x_2632.z, x_2632.w);
        let x_2634 : vec4<f32> = u_xlat10;
        let x_2637 : vec4<f32> = u_xlat10;
        let x_2640 : vec4<f32> = u_xlat9;
        let x_2642 : vec2<f32> = ((-(vec2<f32>(x_2634.x, x_2634.y)) * vec2<f32>(x_2637.x, x_2637.y)) + vec2<f32>(x_2640.y, x_2640.w));
        let x_2643 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2643.x, x_2642.x, x_2643.z, x_2642.y);
        let x_2645 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2645 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2648 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2648 * 0.081632003f);
        let x_2651 : vec2<f32> = u_xlat52;
        let x_2653 : vec2<f32> = (vec2<f32>(x_2651.y, x_2651.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2654 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2653.x, x_2653.y, x_2654.z, x_2654.w);
        let x_2656 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2656.x, x_2656.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2660 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2660 * 0.081632003f);
        let x_2664 : f32 = u_xlat12.y;
        u_xlat10.x = x_2664;
        let x_2666 : vec4<f32> = u_xlat8;
        let x_2669 : vec2<f32> = ((vec2<f32>(x_2666.x, x_2666.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2670 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2670.x, x_2669.x, x_2670.z, x_2669.y);
        let x_2672 : vec4<f32> = u_xlat8;
        let x_2675 : vec2<f32> = ((vec2<f32>(x_2672.x, x_2672.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2676 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2675.x, x_2676.y, x_2675.y, x_2676.w);
        let x_2679 : f32 = u_xlat52.x;
        u_xlat9.y = x_2679;
        let x_2682 : f32 = u_xlat11.y;
        u_xlat9.w = x_2682;
        let x_2684 : vec4<f32> = u_xlat9;
        let x_2685 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2684 + x_2685);
        let x_2687 : vec4<f32> = u_xlat8;
        let x_2690 : vec2<f32> = ((vec2<f32>(x_2687.y, x_2687.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2691 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2691.x, x_2690.x, x_2691.z, x_2690.y);
        let x_2693 : vec4<f32> = u_xlat8;
        let x_2696 : vec2<f32> = ((vec2<f32>(x_2693.y, x_2693.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2697 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2696.x, x_2697.y, x_2696.y, x_2697.w);
        let x_2700 : f32 = u_xlat52.y;
        u_xlat11.y = x_2700;
        let x_2702 : vec4<f32> = u_xlat11;
        let x_2703 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2702 + x_2703);
        let x_2705 : vec4<f32> = u_xlat9;
        let x_2706 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2705 / x_2706);
        let x_2708 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2708 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2710 : vec4<f32> = u_xlat11;
        let x_2711 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2710 / x_2711);
        let x_2713 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2713 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2715 : vec4<f32> = u_xlat9;
        let x_2718 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2715.w, x_2715.x, x_2715.y, x_2715.z) * vec4<f32>(x_2718.x, x_2718.x, x_2718.x, x_2718.x));
        let x_2721 : vec4<f32> = u_xlat11;
        let x_2724 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2721.x, x_2721.w, x_2721.y, x_2721.z) * vec4<f32>(x_2724.y, x_2724.y, x_2724.y, x_2724.y));
        let x_2727 : vec4<f32> = u_xlat9;
        let x_2728 : vec3<f32> = vec3<f32>(x_2727.y, x_2727.z, x_2727.w);
        let x_2729 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2728.x, x_2729.y, x_2728.y, x_2728.z);
        let x_2732 : f32 = u_xlat11.x;
        u_xlat12.y = x_2732;
        let x_2734 : vec2<f32> = u_xlat51;
        let x_2737 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2740 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2734.x, x_2734.y, x_2734.x, x_2734.y) * vec4<f32>(x_2737.x, x_2737.y, x_2737.x, x_2737.y)) + vec4<f32>(x_2740.x, x_2740.y, x_2740.z, x_2740.y));
        let x_2743 : vec2<f32> = u_xlat51;
        let x_2745 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2748 : vec4<f32> = u_xlat12;
        let x_2750 : vec2<f32> = ((x_2743 * vec2<f32>(x_2745.x, x_2745.y)) + vec2<f32>(x_2748.w, x_2748.y));
        let x_2751 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2750.x, x_2750.y, x_2751.z, x_2751.w);
        let x_2754 : f32 = u_xlat12.y;
        u_xlat9.y = x_2754;
        let x_2757 : f32 = u_xlat11.z;
        u_xlat12.y = x_2757;
        let x_2759 : vec2<f32> = u_xlat51;
        let x_2762 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2765 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2759.x, x_2759.y, x_2759.x, x_2759.y) * vec4<f32>(x_2762.x, x_2762.y, x_2762.x, x_2762.y)) + vec4<f32>(x_2765.x, x_2765.y, x_2765.z, x_2765.y));
        let x_2769 : vec2<f32> = u_xlat51;
        let x_2771 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2774 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2769 * vec2<f32>(x_2771.x, x_2771.y)) + vec2<f32>(x_2774.w, x_2774.y));
        let x_2778 : f32 = u_xlat12.y;
        u_xlat9.z = x_2778;
        let x_2780 : vec2<f32> = u_xlat51;
        let x_2783 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2786 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2780.x, x_2780.y, x_2780.x, x_2780.y) * vec4<f32>(x_2783.x, x_2783.y, x_2783.x, x_2783.y)) + vec4<f32>(x_2786.x, x_2786.y, x_2786.x, x_2786.z));
        let x_2790 : f32 = u_xlat11.w;
        u_xlat12.y = x_2790;
        let x_2792 : vec2<f32> = u_xlat51;
        let x_2795 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2798 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2792.x, x_2792.y, x_2792.x, x_2792.y) * vec4<f32>(x_2795.x, x_2795.y, x_2795.x, x_2795.y)) + vec4<f32>(x_2798.x, x_2798.y, x_2798.z, x_2798.y));
        let x_2802 : vec2<f32> = u_xlat51;
        let x_2804 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2807 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_2802 * vec2<f32>(x_2804.x, x_2804.y)) + vec2<f32>(x_2807.w, x_2807.y));
        let x_2811 : f32 = u_xlat12.y;
        u_xlat9.w = x_2811;
        let x_2813 : vec2<f32> = u_xlat51;
        let x_2815 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2818 : vec4<f32> = u_xlat9;
        let x_2820 : vec2<f32> = ((x_2813 * vec2<f32>(x_2815.x, x_2815.y)) + vec2<f32>(x_2818.x, x_2818.w));
        let x_2821 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2820.x, x_2820.y, x_2821.z, x_2821.w);
        let x_2823 : vec4<f32> = u_xlat12;
        let x_2824 : vec3<f32> = vec3<f32>(x_2823.x, x_2823.z, x_2823.w);
        let x_2825 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2824.x, x_2825.y, x_2824.y, x_2824.z);
        let x_2827 : vec2<f32> = u_xlat51;
        let x_2830 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2833 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2827.x, x_2827.y, x_2827.x, x_2827.y) * vec4<f32>(x_2830.x, x_2830.y, x_2830.x, x_2830.y)) + vec4<f32>(x_2833.x, x_2833.y, x_2833.z, x_2833.y));
        let x_2837 : vec2<f32> = u_xlat51;
        let x_2839 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2842 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2837 * vec2<f32>(x_2839.x, x_2839.y)) + vec2<f32>(x_2842.w, x_2842.y));
        let x_2846 : f32 = u_xlat9.x;
        u_xlat11.x = x_2846;
        let x_2848 : vec2<f32> = u_xlat51;
        let x_2850 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2853 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_2848 * vec2<f32>(x_2850.x, x_2850.y)) + vec2<f32>(x_2853.x, x_2853.y));
        let x_2857 : vec4<f32> = u_xlat8;
        let x_2859 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_2857.x, x_2857.x, x_2857.x, x_2857.x) * x_2859);
        let x_2862 : vec4<f32> = u_xlat8;
        let x_2864 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_2862.y, x_2862.y, x_2862.y, x_2862.y) * x_2864);
        let x_2867 : vec4<f32> = u_xlat8;
        let x_2869 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_2867.z, x_2867.z, x_2867.z, x_2867.z) * x_2869);
        let x_2871 : vec4<f32> = u_xlat8;
        let x_2873 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_2871.w, x_2871.w, x_2871.w, x_2871.w) * x_2873);
        let x_2876 : vec4<f32> = u_xlat13;
        let x_2877 : vec2<f32> = vec2<f32>(x_2876.x, x_2876.y);
        let x_2879 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2877.x, x_2877.y, x_2879);
        let x_2886 : vec3<f32> = txVec43;
        let x_2888 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2886.xy, x_2886.z);
        u_xlat9.x = x_2888;
        let x_2891 : vec4<f32> = u_xlat13;
        let x_2892 : vec2<f32> = vec2<f32>(x_2891.z, x_2891.w);
        let x_2894 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2892.x, x_2892.y, x_2894);
        let x_2902 : vec3<f32> = txVec44;
        let x_2904 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2902.xy, x_2902.z);
        u_xlat75 = x_2904;
        let x_2905 : f32 = u_xlat75;
        let x_2907 : f32 = u_xlat19.y;
        u_xlat75 = (x_2905 * x_2907);
        let x_2910 : f32 = u_xlat19.x;
        let x_2912 : f32 = u_xlat9.x;
        let x_2914 : f32 = u_xlat75;
        u_xlat9.x = ((x_2910 * x_2912) + x_2914);
        let x_2918 : vec4<f32> = u_xlat14;
        let x_2919 : vec2<f32> = vec2<f32>(x_2918.x, x_2918.y);
        let x_2921 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2919.x, x_2919.y, x_2921);
        let x_2928 : vec3<f32> = txVec45;
        let x_2930 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2928.xy, x_2928.z);
        u_xlat75 = x_2930;
        let x_2932 : f32 = u_xlat19.z;
        let x_2933 : f32 = u_xlat75;
        let x_2936 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2932 * x_2933) + x_2936);
        let x_2940 : vec4<f32> = u_xlat16;
        let x_2941 : vec2<f32> = vec2<f32>(x_2940.x, x_2940.y);
        let x_2943 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2941.x, x_2941.y, x_2943);
        let x_2950 : vec3<f32> = txVec46;
        let x_2952 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2950.xy, x_2950.z);
        u_xlat75 = x_2952;
        let x_2954 : f32 = u_xlat19.w;
        let x_2955 : f32 = u_xlat75;
        let x_2958 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2954 * x_2955) + x_2958);
        let x_2962 : vec4<f32> = u_xlat15;
        let x_2963 : vec2<f32> = vec2<f32>(x_2962.x, x_2962.y);
        let x_2965 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2963.x, x_2963.y, x_2965);
        let x_2972 : vec3<f32> = txVec47;
        let x_2974 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2972.xy, x_2972.z);
        u_xlat75 = x_2974;
        let x_2976 : f32 = u_xlat20.x;
        let x_2977 : f32 = u_xlat75;
        let x_2980 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2976 * x_2977) + x_2980);
        let x_2984 : vec4<f32> = u_xlat15;
        let x_2985 : vec2<f32> = vec2<f32>(x_2984.z, x_2984.w);
        let x_2987 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_2985.x, x_2985.y, x_2987);
        let x_2994 : vec3<f32> = txVec48;
        let x_2996 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2994.xy, x_2994.z);
        u_xlat75 = x_2996;
        let x_2998 : f32 = u_xlat20.y;
        let x_2999 : f32 = u_xlat75;
        let x_3002 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2998 * x_2999) + x_3002);
        let x_3006 : vec2<f32> = u_xlat58;
        let x_3008 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_3006.x, x_3006.y, x_3008);
        let x_3015 : vec3<f32> = txVec49;
        let x_3017 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3015.xy, x_3015.z);
        u_xlat75 = x_3017;
        let x_3019 : f32 = u_xlat20.z;
        let x_3020 : f32 = u_xlat75;
        let x_3023 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3019 * x_3020) + x_3023);
        let x_3027 : vec4<f32> = u_xlat16;
        let x_3028 : vec2<f32> = vec2<f32>(x_3027.z, x_3027.w);
        let x_3030 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_3028.x, x_3028.y, x_3030);
        let x_3037 : vec3<f32> = txVec50;
        let x_3039 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3037.xy, x_3037.z);
        u_xlat75 = x_3039;
        let x_3041 : f32 = u_xlat20.w;
        let x_3042 : f32 = u_xlat75;
        let x_3045 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3041 * x_3042) + x_3045);
        let x_3049 : vec4<f32> = u_xlat17;
        let x_3050 : vec2<f32> = vec2<f32>(x_3049.x, x_3049.y);
        let x_3052 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3050.x, x_3050.y, x_3052);
        let x_3059 : vec3<f32> = txVec51;
        let x_3061 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3059.xy, x_3059.z);
        u_xlat75 = x_3061;
        let x_3063 : f32 = u_xlat21.x;
        let x_3064 : f32 = u_xlat75;
        let x_3067 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3063 * x_3064) + x_3067);
        let x_3071 : vec4<f32> = u_xlat17;
        let x_3072 : vec2<f32> = vec2<f32>(x_3071.z, x_3071.w);
        let x_3074 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3072.x, x_3072.y, x_3074);
        let x_3081 : vec3<f32> = txVec52;
        let x_3083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3081.xy, x_3081.z);
        u_xlat75 = x_3083;
        let x_3085 : f32 = u_xlat21.y;
        let x_3086 : f32 = u_xlat75;
        let x_3089 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3085 * x_3086) + x_3089);
        let x_3093 : vec2<f32> = u_xlat31;
        let x_3095 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3093.x, x_3093.y, x_3095);
        let x_3102 : vec3<f32> = txVec53;
        let x_3104 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3102.xy, x_3102.z);
        u_xlat31.x = x_3104;
        let x_3107 : f32 = u_xlat21.z;
        let x_3109 : f32 = u_xlat31.x;
        let x_3112 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3107 * x_3109) + x_3112);
        let x_3116 : vec4<f32> = u_xlat18;
        let x_3117 : vec2<f32> = vec2<f32>(x_3116.x, x_3116.y);
        let x_3119 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3117.x, x_3117.y, x_3119);
        let x_3126 : vec3<f32> = txVec54;
        let x_3128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3126.xy, x_3126.z);
        u_xlat31.x = x_3128;
        let x_3131 : f32 = u_xlat21.w;
        let x_3133 : f32 = u_xlat31.x;
        let x_3136 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3131 * x_3133) + x_3136);
        let x_3140 : vec4<f32> = u_xlat12;
        let x_3141 : vec2<f32> = vec2<f32>(x_3140.x, x_3140.y);
        let x_3143 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3141.x, x_3141.y, x_3143);
        let x_3150 : vec3<f32> = txVec55;
        let x_3152 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3150.xy, x_3150.z);
        u_xlat31.x = x_3152;
        let x_3155 : f32 = u_xlat8.x;
        let x_3157 : f32 = u_xlat31.x;
        let x_3160 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3155 * x_3157) + x_3160);
        let x_3164 : vec4<f32> = u_xlat12;
        let x_3165 : vec2<f32> = vec2<f32>(x_3164.z, x_3164.w);
        let x_3167 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3165.x, x_3165.y, x_3167);
        let x_3174 : vec3<f32> = txVec56;
        let x_3176 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3174.xy, x_3174.z);
        u_xlat9.x = x_3176;
        let x_3179 : f32 = u_xlat8.y;
        let x_3181 : f32 = u_xlat9.x;
        let x_3184 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3179 * x_3181) + x_3184);
        let x_3188 : vec2<f32> = u_xlat55;
        let x_3190 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3188.x, x_3188.y, x_3190);
        let x_3198 : vec3<f32> = txVec57;
        let x_3200 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3198.xy, x_3198.z);
        u_xlat30 = x_3200;
        let x_3202 : f32 = u_xlat8.z;
        let x_3203 : f32 = u_xlat30;
        let x_3206 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3202 * x_3203) + x_3206);
        let x_3210 : vec2<f32> = u_xlat51;
        let x_3212 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3210.x, x_3210.y, x_3212);
        let x_3219 : vec3<f32> = txVec58;
        let x_3221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3219.xy, x_3219.z);
        u_xlat51.x = x_3221;
        let x_3224 : f32 = u_xlat8.w;
        let x_3226 : f32 = u_xlat51.x;
        let x_3229 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3224 * x_3226) + x_3229);
      }
    }
  } else {
    let x_3233 : vec4<f32> = u_xlat4;
    let x_3234 : vec2<f32> = vec2<f32>(x_3233.x, x_3233.y);
    let x_3236 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3234.x, x_3234.y, x_3236);
    let x_3243 : vec3<f32> = txVec59;
    let x_3245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3243.xy, x_3243.z);
    u_xlat66 = x_3245;
  }
  let x_3246 : f32 = u_xlat66;
  let x_3248 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3250 : f32 = u_xlat70;
  u_xlat66 = ((x_3246 * x_3248) + x_3250);
  let x_3252 : bool = u_xlatb5;
  let x_3253 : f32 = u_xlat66;
  u_xlat66 = select(x_3253, 1.0f, x_3252);
  let x_3255 : vec3<f32> = vs_INTERP0;
  let x_3257 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3259 : vec3<f32> = (x_3255 + -(x_3257));
  let x_3260 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3259.x, x_3259.y, x_3259.z, x_3260.w);
  let x_3262 : vec4<f32> = u_xlat4;
  let x_3264 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3262.x, x_3262.y, x_3262.z), vec3<f32>(x_3264.x, x_3264.y, x_3264.z));
  let x_3269 : f32 = u_xlat4.x;
  let x_3271 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3274 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3269 * x_3271) + x_3274);
  let x_3278 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3278, 0.0f, 1.0f);
  let x_3282 : f32 = u_xlat66;
  u_xlat26 = (-(x_3282) + 1.0f);
  let x_3286 : f32 = u_xlat4.x;
  let x_3287 : f32 = u_xlat26;
  let x_3289 : f32 = u_xlat66;
  u_xlat66 = ((x_3286 * x_3287) + x_3289);
  let x_3297 : f32 = x_3295.x_MainLightCookieTextureFormat;
  u_xlatb4.x = !((x_3297 == -1.0f));
  let x_3301 : bool = u_xlatb4.x;
  if (x_3301) {
    let x_3304 : vec3<f32> = vs_INTERP0;
    let x_3307 : vec4<f32> = x_3295.x_MainLightWorldToLight[1i];
    let x_3309 : vec2<f32> = (vec2<f32>(x_3304.y, x_3304.y) * vec2<f32>(x_3307.x, x_3307.y));
    let x_3310 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3309.x, x_3309.y, x_3310.z, x_3310.w);
    let x_3313 : vec4<f32> = x_3295.x_MainLightWorldToLight[0i];
    let x_3315 : vec3<f32> = vs_INTERP0;
    let x_3318 : vec4<f32> = u_xlat4;
    let x_3320 : vec2<f32> = ((vec2<f32>(x_3313.x, x_3313.y) * vec2<f32>(x_3315.x, x_3315.x)) + vec2<f32>(x_3318.x, x_3318.y));
    let x_3321 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3320.x, x_3320.y, x_3321.z, x_3321.w);
    let x_3324 : vec4<f32> = x_3295.x_MainLightWorldToLight[2i];
    let x_3326 : vec3<f32> = vs_INTERP0;
    let x_3329 : vec4<f32> = u_xlat4;
    let x_3331 : vec2<f32> = ((vec2<f32>(x_3324.x, x_3324.y) * vec2<f32>(x_3326.z, x_3326.z)) + vec2<f32>(x_3329.x, x_3329.y));
    let x_3332 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3331.x, x_3331.y, x_3332.z, x_3332.w);
    let x_3334 : vec4<f32> = u_xlat4;
    let x_3337 : vec4<f32> = x_3295.x_MainLightWorldToLight[3i];
    let x_3339 : vec2<f32> = (vec2<f32>(x_3334.x, x_3334.y) + vec2<f32>(x_3337.x, x_3337.y));
    let x_3340 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3339.x, x_3339.y, x_3340.z, x_3340.w);
    let x_3342 : vec4<f32> = u_xlat4;
    let x_3345 : vec2<f32> = ((vec2<f32>(x_3342.x, x_3342.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3346 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3345.x, x_3345.y, x_3346.z, x_3346.w);
    let x_3353 : vec4<f32> = u_xlat4;
    let x_3356 : f32 = x_66.x_GlobalMipBias.x;
    let x_3357 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3353.x, x_3353.y), x_3356);
    u_xlat4 = x_3357;
    let x_3359 : f32 = x_3295.x_MainLightCookieTextureFormat;
    let x_3361 : f32 = x_3295.x_MainLightCookieTextureFormat;
    let x_3363 : f32 = x_3295.x_MainLightCookieTextureFormat;
    let x_3365 : f32 = x_3295.x_MainLightCookieTextureFormat;
    let x_3366 : vec4<f32> = vec4<f32>(x_3359, x_3361, x_3363, x_3365);
    let x_3373 : vec4<bool> = (vec4<f32>(x_3366.x, x_3366.y, x_3366.z, x_3366.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb51 = vec2<bool>(x_3373.x, x_3373.y);
    let x_3376 : bool = u_xlatb51.y;
    if (x_3376) {
      let x_3381 : f32 = u_xlat4.w;
      x_3377 = x_3381;
    } else {
      let x_3384 : f32 = u_xlat4.x;
      x_3377 = x_3384;
    }
    let x_3385 : f32 = x_3377;
    u_xlat70 = x_3385;
    let x_3387 : bool = u_xlatb51.x;
    if (x_3387) {
      let x_3391 : vec4<f32> = u_xlat4;
      x_3388 = vec3<f32>(x_3391.x, x_3391.y, x_3391.z);
    } else {
      let x_3394 : f32 = u_xlat70;
      x_3388 = vec3<f32>(x_3394, x_3394, x_3394);
    }
    let x_3396 : vec3<f32> = x_3388;
    let x_3397 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3396.x, x_3396.y, x_3396.z, x_3397.w);
  } else {
    u_xlat4.x = 1.0f;
    u_xlat4.y = 1.0f;
    u_xlat4.z = 1.0f;
  }
  let x_3403 : vec4<f32> = u_xlat4;
  let x_3406 : vec4<f32> = x_66.x_MainLightColor;
  let x_3408 : vec3<f32> = (vec3<f32>(x_3403.x, x_3403.y, x_3403.z) * vec3<f32>(x_3406.x, x_3406.y, x_3406.z));
  let x_3409 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3408.x, x_3408.y, x_3408.z, x_3409.w);
  let x_3411 : vec2<f32> = u_xlat29;
  let x_3413 : vec4<f32> = u_xlat4;
  let x_3415 : vec3<f32> = (vec3<f32>(x_3411.x, x_3411.x, x_3411.x) * vec3<f32>(x_3413.x, x_3413.y, x_3413.z));
  let x_3416 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3415.x, x_3415.y, x_3415.z, x_3416.w);
  let x_3418 : vec4<f32> = u_xlat6;
  let x_3421 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(-(vec3<f32>(x_3418.x, x_3418.y, x_3418.z)), x_3421);
  let x_3423 : f32 = u_xlat70;
  let x_3424 : f32 = u_xlat70;
  u_xlat70 = (x_3423 + x_3424);
  let x_3426 : vec3<f32> = u_xlat25;
  let x_3427 : f32 = u_xlat70;
  let x_3431 : vec4<f32> = u_xlat6;
  let x_3434 : vec3<f32> = ((x_3426 * -(vec3<f32>(x_3427, x_3427, x_3427))) + -(vec3<f32>(x_3431.x, x_3431.y, x_3431.z)));
  let x_3435 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3434.x, x_3434.y, x_3434.z, x_3435.w);
  let x_3437 : vec3<f32> = u_xlat25;
  let x_3438 : vec4<f32> = u_xlat6;
  u_xlat70 = dot(x_3437, vec3<f32>(x_3438.x, x_3438.y, x_3438.z));
  let x_3441 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3441, 0.0f, 1.0f);
  let x_3443 : f32 = u_xlat70;
  u_xlat70 = (-(x_3443) + 1.0f);
  let x_3446 : f32 = u_xlat70;
  let x_3447 : f32 = u_xlat70;
  u_xlat70 = (x_3446 * x_3447);
  let x_3449 : f32 = u_xlat70;
  let x_3450 : f32 = u_xlat70;
  u_xlat70 = (x_3449 * x_3450);
  let x_3453 : f32 = u_xlat23.x;
  u_xlat5.x = ((-(x_3453) * 0.699999988f) + 1.700000048f);
  let x_3461 : f32 = u_xlat23.x;
  let x_3463 : f32 = u_xlat5.x;
  u_xlat23.x = (x_3461 * x_3463);
  let x_3467 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3467 * 6.0f);
  let x_3479 : vec4<f32> = u_xlat8;
  let x_3482 : f32 = u_xlat23.x;
  let x_3483 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3479.x, x_3479.y, x_3479.z), x_3482);
  u_xlat8 = x_3483;
  let x_3485 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3485 + -1.0f);
  let x_3489 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3491 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3489 * x_3491) + 1.0f);
  let x_3496 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3496, 0.0f);
  let x_3500 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3500);
  let x_3504 : f32 = u_xlat23.x;
  let x_3506 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3504 * x_3506);
  let x_3510 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3510);
  let x_3514 : f32 = u_xlat23.x;
  let x_3516 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3514 * x_3516);
  let x_3519 : vec4<f32> = u_xlat8;
  let x_3521 : vec3<f32> = u_xlat23;
  let x_3523 : vec3<f32> = (vec3<f32>(x_3519.x, x_3519.y, x_3519.z) * vec3<f32>(x_3521.x, x_3521.x, x_3521.x));
  let x_3524 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3523.x, x_3523.y, x_3523.z, x_3524.w);
  let x_3526 : f32 = u_xlat67;
  let x_3528 : f32 = u_xlat67;
  let x_3532 : vec2<f32> = ((vec2<f32>(x_3526, x_3526) * vec2<f32>(x_3528, x_3528)) + vec2<f32>(-1.0f, 1.0f));
  let x_3533 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3532.x, x_3533.y, x_3532.y);
  let x_3536 : f32 = u_xlat23.z;
  u_xlat67 = (1.0f / x_3536);
  let x_3539 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3539 + -0.039999999f);
  let x_3543 : f32 = u_xlat70;
  let x_3545 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3543 * x_3545) + 0.039999999f);
  let x_3550 : f32 = u_xlat67;
  let x_3552 : f32 = u_xlat3.x;
  u_xlat67 = (x_3550 * x_3552);
  let x_3554 : f32 = u_xlat67;
  let x_3556 : vec4<f32> = u_xlat8;
  let x_3558 : vec3<f32> = (vec3<f32>(x_3554, x_3554, x_3554) * vec3<f32>(x_3556.x, x_3556.y, x_3556.z));
  let x_3559 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3558.x, x_3558.y, x_3558.z, x_3559.w);
  let x_3561 : vec3<f32> = u_xlat27;
  let x_3562 : vec3<f32> = u_xlat2;
  let x_3564 : vec4<f32> = u_xlat8;
  let x_3566 : vec3<f32> = ((x_3561 * x_3562) + vec3<f32>(x_3564.x, x_3564.y, x_3564.z));
  let x_3567 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3566.x, x_3566.y, x_3566.z, x_3567.w);
  let x_3569 : f32 = u_xlat66;
  let x_3571 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3569 * x_3571);
  let x_3573 : vec3<f32> = u_xlat25;
  let x_3575 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(x_3573, vec3<f32>(x_3575.x, x_3575.y, x_3575.z));
  let x_3578 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3578, 0.0f, 1.0f);
  let x_3580 : f32 = u_xlat66;
  let x_3581 : f32 = u_xlat67;
  u_xlat66 = (x_3580 * x_3581);
  let x_3583 : f32 = u_xlat66;
  let x_3585 : vec4<f32> = u_xlat4;
  let x_3587 : vec3<f32> = (vec3<f32>(x_3583, x_3583, x_3583) * vec3<f32>(x_3585.x, x_3585.y, x_3585.z));
  let x_3588 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3587.x, x_3587.y, x_3587.z, x_3588.w);
  let x_3590 : vec4<f32> = u_xlat6;
  let x_3593 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3595 : vec3<f32> = (vec3<f32>(x_3590.x, x_3590.y, x_3590.z) + vec3<f32>(x_3593.x, x_3593.y, x_3593.z));
  let x_3596 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3595.x, x_3595.y, x_3595.z, x_3596.w);
  let x_3598 : vec4<f32> = u_xlat8;
  let x_3600 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3598.x, x_3598.y, x_3598.z), vec3<f32>(x_3600.x, x_3600.y, x_3600.z));
  let x_3603 : f32 = u_xlat66;
  u_xlat66 = max(x_3603, 1.17549435e-37f);
  let x_3606 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3606);
  let x_3608 : f32 = u_xlat66;
  let x_3610 : vec4<f32> = u_xlat8;
  let x_3612 : vec3<f32> = (vec3<f32>(x_3608, x_3608, x_3608) * vec3<f32>(x_3610.x, x_3610.y, x_3610.z));
  let x_3613 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3612.x, x_3612.y, x_3612.z, x_3613.w);
  let x_3615 : vec3<f32> = u_xlat25;
  let x_3616 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(x_3615, vec3<f32>(x_3616.x, x_3616.y, x_3616.z));
  let x_3619 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3619, 0.0f, 1.0f);
  let x_3622 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3624 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3622.x, x_3622.y, x_3622.z), vec3<f32>(x_3624.x, x_3624.y, x_3624.z));
  let x_3627 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3627, 0.0f, 1.0f);
  let x_3629 : f32 = u_xlat66;
  let x_3630 : f32 = u_xlat66;
  u_xlat66 = (x_3629 * x_3630);
  let x_3632 : f32 = u_xlat66;
  let x_3634 : f32 = u_xlat23.x;
  u_xlat66 = ((x_3632 * x_3634) + 1.000010014f);
  let x_3638 : f32 = u_xlat67;
  let x_3639 : f32 = u_xlat67;
  u_xlat67 = (x_3638 * x_3639);
  let x_3641 : f32 = u_xlat66;
  let x_3642 : f32 = u_xlat66;
  u_xlat66 = (x_3641 * x_3642);
  let x_3644 : f32 = u_xlat67;
  u_xlat67 = max(x_3644, 0.100000001f);
  let x_3647 : f32 = u_xlat66;
  let x_3648 : f32 = u_xlat67;
  u_xlat66 = (x_3647 * x_3648);
  let x_3650 : f32 = u_xlat72;
  let x_3651 : f32 = u_xlat66;
  u_xlat66 = (x_3650 * x_3651);
  let x_3653 : f32 = u_xlat68;
  let x_3654 : f32 = u_xlat66;
  u_xlat66 = (x_3653 / x_3654);
  let x_3656 : f32 = u_xlat66;
  let x_3660 : vec3<f32> = u_xlat2;
  let x_3661 : vec3<f32> = ((vec3<f32>(x_3656, x_3656, x_3656) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3660);
  let x_3662 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3661.x, x_3661.y, x_3661.z, x_3662.w);
  let x_3664 : vec4<f32> = u_xlat4;
  let x_3666 : vec4<f32> = u_xlat8;
  let x_3668 : vec3<f32> = (vec3<f32>(x_3664.x, x_3664.y, x_3664.z) * vec3<f32>(x_3666.x, x_3666.y, x_3666.z));
  let x_3669 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3668.x, x_3668.y, x_3668.z, x_3669.w);
  let x_3672 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3674 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3672, x_3674);
  let x_3676 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3676));
  let x_3680 : f32 = x_3295.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3682 : f32 = x_3295.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3684 : f32 = x_3295.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3686 : f32 = x_3295.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3687 : vec4<f32> = vec4<f32>(x_3680, x_3682, x_3684, x_3686);
  let x_3693 : vec4<bool> = (vec4<f32>(x_3687.x, x_3687.y, x_3687.z, x_3687.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb51 = vec2<bool>(x_3693.x, x_3693.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3704 : u32 = u_xlatu_loop_1;
    let x_3705 : u32 = u_xlatu66;
    if ((x_3704 < x_3705)) {
    } else {
      break;
    }
    let x_3708 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3708 >> 2u);
    let x_3711 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3711 & 3u));
    let x_3714 : u32 = u_xlatu3;
    let x_3717 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3714)];
    let x_3727 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3732 : vec4<u32> = indexable[x_3727];
    u_xlat3.x = dot(x_3717, bitcast<vec4<f32>>(x_3732));
    let x_3737 : f32 = u_xlat3.x;
    u_xlatu3 = bitcast<u32>(i32(x_3737));
    let x_3740 : vec3<f32> = vs_INTERP0;
    let x_3752 : u32 = u_xlatu3;
    let x_3755 : vec4<f32> = x_3751.x_AdditionalLightsPosition[bitcast<i32>(x_3752)];
    let x_3758 : u32 = u_xlatu3;
    let x_3761 : vec4<f32> = x_3751.x_AdditionalLightsPosition[bitcast<i32>(x_3758)];
    let x_3763 : vec3<f32> = ((-(x_3740) * vec3<f32>(x_3755.w, x_3755.w, x_3755.w)) + vec3<f32>(x_3761.x, x_3761.y, x_3761.z));
    let x_3764 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3763.x, x_3763.y, x_3763.z, x_3764.w);
    let x_3766 : vec4<f32> = u_xlat9;
    let x_3768 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3766.x, x_3766.y, x_3766.z), vec3<f32>(x_3768.x, x_3768.y, x_3768.z));
    let x_3771 : f32 = u_xlat70;
    u_xlat70 = max(x_3771, 6.10351562e-05f);
    let x_3775 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3775);
    let x_3777 : f32 = u_xlat71;
    let x_3779 : vec4<f32> = u_xlat9;
    let x_3781 : vec3<f32> = (vec3<f32>(x_3777, x_3777, x_3777) * vec3<f32>(x_3779.x, x_3779.y, x_3779.z));
    let x_3782 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3781.x, x_3781.y, x_3781.z, x_3782.w);
    let x_3785 : f32 = u_xlat70;
    u_xlat74 = (1.0f / x_3785);
    let x_3787 : f32 = u_xlat70;
    let x_3788 : u32 = u_xlatu3;
    let x_3791 : f32 = x_3751.x_AdditionalLightsAttenuation[bitcast<i32>(x_3788)].x;
    u_xlat70 = (x_3787 * x_3791);
    let x_3793 : f32 = u_xlat70;
    let x_3795 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3793) * x_3795) + 1.0f);
    let x_3798 : f32 = u_xlat70;
    u_xlat70 = max(x_3798, 0.0f);
    let x_3800 : f32 = u_xlat70;
    let x_3801 : f32 = u_xlat70;
    u_xlat70 = (x_3800 * x_3801);
    let x_3803 : f32 = u_xlat70;
    let x_3804 : f32 = u_xlat74;
    u_xlat70 = (x_3803 * x_3804);
    let x_3806 : u32 = u_xlatu3;
    let x_3809 : vec4<f32> = x_3751.x_AdditionalLightsSpotDir[bitcast<i32>(x_3806)];
    let x_3811 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3809.x, x_3809.y, x_3809.z), vec3<f32>(x_3811.x, x_3811.y, x_3811.z));
    let x_3814 : f32 = u_xlat74;
    let x_3815 : u32 = u_xlatu3;
    let x_3818 : f32 = x_3751.x_AdditionalLightsAttenuation[bitcast<i32>(x_3815)].z;
    let x_3820 : u32 = u_xlatu3;
    let x_3823 : f32 = x_3751.x_AdditionalLightsAttenuation[bitcast<i32>(x_3820)].w;
    u_xlat74 = ((x_3814 * x_3818) + x_3823);
    let x_3825 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3825, 0.0f, 1.0f);
    let x_3827 : f32 = u_xlat74;
    let x_3828 : f32 = u_xlat74;
    u_xlat74 = (x_3827 * x_3828);
    let x_3830 : f32 = u_xlat70;
    let x_3831 : f32 = u_xlat74;
    u_xlat70 = (x_3830 * x_3831);
    let x_3834 : u32 = u_xlatu3;
    u_xlatu74 = (x_3834 >> 5u);
    let x_3837 : u32 = u_xlatu3;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3837) & 31i)));
    let x_3843 : i32 = u_xlati75;
    let x_3845 : u32 = u_xlatu74;
    let x_3848 : f32 = x_3295.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3845)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3843) & bitcast<u32>(x_3848)));
    let x_3852 : i32 = u_xlati74;
    if ((x_3852 != 0i)) {
      let x_3862 : u32 = u_xlatu3;
      let x_3865 : f32 = x_3861.x_AdditionalLightsLightTypes[bitcast<i32>(x_3862)].el;
      u_xlati74 = i32(x_3865);
      let x_3867 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3867 != 0i));
      let x_3871 : u32 = u_xlatu3;
      u_xlati76 = (bitcast<i32>(x_3871) << bitcast<u32>(2i));
      let x_3874 : i32 = u_xlati75;
      if ((x_3874 != 0i)) {
        let x_3878 : vec3<f32> = vs_INTERP0;
        let x_3880 : i32 = u_xlati76;
        let x_3883 : i32 = u_xlati76;
        let x_3887 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[((x_3880 + 1i) / 4i)][((x_3883 + 1i) % 4i)];
        let x_3889 : vec3<f32> = (vec3<f32>(x_3878.y, x_3878.y, x_3878.y) * vec3<f32>(x_3887.x, x_3887.y, x_3887.w));
        let x_3890 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3889.x, x_3889.y, x_3889.z, x_3890.w);
        let x_3892 : i32 = u_xlati76;
        let x_3894 : i32 = u_xlati76;
        let x_3897 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[(x_3892 / 4i)][(x_3894 % 4i)];
        let x_3899 : vec3<f32> = vs_INTERP0;
        let x_3902 : vec4<f32> = u_xlat11;
        let x_3904 : vec3<f32> = ((vec3<f32>(x_3897.x, x_3897.y, x_3897.w) * vec3<f32>(x_3899.x, x_3899.x, x_3899.x)) + vec3<f32>(x_3902.x, x_3902.y, x_3902.z));
        let x_3905 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3904.x, x_3904.y, x_3904.z, x_3905.w);
        let x_3907 : i32 = u_xlati76;
        let x_3910 : i32 = u_xlati76;
        let x_3914 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[((x_3907 + 2i) / 4i)][((x_3910 + 2i) % 4i)];
        let x_3916 : vec3<f32> = vs_INTERP0;
        let x_3919 : vec4<f32> = u_xlat11;
        let x_3921 : vec3<f32> = ((vec3<f32>(x_3914.x, x_3914.y, x_3914.w) * vec3<f32>(x_3916.z, x_3916.z, x_3916.z)) + vec3<f32>(x_3919.x, x_3919.y, x_3919.z));
        let x_3922 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3921.x, x_3921.y, x_3921.z, x_3922.w);
        let x_3924 : vec4<f32> = u_xlat11;
        let x_3926 : i32 = u_xlati76;
        let x_3929 : i32 = u_xlati76;
        let x_3933 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[((x_3926 + 3i) / 4i)][((x_3929 + 3i) % 4i)];
        let x_3935 : vec3<f32> = (vec3<f32>(x_3924.x, x_3924.y, x_3924.z) + vec3<f32>(x_3933.x, x_3933.y, x_3933.w));
        let x_3936 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3935.x, x_3935.y, x_3935.z, x_3936.w);
        let x_3938 : vec4<f32> = u_xlat11;
        let x_3940 : vec4<f32> = u_xlat11;
        let x_3942 : vec2<f32> = (vec2<f32>(x_3938.x, x_3938.y) / vec2<f32>(x_3940.z, x_3940.z));
        let x_3943 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3942.x, x_3942.y, x_3943.z, x_3943.w);
        let x_3945 : vec4<f32> = u_xlat11;
        let x_3948 : vec2<f32> = ((vec2<f32>(x_3945.x, x_3945.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3949 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3948.x, x_3948.y, x_3949.z, x_3949.w);
        let x_3951 : vec4<f32> = u_xlat11;
        let x_3955 : vec2<f32> = clamp(vec2<f32>(x_3951.x, x_3951.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3956 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3955.x, x_3955.y, x_3956.z, x_3956.w);
        let x_3958 : u32 = u_xlatu3;
        let x_3961 : vec4<f32> = x_3861.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3958)];
        let x_3963 : vec4<f32> = u_xlat11;
        let x_3966 : u32 = u_xlatu3;
        let x_3969 : vec4<f32> = x_3861.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3966)];
        let x_3971 : vec2<f32> = ((vec2<f32>(x_3961.x, x_3961.y) * vec2<f32>(x_3963.x, x_3963.y)) + vec2<f32>(x_3969.z, x_3969.w));
        let x_3972 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3971.x, x_3971.y, x_3972.z, x_3972.w);
      } else {
        let x_3976 : i32 = u_xlati74;
        u_xlatb74 = (x_3976 == 1i);
        let x_3978 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_3978);
        let x_3980 : i32 = u_xlati74;
        if ((x_3980 != 0i)) {
          let x_3984 : vec3<f32> = vs_INTERP0;
          let x_3986 : i32 = u_xlati76;
          let x_3989 : i32 = u_xlati76;
          let x_3993 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[((x_3986 + 1i) / 4i)][((x_3989 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_3984.y, x_3984.y) * vec2<f32>(x_3993.x, x_3993.y));
          let x_3996 : i32 = u_xlati76;
          let x_3998 : i32 = u_xlati76;
          let x_4001 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[(x_3996 / 4i)][(x_3998 % 4i)];
          let x_4003 : vec3<f32> = vs_INTERP0;
          let x_4006 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4001.x, x_4001.y) * vec2<f32>(x_4003.x, x_4003.x)) + x_4006);
          let x_4008 : i32 = u_xlati76;
          let x_4011 : i32 = u_xlati76;
          let x_4015 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[((x_4008 + 2i) / 4i)][((x_4011 + 2i) % 4i)];
          let x_4017 : vec3<f32> = vs_INTERP0;
          let x_4020 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4015.x, x_4015.y) * vec2<f32>(x_4017.z, x_4017.z)) + x_4020);
          let x_4022 : vec2<f32> = u_xlat55;
          let x_4023 : i32 = u_xlati76;
          let x_4026 : i32 = u_xlati76;
          let x_4030 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[((x_4023 + 3i) / 4i)][((x_4026 + 3i) % 4i)];
          u_xlat55 = (x_4022 + vec2<f32>(x_4030.x, x_4030.y));
          let x_4033 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4033 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4036 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4036);
          let x_4038 : u32 = u_xlatu3;
          let x_4041 : vec4<f32> = x_3861.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4038)];
          let x_4043 : vec2<f32> = u_xlat55;
          let x_4045 : u32 = u_xlatu3;
          let x_4048 : vec4<f32> = x_3861.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4045)];
          let x_4050 : vec2<f32> = ((vec2<f32>(x_4041.x, x_4041.y) * x_4043) + vec2<f32>(x_4048.z, x_4048.w));
          let x_4051 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4050.x, x_4050.y, x_4051.z, x_4051.w);
        } else {
          let x_4054 : vec3<f32> = vs_INTERP0;
          let x_4056 : i32 = u_xlati76;
          let x_4059 : i32 = u_xlati76;
          let x_4063 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[((x_4056 + 1i) / 4i)][((x_4059 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4054.y, x_4054.y, x_4054.y, x_4054.y) * x_4063);
          let x_4065 : i32 = u_xlati76;
          let x_4067 : i32 = u_xlati76;
          let x_4070 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[(x_4065 / 4i)][(x_4067 % 4i)];
          let x_4071 : vec3<f32> = vs_INTERP0;
          let x_4074 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4070 * vec4<f32>(x_4071.x, x_4071.x, x_4071.x, x_4071.x)) + x_4074);
          let x_4076 : i32 = u_xlati76;
          let x_4079 : i32 = u_xlati76;
          let x_4083 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[((x_4076 + 2i) / 4i)][((x_4079 + 2i) % 4i)];
          let x_4084 : vec3<f32> = vs_INTERP0;
          let x_4087 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4083 * vec4<f32>(x_4084.z, x_4084.z, x_4084.z, x_4084.z)) + x_4087);
          let x_4089 : vec4<f32> = u_xlat12;
          let x_4090 : i32 = u_xlati76;
          let x_4093 : i32 = u_xlati76;
          let x_4097 : vec4<f32> = x_3861.x_AdditionalLightsWorldToLights[((x_4090 + 3i) / 4i)][((x_4093 + 3i) % 4i)];
          u_xlat12 = (x_4089 + x_4097);
          let x_4099 : vec4<f32> = u_xlat12;
          let x_4101 : vec4<f32> = u_xlat12;
          let x_4103 : vec3<f32> = (vec3<f32>(x_4099.x, x_4099.y, x_4099.z) / vec3<f32>(x_4101.w, x_4101.w, x_4101.w));
          let x_4104 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4103.x, x_4103.y, x_4103.z, x_4104.w);
          let x_4106 : vec4<f32> = u_xlat12;
          let x_4108 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4106.x, x_4106.y, x_4106.z), vec3<f32>(x_4108.x, x_4108.y, x_4108.z));
          let x_4111 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4111);
          let x_4113 : f32 = u_xlat74;
          let x_4115 : vec4<f32> = u_xlat12;
          let x_4117 : vec3<f32> = (vec3<f32>(x_4113, x_4113, x_4113) * vec3<f32>(x_4115.x, x_4115.y, x_4115.z));
          let x_4118 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4117.x, x_4117.y, x_4117.z, x_4118.w);
          let x_4120 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4120.x, x_4120.y, x_4120.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4125 : f32 = u_xlat74;
          u_xlat74 = max(x_4125, 0.000001f);
          let x_4128 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4128);
          let x_4130 : f32 = u_xlat74;
          let x_4132 : vec4<f32> = u_xlat12;
          let x_4134 : vec3<f32> = (vec3<f32>(x_4130, x_4130, x_4130) * vec3<f32>(x_4132.z, x_4132.x, x_4132.y));
          let x_4135 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4134.x, x_4134.y, x_4134.z, x_4135.w);
          let x_4138 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4138);
          let x_4142 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4142, 0.0f, 1.0f);
          let x_4146 : vec4<f32> = u_xlat13;
          let x_4149 : vec4<bool> = (vec4<f32>(x_4146.y, x_4146.z, x_4146.y, x_4146.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4149.x, x_4149.y);
          let x_4152 : bool = u_xlatb55.x;
          if (x_4152) {
            let x_4157 : f32 = u_xlat13.x;
            x_4153 = x_4157;
          } else {
            let x_4160 : f32 = u_xlat13.x;
            x_4153 = -(x_4160);
          }
          let x_4162 : f32 = x_4153;
          u_xlat55.x = x_4162;
          let x_4165 : bool = u_xlatb55.y;
          if (x_4165) {
            let x_4170 : f32 = u_xlat13.x;
            x_4166 = x_4170;
          } else {
            let x_4173 : f32 = u_xlat13.x;
            x_4166 = -(x_4173);
          }
          let x_4175 : f32 = x_4166;
          u_xlat55.y = x_4175;
          let x_4177 : vec4<f32> = u_xlat12;
          let x_4179 : f32 = u_xlat74;
          let x_4182 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4177.x, x_4177.y) * vec2<f32>(x_4179, x_4179)) + x_4182);
          let x_4184 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4184 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4187 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4187, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4191 : u32 = u_xlatu3;
          let x_4194 : vec4<f32> = x_3861.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4191)];
          let x_4196 : vec2<f32> = u_xlat55;
          let x_4198 : u32 = u_xlatu3;
          let x_4201 : vec4<f32> = x_3861.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4198)];
          let x_4203 : vec2<f32> = ((vec2<f32>(x_4194.x, x_4194.y) * x_4196) + vec2<f32>(x_4201.z, x_4201.w));
          let x_4204 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4203.x, x_4203.y, x_4204.z, x_4204.w);
        }
      }
      let x_4211 : vec4<f32> = u_xlat11;
      let x_4214 : f32 = x_66.x_GlobalMipBias.x;
      let x_4215 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4211.x, x_4211.y), x_4214);
      u_xlat11 = x_4215;
      let x_4217 : bool = u_xlatb51.y;
      if (x_4217) {
        let x_4222 : f32 = u_xlat11.w;
        x_4218 = x_4222;
      } else {
        let x_4225 : f32 = u_xlat11.x;
        x_4218 = x_4225;
      }
      let x_4226 : f32 = x_4218;
      u_xlat74 = x_4226;
      let x_4228 : bool = u_xlatb51.x;
      if (x_4228) {
        let x_4232 : vec4<f32> = u_xlat11;
        x_4229 = vec3<f32>(x_4232.x, x_4232.y, x_4232.z);
      } else {
        let x_4235 : f32 = u_xlat74;
        x_4229 = vec3<f32>(x_4235, x_4235, x_4235);
      }
      let x_4237 : vec3<f32> = x_4229;
      let x_4238 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4237.x, x_4237.y, x_4237.z, x_4238.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4244 : vec4<f32> = u_xlat11;
    let x_4246 : u32 = u_xlatu3;
    let x_4249 : vec4<f32> = x_3751.x_AdditionalLightsColor[bitcast<i32>(x_4246)];
    let x_4251 : vec3<f32> = (vec3<f32>(x_4244.x, x_4244.y, x_4244.z) * vec3<f32>(x_4249.x, x_4249.y, x_4249.z));
    let x_4252 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4251.x, x_4251.y, x_4251.z, x_4252.w);
    let x_4254 : vec2<f32> = u_xlat29;
    let x_4256 : vec4<f32> = u_xlat11;
    let x_4258 : vec3<f32> = (vec3<f32>(x_4254.x, x_4254.x, x_4254.x) * vec3<f32>(x_4256.x, x_4256.y, x_4256.z));
    let x_4259 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4258.x, x_4258.y, x_4258.z, x_4259.w);
    let x_4261 : vec3<f32> = u_xlat25;
    let x_4262 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(x_4261, vec3<f32>(x_4262.x, x_4262.y, x_4262.z));
    let x_4267 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4267, 0.0f, 1.0f);
    let x_4271 : f32 = u_xlat3.x;
    let x_4272 : f32 = u_xlat70;
    u_xlat3.x = (x_4271 * x_4272);
    let x_4275 : vec4<f32> = u_xlat3;
    let x_4277 : vec4<f32> = u_xlat11;
    let x_4279 : vec3<f32> = (vec3<f32>(x_4275.x, x_4275.x, x_4275.x) * vec3<f32>(x_4277.x, x_4277.y, x_4277.z));
    let x_4280 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4279.x, x_4279.y, x_4279.z, x_4280.w);
    let x_4282 : vec4<f32> = u_xlat9;
    let x_4284 : f32 = u_xlat71;
    let x_4287 : vec4<f32> = u_xlat6;
    let x_4289 : vec3<f32> = ((vec3<f32>(x_4282.x, x_4282.y, x_4282.z) * vec3<f32>(x_4284, x_4284, x_4284)) + vec3<f32>(x_4287.x, x_4287.y, x_4287.z));
    let x_4290 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4289.x, x_4289.y, x_4289.z, x_4290.w);
    let x_4292 : vec4<f32> = u_xlat9;
    let x_4294 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_4292.x, x_4292.y, x_4292.z), vec3<f32>(x_4294.x, x_4294.y, x_4294.z));
    let x_4299 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4299, 1.17549435e-37f);
    let x_4303 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_4303);
    let x_4306 : vec4<f32> = u_xlat3;
    let x_4308 : vec4<f32> = u_xlat9;
    let x_4310 : vec3<f32> = (vec3<f32>(x_4306.x, x_4306.x, x_4306.x) * vec3<f32>(x_4308.x, x_4308.y, x_4308.z));
    let x_4311 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4310.x, x_4310.y, x_4310.z, x_4311.w);
    let x_4313 : vec3<f32> = u_xlat25;
    let x_4314 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(x_4313, vec3<f32>(x_4314.x, x_4314.y, x_4314.z));
    let x_4319 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4319, 0.0f, 1.0f);
    let x_4322 : vec4<f32> = u_xlat10;
    let x_4324 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_4322.x, x_4322.y, x_4322.z), vec3<f32>(x_4324.x, x_4324.y, x_4324.z));
    let x_4327 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4327, 0.0f, 1.0f);
    let x_4330 : f32 = u_xlat3.x;
    let x_4332 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4330 * x_4332);
    let x_4336 : f32 = u_xlat3.x;
    let x_4338 : f32 = u_xlat23.x;
    u_xlat3.x = ((x_4336 * x_4338) + 1.000010014f);
    let x_4342 : f32 = u_xlat70;
    let x_4343 : f32 = u_xlat70;
    u_xlat70 = (x_4342 * x_4343);
    let x_4346 : f32 = u_xlat3.x;
    let x_4348 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4346 * x_4348);
    let x_4351 : f32 = u_xlat70;
    u_xlat70 = max(x_4351, 0.100000001f);
    let x_4354 : f32 = u_xlat3.x;
    let x_4355 : f32 = u_xlat70;
    u_xlat3.x = (x_4354 * x_4355);
    let x_4358 : f32 = u_xlat72;
    let x_4360 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4358 * x_4360);
    let x_4363 : f32 = u_xlat68;
    let x_4365 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4363 / x_4365);
    let x_4368 : vec4<f32> = u_xlat3;
    let x_4371 : vec3<f32> = u_xlat2;
    let x_4372 : vec3<f32> = ((vec3<f32>(x_4368.x, x_4368.x, x_4368.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4371);
    let x_4373 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4372.x, x_4372.y, x_4372.z, x_4373.w);
    let x_4375 : vec4<f32> = u_xlat9;
    let x_4377 : vec4<f32> = u_xlat11;
    let x_4380 : vec4<f32> = u_xlat8;
    let x_4382 : vec3<f32> = ((vec3<f32>(x_4375.x, x_4375.y, x_4375.z) * vec3<f32>(x_4377.x, x_4377.y, x_4377.z)) + vec3<f32>(x_4380.x, x_4380.y, x_4380.z));
    let x_4383 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4382.x, x_4382.y, x_4382.z, x_4383.w);

    continuing {
      let x_4385 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4385 + bitcast<u32>(1i));
    }
  }
  let x_4387 : vec4<f32> = u_xlat5;
  let x_4389 : vec4<f32> = u_xlat7;
  let x_4392 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_4387.x, x_4387.y, x_4387.z) * vec3<f32>(x_4389.x, x_4389.x, x_4389.x)) + vec3<f32>(x_4392.x, x_4392.y, x_4392.z));
  let x_4395 : vec4<f32> = u_xlat8;
  let x_4397 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4395.x, x_4395.y, x_4395.z) + x_4397);
  let x_4401 : vec4<f32> = vs_INTERP4;
  let x_4403 : vec3<f32> = u_xlat0;
  let x_4405 : vec3<f32> = u_xlat2;
  let x_4406 : vec3<f32> = ((vec3<f32>(x_4401.w, x_4401.w, x_4401.w) * x_4403) + x_4405);
  let x_4407 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4406.x, x_4406.y, x_4406.z, x_4407.w);
  let x_4409 : bool = u_xlatb45;
  if (x_4409) {
    let x_4414 : f32 = u_xlat1.x;
    x_4410 = x_4414;
  } else {
    x_4410 = 1.0f;
  }
  let x_4416 : f32 = x_4410;
  SV_Target0.w = x_4416;
  let x_4422 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_4424 : f32 = x_1752.unity_RenderingLayer.x;
  u_xlatu0 = (x_4422 & bitcast<u32>(x_4424));
  let x_4427 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4427);
  let x_4432 : f32 = u_xlat0.x;
  let x_4434 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4432 * x_4434);
  let x_4438 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4438, 0.0f, 1.0f);
  let x_4441 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4441.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

