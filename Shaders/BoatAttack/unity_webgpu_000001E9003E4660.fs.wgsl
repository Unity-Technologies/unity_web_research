struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_Lut_Params : vec4<f32>,
  x_UserLut_Params : vec4<f32>,
  x_Bloom_Params : vec4<f32>,
  x_Bloom_RGBM : f32,
  @size(12)
  padding_1 : u32,
  x_Distortion_Params1 : vec4<f32>,
  x_Distortion_Params2 : vec4<f32>,
  x_Chroma_Params : f32,
  @size(12)
  padding_2 : u32,
  x_Vignette_Params1 : vec4<f32>,
  x_Vignette_Params2 : vec4<f32>,
  x_Grain_Params : vec2<f32>,
  @size(8)
  padding_3 : u32,
  x_Grain_TilingParams : vec4<f32>,
  x_Bloom_Texture_TexelSize : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_25 : PGlobals;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(5) var sampler_LinearClamp : sampler;

@group(0) @binding(1) var x_Bloom_Texture : texture_2d<f32>;

@group(0) @binding(4) var x_UserLut : texture_2d<f32>;

@group(0) @binding(3) var x_InternalLut : texture_2d<f32>;

@group(0) @binding(2) var x_Grain_Texture : texture_2d<f32>;

@group(0) @binding(6) var sampler_LinearRepeat : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlatb8 : bool;
  var u_xlat15 : vec2<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat22 : f32;
  var u_xlat9 : f32;
  var u_xlat16 : f32;
  var u_xlat23 : f32;
  var u_xlatb3 : vec3<bool>;
  var u_xlatb1 : vec3<bool>;
  var x_224 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat18 : f32;
  var u_xlat25 : f32;
  var u_xlatb12 : bool;
  var x_443 : f32;
  var x_470 : f32;
  var u_xlat7 : vec3<f32>;
  var u_xlat10 : f32;
  var u_xlatb4 : bool;
  var u_xlatb0 : bool;
  var x_654 : f32;
  var u_xlat17 : vec2<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlatb21 : bool;
  var u_xlat21 : f32;
  var hlslcc_movcTemp : vec3<f32>;
  var x_1083 : f32;
  var x_1095 : f32;
  var x_1107 : f32;
  var x_1270 : f32;
  var x_1282 : f32;
  var x_1294 : f32;
  var u_xlat8 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  let x_16 : vec2<f32> = (x_13 + vec2<f32>(-0.5f, -0.5f));
  let x_17 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_16.x, x_16.y, x_17.z, x_17.w);
  let x_21 : vec4<f32> = u_xlat0;
  let x_30 : vec4<f32> = x_25.x_Distortion_Params2;
  u_xlat14 = ((vec2<f32>(x_21.x, x_21.y) * vec2<f32>(x_30.z, x_30.z)) + vec2<f32>(0.5f, 0.5f));
  let x_36 : vec4<f32> = u_xlat0;
  let x_39 : vec4<f32> = x_25.x_Distortion_Params2;
  let x_44 : vec4<f32> = x_25.x_Distortion_Params1;
  let x_47 : vec2<f32> = ((vec2<f32>(x_36.x, x_36.y) * vec2<f32>(x_39.z, x_39.z)) + -(vec2<f32>(x_44.x, x_44.y)));
  let x_48 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_47.x, x_47.y, x_48.z, x_48.w);
  let x_50 : vec4<f32> = u_xlat0;
  let x_53 : vec4<f32> = x_25.x_Distortion_Params1;
  let x_55 : vec2<f32> = (vec2<f32>(x_50.x, x_50.y) * vec2<f32>(x_53.z, x_53.w));
  let x_56 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_55.x, x_55.y, x_56.z, x_56.w);
  let x_61 : vec4<f32> = u_xlat0;
  let x_63 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_61.x, x_61.y), vec2<f32>(x_63.x, x_63.y));
  let x_71 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_71);
  let x_81 : f32 = x_25.x_Distortion_Params2.w;
  u_xlatb8 = (0.0f < x_81);
  let x_83 : bool = u_xlatb8;
  if (x_83) {
    let x_87 : vec3<f32> = u_xlat1;
    let x_90 : vec4<f32> = x_25.x_Distortion_Params2;
    u_xlat15 = (vec2<f32>(x_87.x, x_87.x) * vec2<f32>(x_90.x, x_90.y));
    let x_95 : f32 = u_xlat15.x;
    u_xlat2.x = sin(x_95);
    let x_100 : f32 = u_xlat15.x;
    u_xlat3.x = cos(x_100);
    let x_104 : f32 = u_xlat2.x;
    let x_106 : f32 = u_xlat3.x;
    u_xlat15.x = (x_104 / x_106);
    let x_113 : f32 = u_xlat15.y;
    u_xlat22 = (1.0f / x_113);
    let x_116 : f32 = u_xlat15.x;
    let x_117 : f32 = u_xlat22;
    u_xlat15.x = ((x_116 * x_117) + -1.0f);
    let x_122 : vec4<f32> = u_xlat0;
    let x_124 : vec2<f32> = u_xlat15;
    let x_127 : vec2<f32> = u_xlat14;
    u_xlat15 = ((vec2<f32>(x_122.x, x_122.y) * vec2<f32>(x_124.x, x_124.x)) + x_127);
  } else {
    let x_131 : f32 = u_xlat1.x;
    u_xlat2.x = (1.0f / x_131);
    let x_135 : f32 = u_xlat2.x;
    let x_137 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat2.x = (x_135 * x_137);
    let x_141 : f32 = u_xlat1.x;
    let x_143 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat1.x = (x_141 * x_143);
    let x_148 : f32 = u_xlat1.x;
    u_xlat9 = min(abs(x_148), 1.0f);
    let x_153 : f32 = u_xlat1.x;
    u_xlat16 = max(abs(x_153), 1.0f);
    let x_156 : f32 = u_xlat16;
    u_xlat16 = (1.0f / x_156);
    let x_158 : f32 = u_xlat16;
    let x_159 : f32 = u_xlat9;
    u_xlat9 = (x_158 * x_159);
    let x_161 : f32 = u_xlat9;
    let x_162 : f32 = u_xlat9;
    u_xlat16 = (x_161 * x_162);
    let x_165 : f32 = u_xlat16;
    u_xlat23 = ((x_165 * 0.0208351f) + -0.085133001f);
    let x_170 : f32 = u_xlat16;
    let x_171 : f32 = u_xlat23;
    u_xlat23 = ((x_170 * x_171) + 0.180141002f);
    let x_175 : f32 = u_xlat16;
    let x_176 : f32 = u_xlat23;
    u_xlat23 = ((x_175 * x_176) + -0.330299497f);
    let x_180 : f32 = u_xlat16;
    let x_181 : f32 = u_xlat23;
    u_xlat16 = ((x_180 * x_181) + 0.999866009f);
    let x_185 : f32 = u_xlat16;
    let x_186 : f32 = u_xlat9;
    u_xlat23 = (x_185 * x_186);
    let x_192 : f32 = u_xlat1.x;
    u_xlatb3.x = (1.0f < abs(x_192));
    let x_196 : f32 = u_xlat23;
    u_xlat23 = ((x_196 * -2.0f) + 1.570796371f);
    let x_202 : bool = u_xlatb3.x;
    let x_203 : f32 = u_xlat23;
    u_xlat23 = select(0.0f, x_203, x_202);
    let x_205 : f32 = u_xlat9;
    let x_206 : f32 = u_xlat16;
    let x_208 : f32 = u_xlat23;
    u_xlat9 = ((x_205 * x_206) + x_208);
    let x_211 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_211, 1.0f);
    let x_216 : f32 = u_xlat1.x;
    let x_218 : f32 = u_xlat1.x;
    u_xlatb1.x = (x_216 < -(x_218));
    let x_223 : bool = u_xlatb1.x;
    if (x_223) {
      let x_227 : f32 = u_xlat9;
      x_224 = -(x_227);
    } else {
      let x_230 : f32 = u_xlat9;
      x_224 = x_230;
    }
    let x_231 : f32 = x_224;
    u_xlat1.x = x_231;
    let x_234 : f32 = u_xlat2.x;
    let x_236 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_234 * x_236) + -1.0f);
    let x_240 : vec4<f32> = u_xlat0;
    let x_242 : vec3<f32> = u_xlat1;
    let x_245 : vec2<f32> = u_xlat14;
    u_xlat15 = ((vec2<f32>(x_240.x, x_240.y) * vec2<f32>(x_242.x, x_242.x)) + x_245);
  }
  let x_247 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((vec4<f32>(x_247.x, x_247.y, x_247.x, x_247.y) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_254 : vec4<f32> = u_xlat0;
  let x_256 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_254.z, x_254.w), vec2<f32>(x_256.z, x_256.w));
  let x_260 : vec4<f32> = u_xlat0;
  let x_261 : vec3<f32> = u_xlat1;
  u_xlat0 = (x_260 * vec4<f32>(x_261.x, x_261.x, x_261.x, x_261.x));
  let x_264 : vec4<f32> = u_xlat0;
  let x_267 : f32 = x_25.x_Chroma_Params;
  u_xlat0 = (x_264 * vec4<f32>(x_267, x_267, x_267, x_267));
  let x_280 : vec2<f32> = u_xlat15;
  let x_283 : f32 = x_25.x_GlobalMipBias.x;
  let x_284 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_280, x_283);
  u_xlat2.x = x_284.x;
  let x_287 : vec4<f32> = u_xlat0;
  let x_292 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((x_287 * vec4<f32>(-0.333333343f, -0.333333343f, -0.666666687f, -0.666666687f)) + vec4<f32>(x_292.x, x_292.y, x_292.x, x_292.y));
  let x_295 : vec4<f32> = u_xlat0;
  u_xlat0 = (x_295 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_298 : vec4<f32> = u_xlat0;
  let x_300 : vec4<f32> = x_25.x_Distortion_Params2;
  u_xlat3 = ((x_298 * vec4<f32>(x_300.z, x_300.z, x_300.z, x_300.z)) + vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_305 : vec4<f32> = u_xlat0;
  let x_307 : vec4<f32> = x_25.x_Distortion_Params2;
  let x_311 : vec4<f32> = x_25.x_Distortion_Params1;
  u_xlat0 = ((x_305 * vec4<f32>(x_307.z, x_307.z, x_307.z, x_307.z)) + -(vec4<f32>(x_311.x, x_311.y, x_311.x, x_311.y)));
  let x_315 : vec4<f32> = u_xlat0;
  let x_317 : vec4<f32> = x_25.x_Distortion_Params1;
  u_xlat0 = (x_315 * vec4<f32>(x_317.z, x_317.w, x_317.z, x_317.w));
  let x_320 : vec4<f32> = u_xlat0;
  let x_322 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_320.x, x_320.y), vec2<f32>(x_322.x, x_322.y));
  let x_327 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_327);
  let x_330 : bool = u_xlatb8;
  if (x_330) {
    let x_334 : vec3<f32> = u_xlat1;
    let x_337 : vec4<f32> = x_25.x_Distortion_Params2;
    let x_339 : vec2<f32> = (vec2<f32>(x_334.x, x_334.x) * vec2<f32>(x_337.x, x_337.y));
    let x_340 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_339.x, x_339.y, x_340.z, x_340.w);
    let x_344 : f32 = u_xlat4.x;
    u_xlat5.x = cos(x_344);
    let x_348 : f32 = u_xlat4.x;
    u_xlat4.x = sin(x_348);
    let x_352 : f32 = u_xlat4.x;
    let x_354 : f32 = u_xlat5.x;
    u_xlat23 = (x_352 / x_354);
    let x_357 : f32 = u_xlat4.y;
    u_xlat4.x = (1.0f / x_357);
    let x_360 : f32 = u_xlat23;
    let x_362 : f32 = u_xlat4.x;
    u_xlat23 = ((x_360 * x_362) + -1.0f);
    let x_365 : vec4<f32> = u_xlat0;
    let x_367 : f32 = u_xlat23;
    let x_370 : vec4<f32> = u_xlat3;
    let x_372 : vec2<f32> = ((vec2<f32>(x_365.x, x_365.y) * vec2<f32>(x_367, x_367)) + vec2<f32>(x_370.x, x_370.y));
    let x_373 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_372.x, x_372.y, x_373.z, x_373.w);
  } else {
    let x_377 : f32 = u_xlat1.x;
    u_xlat23 = (1.0f / x_377);
    let x_379 : f32 = u_xlat23;
    let x_381 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat23 = (x_379 * x_381);
    let x_384 : f32 = u_xlat1.x;
    let x_386 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat1.x = (x_384 * x_386);
    let x_391 : f32 = u_xlat1.x;
    u_xlat18 = min(abs(x_391), 1.0f);
    let x_396 : f32 = u_xlat1.x;
    u_xlat25 = max(abs(x_396), 1.0f);
    let x_399 : f32 = u_xlat25;
    u_xlat25 = (1.0f / x_399);
    let x_401 : f32 = u_xlat25;
    let x_402 : f32 = u_xlat18;
    u_xlat18 = (x_401 * x_402);
    let x_404 : f32 = u_xlat18;
    let x_405 : f32 = u_xlat18;
    u_xlat25 = (x_404 * x_405);
    let x_407 : f32 = u_xlat25;
    u_xlat5.x = ((x_407 * 0.0208351f) + -0.085133001f);
    let x_411 : f32 = u_xlat25;
    let x_413 : f32 = u_xlat5.x;
    u_xlat5.x = ((x_411 * x_413) + 0.180141002f);
    let x_417 : f32 = u_xlat25;
    let x_419 : f32 = u_xlat5.x;
    u_xlat5.x = ((x_417 * x_419) + -0.330299497f);
    let x_423 : f32 = u_xlat25;
    let x_425 : f32 = u_xlat5.x;
    u_xlat25 = ((x_423 * x_425) + 0.999866009f);
    let x_428 : f32 = u_xlat25;
    let x_429 : f32 = u_xlat18;
    u_xlat5.x = (x_428 * x_429);
    let x_434 : f32 = u_xlat1.x;
    u_xlatb12 = (1.0f < abs(x_434));
    let x_438 : f32 = u_xlat5.x;
    u_xlat5.x = ((x_438 * -2.0f) + 1.570796371f);
    let x_442 : bool = u_xlatb12;
    if (x_442) {
      let x_447 : f32 = u_xlat5.x;
      x_443 = x_447;
    } else {
      x_443 = 0.0f;
    }
    let x_449 : f32 = x_443;
    u_xlat5.x = x_449;
    let x_451 : f32 = u_xlat18;
    let x_452 : f32 = u_xlat25;
    let x_455 : f32 = u_xlat5.x;
    u_xlat18 = ((x_451 * x_452) + x_455);
    let x_458 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_458, 1.0f);
    let x_462 : f32 = u_xlat1.x;
    let x_464 : f32 = u_xlat1.x;
    u_xlatb1.x = (x_462 < -(x_464));
    let x_469 : bool = u_xlatb1.x;
    if (x_469) {
      let x_473 : f32 = u_xlat18;
      x_470 = -(x_473);
    } else {
      let x_476 : f32 = u_xlat18;
      x_470 = x_476;
    }
    let x_477 : f32 = x_470;
    u_xlat1.x = x_477;
    let x_479 : f32 = u_xlat23;
    let x_481 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_479 * x_481) + -1.0f);
    let x_485 : vec4<f32> = u_xlat0;
    let x_487 : vec3<f32> = u_xlat1;
    let x_490 : vec4<f32> = u_xlat3;
    let x_492 : vec2<f32> = ((vec2<f32>(x_485.x, x_485.y) * vec2<f32>(x_487.x, x_487.x)) + vec2<f32>(x_490.x, x_490.y));
    let x_493 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_492.x, x_492.y, x_493.z, x_493.w);
  }
  let x_498 : vec4<f32> = u_xlat4;
  let x_501 : f32 = x_25.x_GlobalMipBias.x;
  let x_502 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_498.x, x_498.y), x_501);
  u_xlat2.y = x_502.y;
  let x_505 : vec4<f32> = u_xlat0;
  let x_507 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(vec2<f32>(x_505.z, x_505.w), vec2<f32>(x_507.z, x_507.w));
  let x_512 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_512);
  let x_515 : bool = u_xlatb8;
  if (x_515) {
    let x_518 : vec4<f32> = u_xlat0;
    let x_521 : vec4<f32> = x_25.x_Distortion_Params2;
    let x_523 : vec2<f32> = (vec2<f32>(x_518.x, x_518.x) * vec2<f32>(x_521.x, x_521.y));
    let x_524 : vec3<f32> = u_xlat1;
    u_xlat1 = vec3<f32>(x_523.x, x_523.y, x_524.z);
    let x_527 : f32 = u_xlat1.x;
    u_xlat3.x = cos(x_527);
    let x_531 : f32 = u_xlat1.x;
    u_xlat1.x = sin(x_531);
    let x_536 : f32 = u_xlat1.x;
    let x_538 : f32 = u_xlat3.x;
    u_xlat7.x = (x_536 / x_538);
    let x_542 : f32 = u_xlat1.y;
    u_xlat1.x = (1.0f / x_542);
    let x_546 : f32 = u_xlat7.x;
    let x_548 : f32 = u_xlat1.x;
    u_xlat7.x = ((x_546 * x_548) + -1.0f);
    let x_552 : vec4<f32> = u_xlat0;
    let x_554 : vec3<f32> = u_xlat7;
    let x_557 : vec4<f32> = u_xlat3;
    let x_559 : vec2<f32> = ((vec2<f32>(x_552.z, x_552.w) * vec2<f32>(x_554.x, x_554.x)) + vec2<f32>(x_557.z, x_557.w));
    let x_560 : vec3<f32> = u_xlat1;
    u_xlat1 = vec3<f32>(x_559.x, x_559.y, x_560.z);
  } else {
    let x_564 : f32 = u_xlat0.x;
    u_xlat7.x = (1.0f / x_564);
    let x_568 : f32 = u_xlat7.x;
    let x_570 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat7.x = (x_568 * x_570);
    let x_574 : f32 = u_xlat0.x;
    let x_576 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat0.x = (x_574 * x_576);
    let x_580 : f32 = u_xlat0.x;
    u_xlat23 = min(abs(x_580), 1.0f);
    let x_584 : f32 = u_xlat0.x;
    u_xlat3.x = max(abs(x_584), 1.0f);
    let x_589 : f32 = u_xlat3.x;
    u_xlat3.x = (1.0f / x_589);
    let x_592 : f32 = u_xlat23;
    let x_594 : f32 = u_xlat3.x;
    u_xlat23 = (x_592 * x_594);
    let x_596 : f32 = u_xlat23;
    let x_597 : f32 = u_xlat23;
    u_xlat3.x = (x_596 * x_597);
    let x_602 : f32 = u_xlat3.x;
    u_xlat10 = ((x_602 * 0.0208351f) + -0.085133001f);
    let x_606 : f32 = u_xlat3.x;
    let x_607 : f32 = u_xlat10;
    u_xlat10 = ((x_606 * x_607) + 0.180141002f);
    let x_611 : f32 = u_xlat3.x;
    let x_612 : f32 = u_xlat10;
    u_xlat10 = ((x_611 * x_612) + -0.330299497f);
    let x_616 : f32 = u_xlat3.x;
    let x_617 : f32 = u_xlat10;
    u_xlat3.x = ((x_616 * x_617) + 0.999866009f);
    let x_621 : f32 = u_xlat23;
    let x_623 : f32 = u_xlat3.x;
    u_xlat10 = (x_621 * x_623);
    let x_627 : f32 = u_xlat0.x;
    u_xlatb4 = (1.0f < abs(x_627));
    let x_630 : f32 = u_xlat10;
    u_xlat10 = ((x_630 * -2.0f) + 1.570796371f);
    let x_633 : bool = u_xlatb4;
    let x_634 : f32 = u_xlat10;
    u_xlat10 = select(0.0f, x_634, x_633);
    let x_636 : f32 = u_xlat23;
    let x_638 : f32 = u_xlat3.x;
    let x_640 : f32 = u_xlat10;
    u_xlat23 = ((x_636 * x_638) + x_640);
    let x_643 : f32 = u_xlat0.x;
    u_xlat0.x = min(x_643, 1.0f);
    let x_648 : f32 = u_xlat0.x;
    let x_650 : f32 = u_xlat0.x;
    u_xlatb0 = (x_648 < -(x_650));
    let x_653 : bool = u_xlatb0;
    if (x_653) {
      let x_657 : f32 = u_xlat23;
      x_654 = -(x_657);
    } else {
      let x_660 : f32 = u_xlat23;
      x_654 = x_660;
    }
    let x_661 : f32 = x_654;
    u_xlat0.x = x_661;
    let x_664 : f32 = u_xlat7.x;
    let x_666 : f32 = u_xlat0.x;
    u_xlat0.x = ((x_664 * x_666) + -1.0f);
    let x_670 : vec4<f32> = u_xlat0;
    let x_672 : vec4<f32> = u_xlat0;
    let x_675 : vec4<f32> = u_xlat3;
    let x_677 : vec2<f32> = ((vec2<f32>(x_670.z, x_670.w) * vec2<f32>(x_672.x, x_672.x)) + vec2<f32>(x_675.z, x_675.w));
    let x_678 : vec3<f32> = u_xlat1;
    u_xlat1 = vec3<f32>(x_677.x, x_677.y, x_678.z);
  }
  let x_683 : vec3<f32> = u_xlat1;
  let x_686 : f32 = x_25.x_GlobalMipBias.x;
  let x_687 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_683.x, x_683.y), x_686);
  u_xlat2.z = x_687.z;
  let x_691 : vec2<f32> = u_xlat15;
  let x_694 : vec4<f32> = x_25.x_Bloom_Texture_TexelSize;
  let x_697 : vec2<f32> = ((x_691 * vec2<f32>(x_694.z, x_694.w)) + vec2<f32>(0.5f, 0.5f));
  let x_698 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_697.x, x_697.y, x_698.z, x_698.w);
  let x_700 : vec4<f32> = u_xlat0;
  u_xlat14 = floor(vec2<f32>(x_700.x, x_700.y));
  let x_703 : vec4<f32> = u_xlat0;
  let x_705 : vec2<f32> = fract(vec2<f32>(x_703.x, x_703.y));
  let x_706 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_705.x, x_705.y, x_706.z, x_706.w);
  let x_708 : vec4<f32> = u_xlat0;
  u_xlat3 = ((-(vec4<f32>(x_708.x, x_708.y, x_708.x, x_708.y)) * vec4<f32>(0.5f, 0.5f, 0.166666672f, 0.166666672f)) + vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_715 : vec4<f32> = u_xlat0;
  let x_717 : vec4<f32> = u_xlat3;
  u_xlat3 = ((vec4<f32>(x_715.x, x_715.y, x_715.x, x_715.y) * x_717) + vec4<f32>(0.5f, 0.5f, -0.5f, -0.5f));
  let x_721 : vec4<f32> = u_xlat0;
  let x_725 : vec2<f32> = ((vec2<f32>(x_721.x, x_721.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(-1.0f, -1.0f));
  let x_726 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_725.x, x_725.y, x_726.z);
  let x_728 : vec4<f32> = u_xlat0;
  let x_730 : vec4<f32> = u_xlat0;
  let x_732 : vec2<f32> = (vec2<f32>(x_728.x, x_728.y) * vec2<f32>(x_730.x, x_730.y));
  let x_733 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_732.x, x_732.y, x_733.z, x_733.w);
  let x_735 : vec4<f32> = u_xlat4;
  let x_737 : vec3<f32> = u_xlat1;
  let x_742 : vec2<f32> = ((vec2<f32>(x_735.x, x_735.y) * vec2<f32>(x_737.x, x_737.y)) + vec2<f32>(0.666666687f, 0.666666687f));
  let x_743 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_742.x, x_742.y, x_743.z);
  let x_745 : vec4<f32> = u_xlat0;
  let x_747 : vec4<f32> = u_xlat3;
  u_xlat3 = ((vec4<f32>(x_745.x, x_745.y, x_745.x, x_745.y) * x_747) + vec4<f32>(0.166666672f, 0.166666672f, 0.166666672f, 0.166666672f));
  let x_751 : vec3<f32> = u_xlat1;
  let x_755 : vec2<f32> = (-(vec2<f32>(x_751.x, x_751.y)) + vec2<f32>(1.0f, 1.0f));
  let x_756 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_755.x, x_755.y, x_756.z, x_756.w);
  let x_758 : vec4<f32> = u_xlat3;
  let x_761 : vec4<f32> = u_xlat0;
  let x_763 : vec2<f32> = (-(vec2<f32>(x_758.x, x_758.y)) + vec2<f32>(x_761.x, x_761.y));
  let x_764 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_763.x, x_763.y, x_764.z, x_764.w);
  let x_766 : vec4<f32> = u_xlat3;
  let x_769 : vec4<f32> = u_xlat0;
  let x_771 : vec2<f32> = (-(vec2<f32>(x_766.z, x_766.w)) + vec2<f32>(x_769.x, x_769.y));
  let x_772 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_771.x, x_771.y, x_772.z, x_772.w);
  let x_775 : vec3<f32> = u_xlat1;
  let x_777 : vec4<f32> = u_xlat3;
  u_xlat17 = (vec2<f32>(x_775.x, x_775.y) + vec2<f32>(x_777.z, x_777.w));
  let x_780 : vec4<f32> = u_xlat0;
  let x_782 : vec4<f32> = u_xlat3;
  let x_784 : vec2<f32> = (vec2<f32>(x_780.x, x_780.y) + vec2<f32>(x_782.x, x_782.y));
  let x_785 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_784.x, x_784.y, x_785.z, x_785.w);
  let x_787 : vec2<f32> = u_xlat17;
  let x_791 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_787.x, x_787.y));
  let x_792 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_791.x, x_791.y, x_792.z, x_792.w);
  let x_794 : vec3<f32> = u_xlat1;
  let x_796 : vec4<f32> = u_xlat4;
  let x_799 : vec2<f32> = ((vec2<f32>(x_794.x, x_794.y) * vec2<f32>(x_796.x, x_796.y)) + vec2<f32>(-1.0f, -1.0f));
  let x_800 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_800.x, x_800.y, x_799.x, x_799.y);
  let x_802 : vec4<f32> = u_xlat3;
  let x_803 : vec2<f32> = vec2<f32>(x_802.x, x_802.y);
  let x_807 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_803.x, x_803.y));
  let x_808 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_807.x, x_807.y, x_808.z);
  let x_810 : vec4<f32> = u_xlat0;
  let x_812 : vec3<f32> = u_xlat1;
  let x_815 : vec2<f32> = ((vec2<f32>(x_810.x, x_810.y) * vec2<f32>(x_812.x, x_812.y)) + vec2<f32>(1.0f, 1.0f));
  let x_816 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_815.x, x_815.y, x_816.z, x_816.w);
  let x_818 : vec2<f32> = u_xlat14;
  let x_820 : vec4<f32> = u_xlat4;
  u_xlat5 = (vec4<f32>(x_818.x, x_818.y, x_818.x, x_818.y) + vec4<f32>(x_820.z, x_820.w, x_820.x, x_820.w));
  let x_823 : vec4<f32> = u_xlat5;
  u_xlat5 = (x_823 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_825 : vec4<f32> = u_xlat5;
  let x_827 : vec4<f32> = x_25.x_Bloom_Texture_TexelSize;
  u_xlat5 = (x_825 * vec4<f32>(x_827.x, x_827.y, x_827.x, x_827.y));
  let x_830 : vec4<f32> = u_xlat5;
  u_xlat5 = min(x_830, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_838 : vec4<f32> = u_xlat5;
  let x_840 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_838.x, x_838.y), 0.0f);
  u_xlat6 = x_840;
  let x_844 : vec4<f32> = u_xlat5;
  let x_846 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_844.z, x_844.w), 0.0f);
  u_xlat5 = x_846;
  let x_847 : vec4<f32> = u_xlat3;
  let x_849 : vec4<f32> = u_xlat5;
  u_xlat5 = (vec4<f32>(x_847.x, x_847.x, x_847.x, x_847.x) * x_849);
  let x_851 : vec2<f32> = u_xlat17;
  let x_853 : vec4<f32> = u_xlat6;
  let x_855 : vec4<f32> = u_xlat5;
  u_xlat5 = ((vec4<f32>(x_851.x, x_851.x, x_851.x, x_851.x) * x_853) + x_855);
  let x_857 : vec2<f32> = u_xlat14;
  let x_859 : vec4<f32> = u_xlat4;
  u_xlat0 = (vec4<f32>(x_857.x, x_857.y, x_857.x, x_857.y) + vec4<f32>(x_859.z, x_859.y, x_859.x, x_859.y));
  let x_862 : vec4<f32> = u_xlat0;
  u_xlat0 = (x_862 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_864 : vec4<f32> = u_xlat0;
  let x_866 : vec4<f32> = x_25.x_Bloom_Texture_TexelSize;
  u_xlat0 = (x_864 * vec4<f32>(x_866.x, x_866.y, x_866.x, x_866.y));
  let x_869 : vec4<f32> = u_xlat0;
  u_xlat0 = min(x_869, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_874 : vec4<f32> = u_xlat0;
  let x_876 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_874.x, x_874.y), 0.0f);
  u_xlat4 = x_876;
  let x_880 : vec4<f32> = u_xlat0;
  let x_882 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_880.z, x_880.w), 0.0f);
  u_xlat0 = x_882;
  let x_883 : vec4<f32> = u_xlat0;
  let x_884 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_883 * vec4<f32>(x_884.x, x_884.x, x_884.x, x_884.x));
  let x_887 : vec2<f32> = u_xlat17;
  let x_889 : vec4<f32> = u_xlat4;
  let x_891 : vec4<f32> = u_xlat0;
  u_xlat0 = ((vec4<f32>(x_887.x, x_887.x, x_887.x, x_887.x) * x_889) + x_891);
  let x_893 : vec4<f32> = u_xlat0;
  let x_894 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_893 * vec4<f32>(x_894.y, x_894.y, x_894.y, x_894.y));
  let x_897 : vec2<f32> = u_xlat17;
  let x_899 : vec4<f32> = u_xlat5;
  let x_901 : vec4<f32> = u_xlat0;
  u_xlat0 = ((vec4<f32>(x_897.y, x_897.y, x_897.y, x_897.y) * x_899) + x_901);
  let x_905 : f32 = x_25.x_Bloom_RGBM;
  u_xlatb1.x = (0.0f < x_905);
  let x_909 : bool = u_xlatb1.x;
  if (x_909) {
    let x_912 : vec4<f32> = u_xlat0;
    let x_914 : vec4<f32> = u_xlat0;
    let x_916 : vec3<f32> = (vec3<f32>(x_912.w, x_912.w, x_912.w) * vec3<f32>(x_914.x, x_914.y, x_914.z));
    let x_917 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_916.x, x_916.y, x_916.z, x_917.w);
    let x_919 : vec4<f32> = u_xlat3;
    let x_923 : vec3<f32> = (vec3<f32>(x_919.x, x_919.y, x_919.z) * vec3<f32>(8.0f, 8.0f, 8.0f));
    let x_924 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_923.x, x_923.y, x_923.z, x_924.w);
  }
  let x_926 : vec4<f32> = u_xlat0;
  let x_930 : vec4<f32> = x_25.x_Bloom_Params;
  let x_932 : vec3<f32> = (vec3<f32>(x_926.x, x_926.y, x_926.z) * vec3<f32>(x_930.x, x_930.x, x_930.x));
  let x_933 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_932.x, x_932.y, x_932.z, x_933.w);
  let x_935 : vec4<f32> = u_xlat0;
  let x_938 : vec4<f32> = x_25.x_Bloom_Params;
  let x_941 : vec4<f32> = u_xlat2;
  let x_943 : vec3<f32> = ((vec3<f32>(x_935.x, x_935.y, x_935.z) * vec3<f32>(x_938.y, x_938.z, x_938.w)) + vec3<f32>(x_941.x, x_941.y, x_941.z));
  let x_944 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_943.x, x_943.y, x_943.z, x_944.w);
  let x_949 : f32 = x_25.x_Vignette_Params2.z;
  u_xlatb21 = (0.0f < x_949);
  let x_951 : bool = u_xlatb21;
  if (x_951) {
    let x_954 : vec2<f32> = u_xlat15;
    let x_956 : vec4<f32> = x_25.x_Vignette_Params2;
    let x_959 : vec2<f32> = (x_954 + -(vec2<f32>(x_956.x, x_956.y)));
    let x_960 : vec3<f32> = u_xlat1;
    u_xlat1 = vec3<f32>(x_959.x, x_959.y, x_960.z);
    let x_962 : vec3<f32> = u_xlat1;
    let x_966 : vec4<f32> = x_25.x_Vignette_Params2;
    let x_968 : vec2<f32> = (abs(vec2<f32>(x_962.x, x_962.y)) * vec2<f32>(x_966.z, x_966.z));
    let x_969 : vec3<f32> = u_xlat1;
    u_xlat1 = vec3<f32>(x_969.x, x_968.x, x_968.y);
    let x_972 : f32 = u_xlat1.y;
    let x_975 : f32 = x_25.x_Vignette_Params1.w;
    u_xlat1.x = (x_972 * x_975);
    let x_979 : vec3<f32> = u_xlat1;
    let x_981 : vec3<f32> = u_xlat1;
    u_xlat21 = dot(vec2<f32>(x_979.x, x_979.z), vec2<f32>(x_981.x, x_981.z));
    let x_984 : f32 = u_xlat21;
    u_xlat21 = (-(x_984) + 1.0f);
    let x_987 : f32 = u_xlat21;
    u_xlat21 = max(x_987, 0.0f);
    let x_989 : f32 = u_xlat21;
    u_xlat21 = log2(x_989);
    let x_991 : f32 = u_xlat21;
    let x_993 : f32 = x_25.x_Vignette_Params2.w;
    u_xlat21 = (x_991 * x_993);
    let x_995 : f32 = u_xlat21;
    u_xlat21 = exp2(x_995);
    let x_998 : vec4<f32> = x_25.x_Vignette_Params1;
    u_xlat1 = (-(vec3<f32>(x_998.x, x_998.y, x_998.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_1003 : f32 = u_xlat21;
    let x_1005 : vec3<f32> = u_xlat1;
    let x_1008 : vec4<f32> = x_25.x_Vignette_Params1;
    u_xlat1 = ((vec3<f32>(x_1003, x_1003, x_1003) * x_1005) + vec3<f32>(x_1008.x, x_1008.y, x_1008.z));
    let x_1011 : vec4<f32> = u_xlat0;
    let x_1013 : vec3<f32> = u_xlat1;
    let x_1014 : vec3<f32> = (vec3<f32>(x_1011.x, x_1011.y, x_1011.z) * x_1013);
    let x_1015 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1014.x, x_1014.y, x_1014.z, x_1015.w);
  }
  let x_1017 : vec4<f32> = u_xlat0;
  let x_1021 : vec4<f32> = x_25.x_Lut_Params;
  let x_1023 : vec3<f32> = (vec3<f32>(x_1017.x, x_1017.y, x_1017.z) * vec3<f32>(x_1021.w, x_1021.w, x_1021.w));
  let x_1024 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1023.x, x_1023.y, x_1023.z, x_1024.w);
  let x_1026 : vec4<f32> = u_xlat0;
  let x_1030 : vec3<f32> = clamp(vec3<f32>(x_1026.x, x_1026.y, x_1026.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1031 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1030.x, x_1030.y, x_1030.z, x_1031.w);
  let x_1035 : f32 = x_25.x_UserLut_Params.w;
  u_xlatb21 = (0.0f < x_1035);
  let x_1037 : bool = u_xlatb21;
  if (x_1037) {
    let x_1040 : vec4<f32> = u_xlat0;
    u_xlat1 = (vec3<f32>(x_1040.x, x_1040.y, x_1040.z) * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
    let x_1045 : vec4<f32> = u_xlat0;
    let x_1047 : vec3<f32> = log2(vec3<f32>(x_1045.x, x_1045.y, x_1045.z));
    let x_1048 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1047.x, x_1047.y, x_1047.z, x_1048.w);
    let x_1050 : vec4<f32> = u_xlat2;
    let x_1054 : vec3<f32> = (vec3<f32>(x_1050.x, x_1050.y, x_1050.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
    let x_1055 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1054.x, x_1054.y, x_1054.z, x_1055.w);
    let x_1057 : vec4<f32> = u_xlat2;
    let x_1059 : vec3<f32> = exp2(vec3<f32>(x_1057.x, x_1057.y, x_1057.z));
    let x_1060 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1059.x, x_1059.y, x_1059.z, x_1060.w);
    let x_1062 : vec4<f32> = u_xlat2;
    let x_1069 : vec3<f32> = ((vec3<f32>(x_1062.x, x_1062.y, x_1062.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
    let x_1070 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1069.x, x_1069.y, x_1069.z, x_1070.w);
    let x_1074 : vec4<f32> = u_xlat0;
    let x_1077 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_1074.x, x_1074.y, x_1074.z, x_1074.x));
    u_xlatb3 = vec3<bool>(x_1077.x, x_1077.y, x_1077.z);
    let x_1080 : vec3<f32> = u_xlat1;
    hlslcc_movcTemp = x_1080;
    let x_1082 : bool = u_xlatb3.x;
    if (x_1082) {
      let x_1087 : f32 = u_xlat1.x;
      x_1083 = x_1087;
    } else {
      let x_1090 : f32 = u_xlat2.x;
      x_1083 = x_1090;
    }
    let x_1091 : f32 = x_1083;
    hlslcc_movcTemp.x = x_1091;
    let x_1094 : bool = u_xlatb3.y;
    if (x_1094) {
      let x_1099 : f32 = u_xlat1.y;
      x_1095 = x_1099;
    } else {
      let x_1102 : f32 = u_xlat2.y;
      x_1095 = x_1102;
    }
    let x_1103 : f32 = x_1095;
    hlslcc_movcTemp.y = x_1103;
    let x_1106 : bool = u_xlatb3.z;
    if (x_1106) {
      let x_1111 : f32 = u_xlat1.z;
      x_1107 = x_1111;
    } else {
      let x_1114 : f32 = u_xlat2.z;
      x_1107 = x_1114;
    }
    let x_1115 : f32 = x_1107;
    hlslcc_movcTemp.z = x_1115;
    let x_1117 : vec3<f32> = hlslcc_movcTemp;
    u_xlat1 = x_1117;
    let x_1118 : vec3<f32> = u_xlat1;
    let x_1121 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1123 : vec3<f32> = (vec3<f32>(x_1118.z, x_1118.x, x_1118.y) * vec3<f32>(x_1121.z, x_1121.z, x_1121.z));
    let x_1124 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1123.x, x_1123.y, x_1123.z, x_1124.w);
    let x_1127 : f32 = u_xlat2.x;
    u_xlat21 = floor(x_1127);
    let x_1130 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1132 : vec2<f32> = (vec2<f32>(x_1130.x, x_1130.y) * vec2<f32>(0.5f, 0.5f));
    let x_1133 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1132.x, x_1133.y, x_1133.z, x_1132.y);
    let x_1135 : vec4<f32> = u_xlat2;
    let x_1138 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1141 : vec4<f32> = u_xlat2;
    let x_1143 : vec2<f32> = ((vec2<f32>(x_1135.y, x_1135.z) * vec2<f32>(x_1138.x, x_1138.y)) + vec2<f32>(x_1141.x, x_1141.w));
    let x_1144 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1144.x, x_1143.x, x_1143.y, x_1144.w);
    let x_1146 : f32 = u_xlat21;
    let x_1148 : f32 = x_25.x_UserLut_Params.y;
    let x_1151 : f32 = u_xlat2.y;
    u_xlat2.x = ((x_1146 * x_1148) + x_1151);
    let x_1158 : vec4<f32> = u_xlat2;
    let x_1160 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1158.x, x_1158.z), 0.0f);
    let x_1161 : vec3<f32> = vec3<f32>(x_1160.x, x_1160.y, x_1160.z);
    let x_1162 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1161.x, x_1161.y, x_1161.z, x_1162.w);
    let x_1165 : f32 = x_25.x_UserLut_Params.y;
    u_xlat4.x = x_1165;
    u_xlat4.y = 0.0f;
    let x_1168 : vec4<f32> = u_xlat2;
    let x_1170 : vec4<f32> = u_xlat4;
    let x_1172 : vec2<f32> = (vec2<f32>(x_1168.x, x_1168.z) + vec2<f32>(x_1170.x, x_1170.y));
    let x_1173 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1172.x, x_1172.y, x_1173.z, x_1173.w);
    let x_1178 : vec4<f32> = u_xlat2;
    let x_1180 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1178.x, x_1178.y), 0.0f);
    let x_1181 : vec3<f32> = vec3<f32>(x_1180.x, x_1180.y, x_1180.z);
    let x_1182 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1181.x, x_1181.y, x_1181.z, x_1182.w);
    let x_1185 : f32 = u_xlat1.z;
    let x_1187 : f32 = x_25.x_UserLut_Params.z;
    let x_1189 : f32 = u_xlat21;
    u_xlat21 = ((x_1185 * x_1187) + -(x_1189));
    let x_1192 : vec4<f32> = u_xlat3;
    let x_1195 : vec4<f32> = u_xlat2;
    let x_1197 : vec3<f32> = (-(vec3<f32>(x_1192.x, x_1192.y, x_1192.z)) + vec3<f32>(x_1195.x, x_1195.y, x_1195.z));
    let x_1198 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1197.x, x_1197.y, x_1197.z, x_1198.w);
    let x_1200 : f32 = u_xlat21;
    let x_1202 : vec4<f32> = u_xlat2;
    let x_1205 : vec4<f32> = u_xlat3;
    let x_1207 : vec3<f32> = ((vec3<f32>(x_1200, x_1200, x_1200) * vec3<f32>(x_1202.x, x_1202.y, x_1202.z)) + vec3<f32>(x_1205.x, x_1205.y, x_1205.z));
    let x_1208 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1207.x, x_1207.y, x_1207.z, x_1208.w);
    let x_1210 : vec3<f32> = u_xlat1;
    let x_1212 : vec4<f32> = u_xlat2;
    let x_1214 : vec3<f32> = (-(x_1210) + vec3<f32>(x_1212.x, x_1212.y, x_1212.z));
    let x_1215 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1214.x, x_1214.y, x_1214.z, x_1215.w);
    let x_1218 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1220 : vec4<f32> = u_xlat2;
    let x_1223 : vec3<f32> = u_xlat1;
    u_xlat1 = ((vec3<f32>(x_1218.w, x_1218.w, x_1218.w) * vec3<f32>(x_1220.x, x_1220.y, x_1220.z)) + x_1223);
    let x_1225 : vec3<f32> = u_xlat1;
    let x_1228 : vec3<f32> = (x_1225 * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
    let x_1229 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1228.x, x_1228.y, x_1228.z, x_1229.w);
    let x_1231 : vec3<f32> = u_xlat1;
    let x_1234 : vec3<f32> = (x_1231 + vec3<f32>(0.055f, 0.055f, 0.055f));
    let x_1235 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1234.x, x_1234.y, x_1234.z, x_1235.w);
    let x_1237 : vec4<f32> = u_xlat3;
    let x_1241 : vec3<f32> = (vec3<f32>(x_1237.x, x_1237.y, x_1237.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
    let x_1242 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1241.x, x_1241.y, x_1241.z, x_1242.w);
    let x_1244 : vec4<f32> = u_xlat3;
    let x_1247 : vec3<f32> = log2(abs(vec3<f32>(x_1244.x, x_1244.y, x_1244.z)));
    let x_1248 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1247.x, x_1247.y, x_1247.z, x_1248.w);
    let x_1250 : vec4<f32> = u_xlat3;
    let x_1254 : vec3<f32> = (vec3<f32>(x_1250.x, x_1250.y, x_1250.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
    let x_1255 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1254.x, x_1254.y, x_1254.z, x_1255.w);
    let x_1257 : vec4<f32> = u_xlat3;
    let x_1259 : vec3<f32> = exp2(vec3<f32>(x_1257.x, x_1257.y, x_1257.z));
    let x_1260 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1259.x, x_1259.y, x_1259.z, x_1260.w);
    let x_1264 : vec3<f32> = u_xlat1;
    let x_1266 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_1264.x, x_1264.y, x_1264.z, x_1264.x));
    u_xlatb1 = vec3<bool>(x_1266.x, x_1266.y, x_1266.z);
    let x_1269 : bool = u_xlatb1.x;
    if (x_1269) {
      let x_1274 : f32 = u_xlat2.x;
      x_1270 = x_1274;
    } else {
      let x_1277 : f32 = u_xlat3.x;
      x_1270 = x_1277;
    }
    let x_1278 : f32 = x_1270;
    u_xlat0.x = x_1278;
    let x_1281 : bool = u_xlatb1.y;
    if (x_1281) {
      let x_1286 : f32 = u_xlat2.y;
      x_1282 = x_1286;
    } else {
      let x_1289 : f32 = u_xlat3.y;
      x_1282 = x_1289;
    }
    let x_1290 : f32 = x_1282;
    u_xlat0.y = x_1290;
    let x_1293 : bool = u_xlatb1.z;
    if (x_1293) {
      let x_1298 : f32 = u_xlat2.z;
      x_1294 = x_1298;
    } else {
      let x_1301 : f32 = u_xlat3.z;
      x_1294 = x_1301;
    }
    let x_1302 : f32 = x_1294;
    u_xlat0.z = x_1302;
  }
  let x_1304 : vec4<f32> = u_xlat0;
  let x_1307 : vec4<f32> = x_25.x_Lut_Params;
  let x_1309 : vec3<f32> = (vec3<f32>(x_1304.x, x_1304.y, x_1304.z) * vec3<f32>(x_1307.z, x_1307.z, x_1307.z));
  let x_1310 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1309.x, x_1309.y, x_1310.z, x_1309.z);
  let x_1313 : f32 = u_xlat0.w;
  u_xlat21 = floor(x_1313);
  let x_1316 : vec4<f32> = x_25.x_Lut_Params;
  let x_1318 : vec2<f32> = (vec2<f32>(x_1316.x, x_1316.y) * vec2<f32>(0.5f, 0.5f));
  let x_1319 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_1318.x, x_1318.y, x_1319.z);
  let x_1321 : vec4<f32> = u_xlat0;
  let x_1324 : vec4<f32> = x_25.x_Lut_Params;
  let x_1327 : vec3<f32> = u_xlat1;
  let x_1329 : vec2<f32> = ((vec2<f32>(x_1321.x, x_1321.y) * vec2<f32>(x_1324.x, x_1324.y)) + vec2<f32>(x_1327.x, x_1327.y));
  let x_1330 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_1330.x, x_1329.x, x_1329.y);
  let x_1332 : f32 = u_xlat21;
  let x_1334 : f32 = x_25.x_Lut_Params.y;
  let x_1337 : f32 = u_xlat1.y;
  u_xlat1.x = ((x_1332 * x_1334) + x_1337);
  let x_1344 : vec3<f32> = u_xlat1;
  let x_1346 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1344.x, x_1344.z), 0.0f);
  let x_1347 : vec3<f32> = vec3<f32>(x_1346.x, x_1346.y, x_1346.z);
  let x_1348 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1347.x, x_1347.y, x_1347.z, x_1348.w);
  let x_1351 : f32 = x_25.x_Lut_Params.y;
  u_xlat0.x = x_1351;
  u_xlat0.y = 0.0f;
  let x_1354 : vec4<f32> = u_xlat0;
  let x_1356 : vec3<f32> = u_xlat1;
  let x_1358 : vec2<f32> = (vec2<f32>(x_1354.x, x_1354.y) + vec2<f32>(x_1356.x, x_1356.z));
  let x_1359 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1358.x, x_1358.y, x_1359.z, x_1359.w);
  let x_1364 : vec4<f32> = u_xlat0;
  let x_1366 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1364.x, x_1364.y), 0.0f);
  u_xlat1 = vec3<f32>(x_1366.x, x_1366.y, x_1366.z);
  let x_1369 : f32 = u_xlat0.z;
  let x_1371 : f32 = x_25.x_Lut_Params.z;
  let x_1373 : f32 = u_xlat21;
  u_xlat0.x = ((x_1369 * x_1371) + -(x_1373));
  let x_1377 : vec4<f32> = u_xlat2;
  let x_1380 : vec3<f32> = u_xlat1;
  u_xlat7 = (-(vec3<f32>(x_1377.x, x_1377.y, x_1377.z)) + x_1380);
  let x_1382 : vec4<f32> = u_xlat0;
  let x_1384 : vec3<f32> = u_xlat7;
  let x_1386 : vec4<f32> = u_xlat2;
  let x_1388 : vec3<f32> = ((vec3<f32>(x_1382.x, x_1382.x, x_1382.x) * x_1384) + vec3<f32>(x_1386.x, x_1386.y, x_1386.z));
  let x_1389 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1388.x, x_1388.y, x_1388.z, x_1389.w);
  let x_1391 : vec2<f32> = vs_TEXCOORD0;
  let x_1394 : vec4<f32> = x_25.x_Grain_TilingParams;
  let x_1398 : vec4<f32> = x_25.x_Grain_TilingParams;
  let x_1400 : vec2<f32> = ((x_1391 * vec2<f32>(x_1394.x, x_1394.y)) + vec2<f32>(x_1398.z, x_1398.w));
  let x_1401 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_1400.x, x_1400.y, x_1401.z);
  let x_1408 : vec3<f32> = u_xlat1;
  let x_1411 : f32 = x_25.x_GlobalMipBias.x;
  let x_1412 : vec4<f32> = textureSampleBias(x_Grain_Texture, sampler_LinearRepeat, vec2<f32>(x_1408.x, x_1408.y), x_1411);
  u_xlat21 = x_1412.w;
  let x_1414 : f32 = u_xlat21;
  u_xlat21 = (x_1414 + -0.5f);
  let x_1416 : f32 = u_xlat21;
  let x_1417 : f32 = u_xlat21;
  u_xlat21 = (x_1416 + x_1417);
  let x_1419 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(x_1419.x, x_1419.y, x_1419.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_1428 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_1428);
  let x_1433 : f32 = x_25.x_Grain_Params.y;
  let x_1435 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1433 * -(x_1435)) + 1.0f);
  let x_1441 : f32 = u_xlat21;
  let x_1443 : vec4<f32> = u_xlat0;
  u_xlat8 = (vec3<f32>(x_1441, x_1441, x_1441) * vec3<f32>(x_1443.x, x_1443.y, x_1443.z));
  let x_1446 : vec3<f32> = u_xlat8;
  let x_1449 : vec2<f32> = x_25.x_Grain_Params;
  u_xlat8 = (x_1446 * vec3<f32>(x_1449.x, x_1449.x, x_1449.x));
  let x_1452 : vec3<f32> = u_xlat8;
  let x_1453 : vec3<f32> = u_xlat1;
  let x_1456 : vec4<f32> = u_xlat0;
  let x_1458 : vec3<f32> = ((x_1452 * vec3<f32>(x_1453.x, x_1453.x, x_1453.x)) + vec3<f32>(x_1456.x, x_1456.y, x_1456.z));
  let x_1459 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1458.x, x_1458.y, x_1458.z, x_1459.w);
  let x_1463 : vec4<f32> = u_xlat0;
  let x_1465 : vec3<f32> = sqrt(vec3<f32>(x_1463.x, x_1463.y, x_1463.z));
  let x_1466 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1465.x, x_1465.y, x_1465.z, x_1466.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

