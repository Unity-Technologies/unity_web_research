type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_277 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_379 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3917 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec4<f32>;
  var x_199 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1877 : f32;
  var u_xlatu5 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2002 : f32;
  var u_xlatb47 : bool;
  var x_2056 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat72 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3531 : f32;
  var u_xlat24 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati69 : i32;
  var u_xlat66 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_167) + x_172);
  let x_175 : vec3<f32> = u_xlat4;
  let x_176 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_175, x_176);
  let x_178 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_178);
  let x_180 : f32 = u_xlat67;
  let x_182 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_180, x_180, x_180) * x_182);
  let x_188 : f32 = x_160.unity_MatrixV[0i].z;
  u_xlat5.x = x_188;
  let x_192 : f32 = x_160.unity_MatrixV[1i].z;
  u_xlat5.y = x_192;
  let x_196 : f32 = x_160.unity_MatrixV[2i].z;
  u_xlat5.z = x_196;
  let x_198 : bool = u_xlatb0;
  if (x_198) {
    let x_202 : vec3<f32> = u_xlat4;
    x_199 = x_202;
  } else {
    let x_204 : vec4<f32> = u_xlat5;
    x_199 = vec3<f32>(x_204.x, x_204.y, x_204.z);
  }
  let x_206 : vec3<f32> = x_199;
  u_xlat4 = x_206;
  let x_207 : vec3<f32> = u_xlat4;
  let x_211 : vec4<f32> = x_95.unity_WorldToObject[1i];
  let x_213 : vec3<f32> = (vec3<f32>(x_207.y, x_207.y, x_207.y) * vec3<f32>(x_211.x, x_211.y, x_211.z));
  let x_214 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_213.x, x_213.y, x_213.z, x_214.w);
  let x_217 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_219 : vec3<f32> = u_xlat4;
  let x_222 : vec4<f32> = u_xlat5;
  let x_224 : vec3<f32> = ((vec3<f32>(x_217.x, x_217.y, x_217.z) * vec3<f32>(x_219.x, x_219.x, x_219.x)) + vec3<f32>(x_222.x, x_222.y, x_222.z));
  let x_225 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_224.x, x_224.y, x_224.z, x_225.w);
  let x_228 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_230 : vec3<f32> = u_xlat4;
  let x_233 : vec4<f32> = u_xlat5;
  let x_235 : vec3<f32> = ((vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(x_230.z, x_230.z, x_230.z)) + vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_236 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_235.x, x_235.y, x_235.z, x_236.w);
  let x_238 : vec4<f32> = u_xlat5;
  let x_240 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(vec3<f32>(x_238.x, x_238.y, x_238.z), vec3<f32>(x_240.x, x_240.y, x_240.z));
  let x_245 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_245);
  let x_248 : vec3<f32> = u_xlat0;
  let x_250 : vec4<f32> = u_xlat5;
  let x_252 : vec3<f32> = (vec3<f32>(x_248.x, x_248.x, x_248.x) * vec3<f32>(x_250.x, x_250.y, x_250.z));
  let x_253 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_252.y, x_252.z, x_253.w);
  let x_267 : vec4<f32> = vs_INTERP3;
  let x_270 : f32 = x_160.x_GlobalMipBias.x;
  let x_271 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_267.x, x_267.y), x_270);
  u_xlat6 = x_271;
  let x_273 : vec4<f32> = u_xlat6;
  let x_279 : vec4<f32> = x_277.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_273.x, x_273.y, x_273.z) * vec3<f32>(x_279.x, x_279.y, x_279.z));
  let x_288 : vec4<f32> = vs_INTERP3;
  let x_291 : f32 = x_160.x_GlobalMipBias.x;
  let x_292 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_288.x, x_288.y), x_291);
  u_xlat8 = vec4<f32>(x_292.w, x_292.x, x_292.y, x_292.z);
  let x_295 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_295.y, x_295.z, x_295.w, x_295.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_302 : vec4<f32> = u_xlat9;
  let x_303 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_302, x_303);
  let x_307 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_307);
  let x_311 : vec3<f32> = u_xlat0;
  let x_313 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_311.x, x_311.x, x_311.x) * vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_318 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_318 * 200.0f);
  let x_323 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_323, 1.0f);
  let x_326 : vec3<f32> = u_xlat0;
  let x_328 : vec4<f32> = u_xlat6;
  let x_330 : vec3<f32> = (vec3<f32>(x_326.x, x_326.x, x_326.x) * vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_331 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_330.x, x_330.y, x_330.z, x_331.w);
  let x_333 : vec4<f32> = u_xlat3;
  let x_335 : vec3<f32> = u_xlat30;
  let x_337 : vec3<f32> = (vec3<f32>(x_333.x, x_333.y, x_333.z) * vec3<f32>(x_335.y, x_335.y, x_335.y));
  let x_338 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_337.x, x_337.y, x_337.z, x_338.w);
  let x_340 : vec3<f32> = u_xlat30;
  let x_342 : vec4<f32> = u_xlat2;
  let x_345 : vec4<f32> = u_xlat3;
  let x_347 : vec3<f32> = ((vec3<f32>(x_340.x, x_340.x, x_340.x) * vec3<f32>(x_342.x, x_342.y, x_342.z)) + vec3<f32>(x_345.x, x_345.y, x_345.z));
  let x_348 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_347.x, x_347.y, x_347.z, x_348.w);
  let x_350 : vec3<f32> = u_xlat30;
  let x_352 : vec3<f32> = u_xlat1;
  let x_354 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_350.z, x_350.z, x_350.z) * x_352) + vec3<f32>(x_354.x, x_354.y, x_354.z));
  let x_357 : vec3<f32> = u_xlat1;
  let x_358 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_357, x_358);
  let x_362 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_362, 1.17549435e-37f);
  let x_367 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_367);
  let x_370 : vec3<f32> = u_xlat0;
  let x_372 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_370.x, x_370.x, x_370.x) * x_372);
  let x_374 : vec3<f32> = vs_INTERP0;
  let x_381 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres0;
  let x_384 : vec3<f32> = (x_374 + -(vec3<f32>(x_381.x, x_381.y, x_381.z)));
  let x_385 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_384.x, x_384.y, x_384.z, x_385.w);
  let x_387 : vec3<f32> = vs_INTERP0;
  let x_389 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres1;
  let x_392 : vec3<f32> = (x_387 + -(vec3<f32>(x_389.x, x_389.y, x_389.z)));
  let x_393 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : vec3<f32> = vs_INTERP0;
  let x_397 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres2;
  let x_400 : vec3<f32> = (x_395 + -(vec3<f32>(x_397.x, x_397.y, x_397.z)));
  let x_401 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_400.x, x_400.y, x_400.z, x_401.w);
  let x_404 : vec3<f32> = vs_INTERP0;
  let x_407 : vec4<f32> = x_379.x_CascadeShadowSplitSpheres3;
  let x_410 : vec3<f32> = (x_404 + -(vec3<f32>(x_407.x, x_407.y, x_407.z)));
  let x_411 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : vec4<f32> = u_xlat2;
  let x_415 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_413.x, x_413.y, x_413.z), vec3<f32>(x_415.x, x_415.y, x_415.z));
  let x_419 : vec4<f32> = u_xlat3;
  let x_421 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_419.x, x_419.y, x_419.z), vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_425 : vec4<f32> = u_xlat9;
  let x_427 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_425.x, x_425.y, x_425.z), vec3<f32>(x_427.x, x_427.y, x_427.z));
  let x_431 : vec4<f32> = u_xlat10;
  let x_433 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_431.x, x_431.y, x_431.z), vec3<f32>(x_433.x, x_433.y, x_433.z));
  let x_440 : vec4<f32> = u_xlat2;
  let x_443 : vec4<f32> = x_379.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_440 < x_443);
  let x_446 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_446);
  let x_450 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_450);
  let x_454 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_454);
  let x_458 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_458);
  let x_462 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_462);
  let x_467 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_467);
  let x_471 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_471);
  let x_474 : vec4<f32> = u_xlat2;
  let x_476 : vec4<f32> = u_xlat3;
  let x_478 : vec3<f32> = (vec3<f32>(x_474.x, x_474.y, x_474.z) + vec3<f32>(x_476.y, x_476.z, x_476.w));
  let x_479 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_478.x, x_478.y, x_478.z, x_479.w);
  let x_481 : vec4<f32> = u_xlat2;
  let x_484 : vec3<f32> = max(vec3<f32>(x_481.x, x_481.y, x_481.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_485 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_485.x, x_484.x, x_484.y, x_484.z);
  let x_487 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_487, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_494 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_494) + 4.0f);
  let x_500 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_500);
  let x_503 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_503) << bitcast<u32>(2i));
  let x_506 : vec3<f32> = vs_INTERP0;
  let x_508 : i32 = u_xlati0;
  let x_511 : i32 = u_xlati0;
  let x_515 : vec4<f32> = x_379.x_MainLightWorldToShadow[((x_508 + 1i) / 4i)][((x_511 + 1i) % 4i)];
  let x_517 : vec3<f32> = (vec3<f32>(x_506.y, x_506.y, x_506.y) * vec3<f32>(x_515.x, x_515.y, x_515.z));
  let x_518 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_517.x, x_517.y, x_517.z, x_518.w);
  let x_520 : i32 = u_xlati0;
  let x_522 : i32 = u_xlati0;
  let x_525 : vec4<f32> = x_379.x_MainLightWorldToShadow[(x_520 / 4i)][(x_522 % 4i)];
  let x_527 : vec3<f32> = vs_INTERP0;
  let x_530 : vec4<f32> = u_xlat2;
  let x_532 : vec3<f32> = ((vec3<f32>(x_525.x, x_525.y, x_525.z) * vec3<f32>(x_527.x, x_527.x, x_527.x)) + vec3<f32>(x_530.x, x_530.y, x_530.z));
  let x_533 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_532.x, x_532.y, x_532.z, x_533.w);
  let x_535 : i32 = u_xlati0;
  let x_538 : i32 = u_xlati0;
  let x_542 : vec4<f32> = x_379.x_MainLightWorldToShadow[((x_535 + 2i) / 4i)][((x_538 + 2i) % 4i)];
  let x_544 : vec3<f32> = vs_INTERP0;
  let x_547 : vec4<f32> = u_xlat2;
  let x_549 : vec3<f32> = ((vec3<f32>(x_542.x, x_542.y, x_542.z) * vec3<f32>(x_544.z, x_544.z, x_544.z)) + vec3<f32>(x_547.x, x_547.y, x_547.z));
  let x_550 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_549.x, x_549.y, x_549.z, x_550.w);
  let x_552 : vec4<f32> = u_xlat2;
  let x_554 : i32 = u_xlati0;
  let x_557 : i32 = u_xlati0;
  let x_561 : vec4<f32> = x_379.x_MainLightWorldToShadow[((x_554 + 3i) / 4i)][((x_557 + 3i) % 4i)];
  let x_563 : vec3<f32> = (vec3<f32>(x_552.x, x_552.y, x_552.z) + vec3<f32>(x_561.x, x_561.y, x_561.z));
  let x_564 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
  let x_568 : f32 = x_379.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_568);
  let x_570 : bool = u_xlatb0;
  if (x_570) {
    let x_575 : f32 = x_379.x_MainLightShadowParams.y;
    u_xlatb67 = (x_575 == 1.0f);
    let x_577 : bool = u_xlatb67;
    if (x_577) {
      let x_580 : vec4<f32> = u_xlat2;
      let x_584 : vec4<f32> = x_379.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_580.x, x_580.y, x_580.x, x_580.y) + x_584);
      let x_587 : vec4<f32> = u_xlat3;
      let x_588 : vec2<f32> = vec2<f32>(x_587.x, x_587.y);
      let x_590 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_588.x, x_588.y, x_590);
      let x_602 : vec3<f32> = txVec0;
      let x_604 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_602.xy, x_602.z);
      u_xlat9.x = x_604;
      let x_607 : vec4<f32> = u_xlat3;
      let x_608 : vec2<f32> = vec2<f32>(x_607.z, x_607.w);
      let x_610 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_608.x, x_608.y, x_610);
      let x_617 : vec3<f32> = txVec1;
      let x_619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_617.xy, x_617.z);
      u_xlat9.y = x_619;
      let x_621 : vec4<f32> = u_xlat2;
      let x_624 : vec4<f32> = x_379.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_621.x, x_621.y, x_621.x, x_621.y) + x_624);
      let x_627 : vec4<f32> = u_xlat3;
      let x_628 : vec2<f32> = vec2<f32>(x_627.x, x_627.y);
      let x_630 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_628.x, x_628.y, x_630);
      let x_637 : vec3<f32> = txVec2;
      let x_639 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_637.xy, x_637.z);
      u_xlat9.z = x_639;
      let x_642 : vec4<f32> = u_xlat3;
      let x_643 : vec2<f32> = vec2<f32>(x_642.z, x_642.w);
      let x_645 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_643.x, x_643.y, x_645);
      let x_652 : vec3<f32> = txVec3;
      let x_654 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_652.xy, x_652.z);
      u_xlat9.w = x_654;
      let x_656 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_656, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_663 : f32 = x_379.x_MainLightShadowParams.y;
      u_xlatb68 = (x_663 == 2.0f);
      let x_665 : bool = u_xlatb68;
      if (x_665) {
        let x_668 : vec4<f32> = u_xlat2;
        let x_672 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_677 : vec2<f32> = ((vec2<f32>(x_668.x, x_668.y) * vec2<f32>(x_672.z, x_672.w)) + vec2<f32>(0.5f, 0.5f));
        let x_678 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_677.x, x_677.y, x_678.z, x_678.w);
        let x_680 : vec4<f32> = u_xlat3;
        let x_682 : vec2<f32> = floor(vec2<f32>(x_680.x, x_680.y));
        let x_683 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_682.x, x_682.y, x_683.z, x_683.w);
        let x_687 : vec4<f32> = u_xlat2;
        let x_690 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_693 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_687.x, x_687.y) * vec2<f32>(x_690.z, x_690.w)) + -(vec2<f32>(x_693.x, x_693.y)));
        let x_697 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_697.x, x_697.x, x_697.y, x_697.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_701 : vec4<f32> = u_xlat9;
        let x_703 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_701.x, x_701.x, x_701.z, x_701.z) * vec4<f32>(x_703.x, x_703.x, x_703.z, x_703.z));
        let x_706 : vec4<f32> = u_xlat10;
        let x_710 : vec2<f32> = (vec2<f32>(x_706.y, x_706.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_711 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_710.x, x_711.y, x_710.y, x_711.w);
        let x_713 : vec4<f32> = u_xlat10;
        let x_716 : vec2<f32> = u_xlat47;
        let x_718 : vec2<f32> = ((vec2<f32>(x_713.x, x_713.z) * vec2<f32>(0.5f, 0.5f)) + -(x_716));
        let x_719 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_718.x, x_718.y, x_719.z, x_719.w);
        let x_722 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_722) + vec2<f32>(1.0f, 1.0f));
        let x_727 : vec2<f32> = u_xlat47;
        let x_729 : vec2<f32> = min(x_727, vec2<f32>(0.0f, 0.0f));
        let x_730 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_729.x, x_729.y, x_730.z, x_730.w);
        let x_732 : vec4<f32> = u_xlat11;
        let x_735 : vec4<f32> = u_xlat11;
        let x_738 : vec2<f32> = u_xlat54;
        let x_739 : vec2<f32> = ((-(vec2<f32>(x_732.x, x_732.y)) * vec2<f32>(x_735.x, x_735.y)) + x_738);
        let x_740 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_739.x, x_739.y, x_740.z, x_740.w);
        let x_742 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_742, vec2<f32>(0.0f, 0.0f));
        let x_744 : vec2<f32> = u_xlat47;
        let x_746 : vec2<f32> = u_xlat47;
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_744) * x_746) + vec2<f32>(x_748.y, x_748.w));
        let x_751 : vec4<f32> = u_xlat11;
        let x_753 : vec2<f32> = (vec2<f32>(x_751.x, x_751.y) + vec2<f32>(1.0f, 1.0f));
        let x_754 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_753.x, x_753.y, x_754.z, x_754.w);
        let x_756 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_756 + vec2<f32>(1.0f, 1.0f));
        let x_759 : vec4<f32> = u_xlat10;
        let x_763 : vec2<f32> = (vec2<f32>(x_759.x, x_759.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_764 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_763.x, x_763.y, x_764.z, x_764.w);
        let x_766 : vec2<f32> = u_xlat54;
        let x_767 : vec2<f32> = (x_766 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_768 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_767.x, x_767.y, x_768.z, x_768.w);
        let x_770 : vec4<f32> = u_xlat11;
        let x_772 : vec2<f32> = (vec2<f32>(x_770.x, x_770.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_773 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_772.x, x_772.y, x_773.z, x_773.w);
        let x_776 : vec2<f32> = u_xlat47;
        let x_777 : vec2<f32> = (x_776 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_778 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_777.x, x_777.y, x_778.z, x_778.w);
        let x_780 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_780.y, x_780.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_784 : f32 = u_xlat11.x;
        u_xlat12.z = x_784;
        let x_787 : f32 = u_xlat47.x;
        u_xlat12.w = x_787;
        let x_790 : f32 = u_xlat13.x;
        u_xlat10.z = x_790;
        let x_793 : f32 = u_xlat9.x;
        u_xlat10.w = x_793;
        let x_796 : vec4<f32> = u_xlat10;
        let x_798 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_796.z, x_796.w, x_796.x, x_796.z) + vec4<f32>(x_798.z, x_798.w, x_798.x, x_798.z));
        let x_802 : f32 = u_xlat12.y;
        u_xlat11.z = x_802;
        let x_805 : f32 = u_xlat47.y;
        u_xlat11.w = x_805;
        let x_808 : f32 = u_xlat10.y;
        u_xlat13.z = x_808;
        let x_811 : f32 = u_xlat9.z;
        u_xlat13.w = x_811;
        let x_813 : vec4<f32> = u_xlat11;
        let x_815 : vec4<f32> = u_xlat13;
        let x_817 : vec3<f32> = (vec3<f32>(x_813.z, x_813.y, x_813.w) + vec3<f32>(x_815.z, x_815.y, x_815.w));
        let x_818 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_817.x, x_817.y, x_817.z, x_818.w);
        let x_820 : vec4<f32> = u_xlat10;
        let x_822 : vec4<f32> = u_xlat14;
        let x_824 : vec3<f32> = (vec3<f32>(x_820.x, x_820.z, x_820.w) / vec3<f32>(x_822.z, x_822.w, x_822.y));
        let x_825 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_824.x, x_824.y, x_824.z, x_825.w);
        let x_827 : vec4<f32> = u_xlat10;
        let x_833 : vec3<f32> = (vec3<f32>(x_827.x, x_827.y, x_827.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_834 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_833.x, x_833.y, x_833.z, x_834.w);
        let x_836 : vec4<f32> = u_xlat13;
        let x_838 : vec4<f32> = u_xlat9;
        let x_840 : vec3<f32> = (vec3<f32>(x_836.z, x_836.y, x_836.w) / vec3<f32>(x_838.x, x_838.y, x_838.z));
        let x_841 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_840.x, x_840.y, x_840.z, x_841.w);
        let x_843 : vec4<f32> = u_xlat11;
        let x_845 : vec3<f32> = (vec3<f32>(x_843.x, x_843.y, x_843.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_846 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_845.x, x_845.y, x_845.z, x_846.w);
        let x_848 : vec4<f32> = u_xlat10;
        let x_851 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_853 : vec3<f32> = (vec3<f32>(x_848.y, x_848.x, x_848.z) * vec3<f32>(x_851.x, x_851.x, x_851.x));
        let x_854 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_853.x, x_853.y, x_853.z, x_854.w);
        let x_856 : vec4<f32> = u_xlat11;
        let x_859 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_861 : vec3<f32> = (vec3<f32>(x_856.x, x_856.y, x_856.z) * vec3<f32>(x_859.y, x_859.y, x_859.y));
        let x_862 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_861.x, x_861.y, x_861.z, x_862.w);
        let x_865 : f32 = u_xlat11.x;
        u_xlat10.w = x_865;
        let x_867 : vec4<f32> = u_xlat3;
        let x_870 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_873 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_867.x, x_867.y, x_867.x, x_867.y) * vec4<f32>(x_870.x, x_870.y, x_870.x, x_870.y)) + vec4<f32>(x_873.y, x_873.w, x_873.x, x_873.w));
        let x_876 : vec4<f32> = u_xlat3;
        let x_879 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_882 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_876.x, x_876.y) * vec2<f32>(x_879.x, x_879.y)) + vec2<f32>(x_882.z, x_882.w));
        let x_886 : f32 = u_xlat10.y;
        u_xlat11.w = x_886;
        let x_888 : vec4<f32> = u_xlat11;
        let x_889 : vec2<f32> = vec2<f32>(x_888.y, x_888.z);
        let x_890 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_890.x, x_889.x, x_890.z, x_889.y);
        let x_892 : vec4<f32> = u_xlat3;
        let x_895 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_898 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_892.x, x_892.y, x_892.x, x_892.y) * vec4<f32>(x_895.x, x_895.y, x_895.x, x_895.y)) + vec4<f32>(x_898.x, x_898.y, x_898.z, x_898.y));
        let x_901 : vec4<f32> = u_xlat3;
        let x_904 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_907 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_901.x, x_901.y, x_901.x, x_901.y) * vec4<f32>(x_904.x, x_904.y, x_904.x, x_904.y)) + vec4<f32>(x_907.w, x_907.y, x_907.w, x_907.z));
        let x_910 : vec4<f32> = u_xlat3;
        let x_913 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_916 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_910.x, x_910.y, x_910.x, x_910.y) * vec4<f32>(x_913.x, x_913.y, x_913.x, x_913.y)) + vec4<f32>(x_916.x, x_916.w, x_916.z, x_916.w));
        let x_920 : vec4<f32> = u_xlat9;
        let x_922 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.y) * vec4<f32>(x_922.z, x_922.w, x_922.y, x_922.z));
        let x_926 : vec4<f32> = u_xlat9;
        let x_928 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_926.y, x_926.y, x_926.z, x_926.z) * x_928);
        let x_932 : f32 = u_xlat9.z;
        let x_934 : f32 = u_xlat14.y;
        u_xlat68 = (x_932 * x_934);
        let x_937 : vec4<f32> = u_xlat12;
        let x_938 : vec2<f32> = vec2<f32>(x_937.x, x_937.y);
        let x_940 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_938.x, x_938.y, x_940);
        let x_947 : vec3<f32> = txVec4;
        let x_949 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_947.xy, x_947.z);
        u_xlat3.x = x_949;
        let x_952 : vec4<f32> = u_xlat12;
        let x_953 : vec2<f32> = vec2<f32>(x_952.z, x_952.w);
        let x_955 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_953.x, x_953.y, x_955);
        let x_963 : vec3<f32> = txVec5;
        let x_965 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_963.xy, x_963.z);
        u_xlat25 = x_965;
        let x_966 : f32 = u_xlat25;
        let x_968 : f32 = u_xlat15.y;
        u_xlat25 = (x_966 * x_968);
        let x_971 : f32 = u_xlat15.x;
        let x_973 : f32 = u_xlat3.x;
        let x_975 : f32 = u_xlat25;
        u_xlat3.x = ((x_971 * x_973) + x_975);
        let x_979 : vec2<f32> = u_xlat47;
        let x_981 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_979.x, x_979.y, x_981);
        let x_988 : vec3<f32> = txVec6;
        let x_990 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_988.xy, x_988.z);
        u_xlat25 = x_990;
        let x_992 : f32 = u_xlat15.z;
        let x_993 : f32 = u_xlat25;
        let x_996 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_992 * x_993) + x_996);
        let x_1000 : vec4<f32> = u_xlat11;
        let x_1001 : vec2<f32> = vec2<f32>(x_1000.x, x_1000.y);
        let x_1003 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1001.x, x_1001.y, x_1003);
        let x_1010 : vec3<f32> = txVec7;
        let x_1012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1010.xy, x_1010.z);
        u_xlat25 = x_1012;
        let x_1014 : f32 = u_xlat15.w;
        let x_1015 : f32 = u_xlat25;
        let x_1018 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1014 * x_1015) + x_1018);
        let x_1022 : vec4<f32> = u_xlat13;
        let x_1023 : vec2<f32> = vec2<f32>(x_1022.x, x_1022.y);
        let x_1025 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1023.x, x_1023.y, x_1025);
        let x_1032 : vec3<f32> = txVec8;
        let x_1034 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1032.xy, x_1032.z);
        u_xlat25 = x_1034;
        let x_1036 : f32 = u_xlat16.x;
        let x_1037 : f32 = u_xlat25;
        let x_1040 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1036 * x_1037) + x_1040);
        let x_1044 : vec4<f32> = u_xlat13;
        let x_1045 : vec2<f32> = vec2<f32>(x_1044.z, x_1044.w);
        let x_1047 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1045.x, x_1045.y, x_1047);
        let x_1054 : vec3<f32> = txVec9;
        let x_1056 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1054.xy, x_1054.z);
        u_xlat25 = x_1056;
        let x_1058 : f32 = u_xlat16.y;
        let x_1059 : f32 = u_xlat25;
        let x_1062 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1058 * x_1059) + x_1062);
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1067 : vec2<f32> = vec2<f32>(x_1066.z, x_1066.w);
        let x_1069 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1067.x, x_1067.y, x_1069);
        let x_1076 : vec3<f32> = txVec10;
        let x_1078 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1076.xy, x_1076.z);
        u_xlat25 = x_1078;
        let x_1080 : f32 = u_xlat16.z;
        let x_1081 : f32 = u_xlat25;
        let x_1084 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1080 * x_1081) + x_1084);
        let x_1088 : vec4<f32> = u_xlat10;
        let x_1089 : vec2<f32> = vec2<f32>(x_1088.x, x_1088.y);
        let x_1091 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1089.x, x_1089.y, x_1091);
        let x_1098 : vec3<f32> = txVec11;
        let x_1100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1098.xy, x_1098.z);
        u_xlat25 = x_1100;
        let x_1102 : f32 = u_xlat16.w;
        let x_1103 : f32 = u_xlat25;
        let x_1106 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1102 * x_1103) + x_1106);
        let x_1110 : vec4<f32> = u_xlat10;
        let x_1111 : vec2<f32> = vec2<f32>(x_1110.z, x_1110.w);
        let x_1113 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1111.x, x_1111.y, x_1113);
        let x_1120 : vec3<f32> = txVec12;
        let x_1122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1120.xy, x_1120.z);
        u_xlat25 = x_1122;
        let x_1123 : f32 = u_xlat68;
        let x_1124 : f32 = u_xlat25;
        let x_1127 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1123 * x_1124) + x_1127);
      } else {
        let x_1130 : vec4<f32> = u_xlat2;
        let x_1133 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1136 : vec2<f32> = ((vec2<f32>(x_1130.x, x_1130.y) * vec2<f32>(x_1133.z, x_1133.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1137 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1136.x, x_1136.y, x_1137.z, x_1137.w);
        let x_1139 : vec4<f32> = u_xlat3;
        let x_1141 : vec2<f32> = floor(vec2<f32>(x_1139.x, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1144 : vec4<f32> = u_xlat2;
        let x_1147 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1150 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1144.x, x_1144.y) * vec2<f32>(x_1147.z, x_1147.w)) + -(vec2<f32>(x_1150.x, x_1150.y)));
        let x_1154 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1154.x, x_1154.x, x_1154.y, x_1154.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1157 : vec4<f32> = u_xlat9;
        let x_1159 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1157.x, x_1157.x, x_1157.z, x_1157.z) * vec4<f32>(x_1159.x, x_1159.x, x_1159.z, x_1159.z));
        let x_1162 : vec4<f32> = u_xlat10;
        let x_1166 : vec2<f32> = (vec2<f32>(x_1162.y, x_1162.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1167 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1167.x, x_1166.x, x_1167.z, x_1166.y);
        let x_1169 : vec4<f32> = u_xlat10;
        let x_1172 : vec2<f32> = u_xlat47;
        let x_1174 : vec2<f32> = ((vec2<f32>(x_1169.x, x_1169.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1172));
        let x_1175 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1174.x, x_1175.y, x_1174.y, x_1175.w);
        let x_1177 : vec2<f32> = u_xlat47;
        let x_1179 : vec2<f32> = (-(x_1177) + vec2<f32>(1.0f, 1.0f));
        let x_1180 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1179.x, x_1179.y, x_1180.z, x_1180.w);
        let x_1182 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1182, vec2<f32>(0.0f, 0.0f));
        let x_1184 : vec2<f32> = u_xlat54;
        let x_1186 : vec2<f32> = u_xlat54;
        let x_1188 : vec4<f32> = u_xlat10;
        let x_1190 : vec2<f32> = ((-(x_1184) * x_1186) + vec2<f32>(x_1188.x, x_1188.y));
        let x_1191 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1190.x, x_1190.y, x_1191.z, x_1191.w);
        let x_1193 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1193, vec2<f32>(0.0f, 0.0f));
        let x_1196 : vec2<f32> = u_xlat54;
        let x_1198 : vec2<f32> = u_xlat54;
        let x_1200 : vec4<f32> = u_xlat9;
        let x_1202 : vec2<f32> = ((-(x_1196) * x_1198) + vec2<f32>(x_1200.y, x_1200.w));
        let x_1203 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1202.x, x_1203.y, x_1202.y);
        let x_1205 : vec4<f32> = u_xlat10;
        let x_1208 : vec2<f32> = (vec2<f32>(x_1205.x, x_1205.y) + vec2<f32>(2.0f, 2.0f));
        let x_1209 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1208.x, x_1208.y, x_1209.z, x_1209.w);
        let x_1211 : vec3<f32> = u_xlat31;
        let x_1213 : vec2<f32> = (vec2<f32>(x_1211.x, x_1211.z) + vec2<f32>(2.0f, 2.0f));
        let x_1214 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1214.x, x_1213.x, x_1214.z, x_1213.y);
        let x_1217 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1217 * 0.081632003f);
        let x_1221 : vec4<f32> = u_xlat9;
        let x_1224 : vec3<f32> = (vec3<f32>(x_1221.z, x_1221.x, x_1221.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1225 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1224.x, x_1224.y, x_1224.z, x_1225.w);
        let x_1227 : vec4<f32> = u_xlat10;
        let x_1230 : vec2<f32> = (vec2<f32>(x_1227.x, x_1227.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1231 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1230.x, x_1230.y, x_1231.z, x_1231.w);
        let x_1234 : f32 = u_xlat13.y;
        u_xlat12.x = x_1234;
        let x_1236 : vec2<f32> = u_xlat47;
        let x_1243 : vec2<f32> = ((vec2<f32>(x_1236.x, x_1236.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1244 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1244.x, x_1243.x, x_1244.z, x_1243.y);
        let x_1246 : vec2<f32> = u_xlat47;
        let x_1250 : vec2<f32> = ((vec2<f32>(x_1246.x, x_1246.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1251 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1250.x, x_1251.y, x_1250.y, x_1251.w);
        let x_1254 : f32 = u_xlat9.x;
        u_xlat10.y = x_1254;
        let x_1257 : f32 = u_xlat11.y;
        u_xlat10.w = x_1257;
        let x_1259 : vec4<f32> = u_xlat10;
        let x_1260 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1259 + x_1260);
        let x_1262 : vec2<f32> = u_xlat47;
        let x_1265 : vec2<f32> = ((vec2<f32>(x_1262.y, x_1262.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1266 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1266.x, x_1265.x, x_1266.z, x_1265.y);
        let x_1268 : vec2<f32> = u_xlat47;
        let x_1271 : vec2<f32> = ((vec2<f32>(x_1268.y, x_1268.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1272 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1271.x, x_1272.y, x_1271.y, x_1272.w);
        let x_1275 : f32 = u_xlat9.y;
        u_xlat11.y = x_1275;
        let x_1277 : vec4<f32> = u_xlat11;
        let x_1278 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1277 + x_1278);
        let x_1280 : vec4<f32> = u_xlat10;
        let x_1281 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1280 / x_1281);
        let x_1283 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1283 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1289 : vec4<f32> = u_xlat11;
        let x_1290 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1289 / x_1290);
        let x_1292 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1292 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1294 : vec4<f32> = u_xlat10;
        let x_1297 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1294.w, x_1294.x, x_1294.y, x_1294.z) * vec4<f32>(x_1297.x, x_1297.x, x_1297.x, x_1297.x));
        let x_1300 : vec4<f32> = u_xlat11;
        let x_1303 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1300.x, x_1300.w, x_1300.y, x_1300.z) * vec4<f32>(x_1303.y, x_1303.y, x_1303.y, x_1303.y));
        let x_1306 : vec4<f32> = u_xlat10;
        let x_1307 : vec3<f32> = vec3<f32>(x_1306.y, x_1306.z, x_1306.w);
        let x_1308 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1307.x, x_1308.y, x_1307.y, x_1307.z);
        let x_1311 : f32 = u_xlat11.x;
        u_xlat13.y = x_1311;
        let x_1313 : vec4<f32> = u_xlat3;
        let x_1316 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1319 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1313.x, x_1313.y, x_1313.x, x_1313.y) * vec4<f32>(x_1316.x, x_1316.y, x_1316.x, x_1316.y)) + vec4<f32>(x_1319.x, x_1319.y, x_1319.z, x_1319.y));
        let x_1322 : vec4<f32> = u_xlat3;
        let x_1325 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1328 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1322.x, x_1322.y) * vec2<f32>(x_1325.x, x_1325.y)) + vec2<f32>(x_1328.w, x_1328.y));
        let x_1332 : f32 = u_xlat13.y;
        u_xlat10.y = x_1332;
        let x_1335 : f32 = u_xlat11.z;
        u_xlat13.y = x_1335;
        let x_1337 : vec4<f32> = u_xlat3;
        let x_1340 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1343 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1337.x, x_1337.y, x_1337.x, x_1337.y) * vec4<f32>(x_1340.x, x_1340.y, x_1340.x, x_1340.y)) + vec4<f32>(x_1343.x, x_1343.y, x_1343.z, x_1343.y));
        let x_1346 : vec4<f32> = u_xlat3;
        let x_1349 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1352 : vec4<f32> = u_xlat13;
        let x_1354 : vec2<f32> = ((vec2<f32>(x_1346.x, x_1346.y) * vec2<f32>(x_1349.x, x_1349.y)) + vec2<f32>(x_1352.w, x_1352.y));
        let x_1355 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1354.x, x_1354.y, x_1355.z, x_1355.w);
        let x_1358 : f32 = u_xlat13.y;
        u_xlat10.z = x_1358;
        let x_1361 : vec4<f32> = u_xlat3;
        let x_1364 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1367 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1361.x, x_1361.y, x_1361.x, x_1361.y) * vec4<f32>(x_1364.x, x_1364.y, x_1364.x, x_1364.y)) + vec4<f32>(x_1367.x, x_1367.y, x_1367.x, x_1367.z));
        let x_1371 : f32 = u_xlat11.w;
        u_xlat13.y = x_1371;
        let x_1374 : vec4<f32> = u_xlat3;
        let x_1377 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1380 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1374.x, x_1374.y, x_1374.x, x_1374.y) * vec4<f32>(x_1377.x, x_1377.y, x_1377.x, x_1377.y)) + vec4<f32>(x_1380.x, x_1380.y, x_1380.z, x_1380.y));
        let x_1384 : vec4<f32> = u_xlat3;
        let x_1387 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1390 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1384.x, x_1384.y) * vec2<f32>(x_1387.x, x_1387.y)) + vec2<f32>(x_1390.w, x_1390.y));
        let x_1394 : f32 = u_xlat13.y;
        u_xlat10.w = x_1394;
        let x_1397 : vec4<f32> = u_xlat3;
        let x_1400 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1403 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1397.x, x_1397.y) * vec2<f32>(x_1400.x, x_1400.y)) + vec2<f32>(x_1403.x, x_1403.w));
        let x_1406 : vec4<f32> = u_xlat13;
        let x_1407 : vec3<f32> = vec3<f32>(x_1406.x, x_1406.z, x_1406.w);
        let x_1408 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1407.x, x_1408.y, x_1407.y, x_1407.z);
        let x_1410 : vec4<f32> = u_xlat3;
        let x_1413 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1416 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1410.x, x_1410.y, x_1410.x, x_1410.y) * vec4<f32>(x_1413.x, x_1413.y, x_1413.x, x_1413.y)) + vec4<f32>(x_1416.x, x_1416.y, x_1416.z, x_1416.y));
        let x_1420 : vec4<f32> = u_xlat3;
        let x_1423 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1426 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1420.x, x_1420.y) * vec2<f32>(x_1423.x, x_1423.y)) + vec2<f32>(x_1426.w, x_1426.y));
        let x_1430 : f32 = u_xlat10.x;
        u_xlat11.x = x_1430;
        let x_1432 : vec4<f32> = u_xlat3;
        let x_1435 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_1438 : vec4<f32> = u_xlat11;
        let x_1440 : vec2<f32> = ((vec2<f32>(x_1432.x, x_1432.y) * vec2<f32>(x_1435.x, x_1435.y)) + vec2<f32>(x_1438.x, x_1438.y));
        let x_1441 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1440.x, x_1440.y, x_1441.z, x_1441.w);
        let x_1444 : vec4<f32> = u_xlat9;
        let x_1446 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1444.x, x_1444.x, x_1444.x, x_1444.x) * x_1446);
        let x_1449 : vec4<f32> = u_xlat9;
        let x_1451 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1449.y, x_1449.y, x_1449.y, x_1449.y) * x_1451);
        let x_1454 : vec4<f32> = u_xlat9;
        let x_1456 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1454.z, x_1454.z, x_1454.z, x_1454.z) * x_1456);
        let x_1458 : vec4<f32> = u_xlat9;
        let x_1460 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1458.w, x_1458.w, x_1458.w, x_1458.w) * x_1460);
        let x_1463 : vec4<f32> = u_xlat14;
        let x_1464 : vec2<f32> = vec2<f32>(x_1463.x, x_1463.y);
        let x_1466 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1464.x, x_1464.y, x_1466);
        let x_1473 : vec3<f32> = txVec13;
        let x_1475 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1473.xy, x_1473.z);
        u_xlat68 = x_1475;
        let x_1477 : vec4<f32> = u_xlat14;
        let x_1478 : vec2<f32> = vec2<f32>(x_1477.z, x_1477.w);
        let x_1480 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1478.x, x_1478.y, x_1480);
        let x_1488 : vec3<f32> = txVec14;
        let x_1490 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1488.xy, x_1488.z);
        u_xlat70 = x_1490;
        let x_1491 : f32 = u_xlat70;
        let x_1493 : f32 = u_xlat19.y;
        u_xlat70 = (x_1491 * x_1493);
        let x_1496 : f32 = u_xlat19.x;
        let x_1497 : f32 = u_xlat68;
        let x_1499 : f32 = u_xlat70;
        u_xlat68 = ((x_1496 * x_1497) + x_1499);
        let x_1502 : vec2<f32> = u_xlat47;
        let x_1504 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1502.x, x_1502.y, x_1504);
        let x_1511 : vec3<f32> = txVec15;
        let x_1513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1511.xy, x_1511.z);
        u_xlat47.x = x_1513;
        let x_1516 : f32 = u_xlat19.z;
        let x_1518 : f32 = u_xlat47.x;
        let x_1520 : f32 = u_xlat68;
        u_xlat68 = ((x_1516 * x_1518) + x_1520);
        let x_1523 : vec4<f32> = u_xlat17;
        let x_1524 : vec2<f32> = vec2<f32>(x_1523.x, x_1523.y);
        let x_1526 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1524.x, x_1524.y, x_1526);
        let x_1533 : vec3<f32> = txVec16;
        let x_1535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1533.xy, x_1533.z);
        u_xlat47.x = x_1535;
        let x_1538 : f32 = u_xlat19.w;
        let x_1540 : f32 = u_xlat47.x;
        let x_1542 : f32 = u_xlat68;
        u_xlat68 = ((x_1538 * x_1540) + x_1542);
        let x_1545 : vec4<f32> = u_xlat15;
        let x_1546 : vec2<f32> = vec2<f32>(x_1545.x, x_1545.y);
        let x_1548 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1546.x, x_1546.y, x_1548);
        let x_1555 : vec3<f32> = txVec17;
        let x_1557 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1555.xy, x_1555.z);
        u_xlat47.x = x_1557;
        let x_1560 : f32 = u_xlat20.x;
        let x_1562 : f32 = u_xlat47.x;
        let x_1564 : f32 = u_xlat68;
        u_xlat68 = ((x_1560 * x_1562) + x_1564);
        let x_1567 : vec4<f32> = u_xlat15;
        let x_1568 : vec2<f32> = vec2<f32>(x_1567.z, x_1567.w);
        let x_1570 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1568.x, x_1568.y, x_1570);
        let x_1577 : vec3<f32> = txVec18;
        let x_1579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1577.xy, x_1577.z);
        u_xlat47.x = x_1579;
        let x_1582 : f32 = u_xlat20.y;
        let x_1584 : f32 = u_xlat47.x;
        let x_1586 : f32 = u_xlat68;
        u_xlat68 = ((x_1582 * x_1584) + x_1586);
        let x_1589 : vec4<f32> = u_xlat16;
        let x_1590 : vec2<f32> = vec2<f32>(x_1589.x, x_1589.y);
        let x_1592 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1590.x, x_1590.y, x_1592);
        let x_1599 : vec3<f32> = txVec19;
        let x_1601 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1599.xy, x_1599.z);
        u_xlat47.x = x_1601;
        let x_1604 : f32 = u_xlat20.z;
        let x_1606 : f32 = u_xlat47.x;
        let x_1608 : f32 = u_xlat68;
        u_xlat68 = ((x_1604 * x_1606) + x_1608);
        let x_1611 : vec4<f32> = u_xlat17;
        let x_1612 : vec2<f32> = vec2<f32>(x_1611.z, x_1611.w);
        let x_1614 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1612.x, x_1612.y, x_1614);
        let x_1621 : vec3<f32> = txVec20;
        let x_1623 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1621.xy, x_1621.z);
        u_xlat47.x = x_1623;
        let x_1626 : f32 = u_xlat20.w;
        let x_1628 : f32 = u_xlat47.x;
        let x_1630 : f32 = u_xlat68;
        u_xlat68 = ((x_1626 * x_1628) + x_1630);
        let x_1633 : vec4<f32> = u_xlat18;
        let x_1634 : vec2<f32> = vec2<f32>(x_1633.x, x_1633.y);
        let x_1636 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1634.x, x_1634.y, x_1636);
        let x_1643 : vec3<f32> = txVec21;
        let x_1645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1643.xy, x_1643.z);
        u_xlat47.x = x_1645;
        let x_1648 : f32 = u_xlat21.x;
        let x_1650 : f32 = u_xlat47.x;
        let x_1652 : f32 = u_xlat68;
        u_xlat68 = ((x_1648 * x_1650) + x_1652);
        let x_1655 : vec4<f32> = u_xlat18;
        let x_1656 : vec2<f32> = vec2<f32>(x_1655.z, x_1655.w);
        let x_1658 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1656.x, x_1656.y, x_1658);
        let x_1665 : vec3<f32> = txVec22;
        let x_1667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1665.xy, x_1665.z);
        u_xlat47.x = x_1667;
        let x_1670 : f32 = u_xlat21.y;
        let x_1672 : f32 = u_xlat47.x;
        let x_1674 : f32 = u_xlat68;
        u_xlat68 = ((x_1670 * x_1672) + x_1674);
        let x_1677 : vec2<f32> = u_xlat32;
        let x_1679 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1677.x, x_1677.y, x_1679);
        let x_1686 : vec3<f32> = txVec23;
        let x_1688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1686.xy, x_1686.z);
        u_xlat47.x = x_1688;
        let x_1691 : f32 = u_xlat21.z;
        let x_1693 : f32 = u_xlat47.x;
        let x_1695 : f32 = u_xlat68;
        u_xlat68 = ((x_1691 * x_1693) + x_1695);
        let x_1698 : vec2<f32> = u_xlat60;
        let x_1700 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1698.x, x_1698.y, x_1700);
        let x_1707 : vec3<f32> = txVec24;
        let x_1709 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1707.xy, x_1707.z);
        u_xlat47.x = x_1709;
        let x_1712 : f32 = u_xlat21.w;
        let x_1714 : f32 = u_xlat47.x;
        let x_1716 : f32 = u_xlat68;
        u_xlat68 = ((x_1712 * x_1714) + x_1716);
        let x_1719 : vec4<f32> = u_xlat13;
        let x_1720 : vec2<f32> = vec2<f32>(x_1719.x, x_1719.y);
        let x_1722 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1720.x, x_1720.y, x_1722);
        let x_1729 : vec3<f32> = txVec25;
        let x_1731 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1729.xy, x_1729.z);
        u_xlat47.x = x_1731;
        let x_1734 : f32 = u_xlat9.x;
        let x_1736 : f32 = u_xlat47.x;
        let x_1738 : f32 = u_xlat68;
        u_xlat68 = ((x_1734 * x_1736) + x_1738);
        let x_1741 : vec4<f32> = u_xlat13;
        let x_1742 : vec2<f32> = vec2<f32>(x_1741.z, x_1741.w);
        let x_1744 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1742.x, x_1742.y, x_1744);
        let x_1751 : vec3<f32> = txVec26;
        let x_1753 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1751.xy, x_1751.z);
        u_xlat47.x = x_1753;
        let x_1756 : f32 = u_xlat9.y;
        let x_1758 : f32 = u_xlat47.x;
        let x_1760 : f32 = u_xlat68;
        u_xlat68 = ((x_1756 * x_1758) + x_1760);
        let x_1763 : vec2<f32> = u_xlat55;
        let x_1765 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1763.x, x_1763.y, x_1765);
        let x_1772 : vec3<f32> = txVec27;
        let x_1774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1772.xy, x_1772.z);
        u_xlat47.x = x_1774;
        let x_1777 : f32 = u_xlat9.z;
        let x_1779 : f32 = u_xlat47.x;
        let x_1781 : f32 = u_xlat68;
        u_xlat68 = ((x_1777 * x_1779) + x_1781);
        let x_1784 : vec4<f32> = u_xlat3;
        let x_1785 : vec2<f32> = vec2<f32>(x_1784.x, x_1784.y);
        let x_1787 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1785.x, x_1785.y, x_1787);
        let x_1794 : vec3<f32> = txVec28;
        let x_1796 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1794.xy, x_1794.z);
        u_xlat3.x = x_1796;
        let x_1799 : f32 = u_xlat9.w;
        let x_1801 : f32 = u_xlat3.x;
        let x_1803 : f32 = u_xlat68;
        u_xlat67 = ((x_1799 * x_1801) + x_1803);
      }
    }
  } else {
    let x_1807 : vec4<f32> = u_xlat2;
    let x_1808 : vec2<f32> = vec2<f32>(x_1807.x, x_1807.y);
    let x_1810 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1808.x, x_1808.y, x_1810);
    let x_1817 : vec3<f32> = txVec29;
    let x_1819 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1817.xy, x_1817.z);
    u_xlat67 = x_1819;
  }
  let x_1821 : f32 = x_379.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1821) + 1.0f);
  let x_1824 : f32 = u_xlat67;
  let x_1826 : f32 = x_379.x_MainLightShadowParams.x;
  let x_1828 : f32 = u_xlat68;
  u_xlat67 = ((x_1824 * x_1826) + x_1828);
  let x_1832 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1832);
  let x_1836 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1836 >= 1.0f);
  let x_1838 : bool = u_xlatb25;
  let x_1839 : bool = u_xlatb3;
  u_xlatb3 = (x_1838 | x_1839);
  let x_1841 : bool = u_xlatb3;
  let x_1842 : f32 = u_xlat67;
  u_xlat67 = select(x_1842, 1.0f, x_1841);
  let x_1844 : vec3<f32> = u_xlat1;
  let x_1846 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1844, -(vec3<f32>(x_1846.x, x_1846.y, x_1846.z)));
  let x_1852 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1852, 0.0f, 1.0f);
  let x_1856 : f32 = u_xlat67;
  let x_1859 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1856, x_1856, x_1856) * vec3<f32>(x_1859.x, x_1859.y, x_1859.z));
  let x_1862 : vec3<f32> = u_xlat23;
  let x_1863 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1862 * vec3<f32>(x_1863.x, x_1863.x, x_1863.x));
  let x_1866 : vec3<f32> = u_xlat1;
  let x_1867 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1866 * vec3<f32>(x_1867.x, x_1867.y, x_1867.z));
  let x_1871 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1871 < 0.0f);
  let x_1874 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1874 + 1.0f);
  let x_1876 : bool = u_xlatb67;
  if (x_1876) {
    let x_1880 : f32 = u_xlat25;
    x_1877 = x_1880;
  } else {
    let x_1883 : f32 = x_95.unity_LODFade.x;
    x_1877 = x_1883;
  }
  let x_1884 : f32 = x_1877;
  u_xlat67 = x_1884;
  let x_1885 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1885);
  let x_1887 : vec4<f32> = u_xlat5;
  let x_1891 : vec4<f32> = x_160.x_ScreenParams;
  let x_1893 : vec3<f32> = (abs(vec3<f32>(x_1887.x, x_1887.y, x_1887.z)) * vec3<f32>(x_1891.x, x_1891.y, x_1891.x));
  let x_1894 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1893.x, x_1893.y, x_1893.z, x_1894.w);
  let x_1899 : vec4<f32> = u_xlat5;
  u_xlatu5 = vec3<u32>(vec3<f32>(x_1899.x, x_1899.y, x_1899.z));
  let x_1904 : u32 = u_xlatu5.z;
  u_xlatu47 = (x_1904 * 1025u);
  let x_1908 : u32 = u_xlatu47;
  u_xlatu69 = (x_1908 >> 6u);
  let x_1912 : u32 = u_xlatu69;
  let x_1913 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1912 ^ x_1913));
  let x_1916 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1916) * 9u);
  let x_1920 : u32 = u_xlatu47;
  u_xlatu69 = (x_1920 >> 11u);
  let x_1923 : u32 = u_xlatu69;
  let x_1924 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1923 ^ x_1924));
  let x_1927 : i32 = u_xlati47;
  u_xlati47 = (x_1927 * 32769i);
  let x_1930 : i32 = u_xlati47;
  let x_1933 : u32 = u_xlatu5.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1930) ^ x_1933));
  let x_1936 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1936) * 1025u);
  let x_1939 : u32 = u_xlatu47;
  u_xlatu69 = (x_1939 >> 6u);
  let x_1941 : u32 = u_xlatu69;
  let x_1942 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1941 ^ x_1942));
  let x_1945 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1945) * 9u);
  let x_1948 : u32 = u_xlatu47;
  u_xlatu69 = (x_1948 >> 11u);
  let x_1950 : u32 = u_xlatu69;
  let x_1951 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1950 ^ x_1951));
  let x_1954 : i32 = u_xlati47;
  u_xlati47 = (x_1954 * 32769i);
  let x_1956 : i32 = u_xlati47;
  let x_1959 : u32 = u_xlatu5.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1956) ^ x_1959));
  let x_1962 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1962) * 1025u);
  let x_1965 : u32 = u_xlatu47;
  u_xlatu69 = (x_1965 >> 6u);
  let x_1967 : u32 = u_xlatu69;
  let x_1968 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1967 ^ x_1968));
  let x_1971 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1971) * 9u);
  let x_1974 : u32 = u_xlatu47;
  u_xlatu69 = (x_1974 >> 11u);
  let x_1976 : u32 = u_xlatu69;
  let x_1977 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1976 ^ x_1977));
  let x_1980 : i32 = u_xlati47;
  u_xlati47 = (x_1980 * 32769i);
  param = 1065353216i;
  let x_1986 : i32 = u_xlati47;
  param_1 = x_1986;
  param_2 = 0i;
  param_3 = 23i;
  let x_1989 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_1989);
  let x_1993 : f32 = u_xlat47.x;
  u_xlat47.x = (x_1993 + -1.0f);
  let x_1998 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_1998) + 1.0f);
  let x_2001 : bool = u_xlatb25;
  if (x_2001) {
    let x_2006 : f32 = u_xlat47.x;
    x_2002 = x_2006;
  } else {
    let x_2008 : f32 = u_xlat69;
    x_2002 = x_2008;
  }
  let x_2009 : f32 = x_2002;
  u_xlat25 = x_2009;
  let x_2010 : f32 = u_xlat67;
  let x_2012 : f32 = u_xlat25;
  u_xlat67 = ((x_2010 * 2.0f) + -(x_2012));
  let x_2015 : f32 = u_xlat67;
  let x_2017 : f32 = u_xlat6.w;
  u_xlat25 = (x_2015 * x_2017);
  let x_2020 : f32 = u_xlat25;
  u_xlatb47 = (x_2020 >= 0.400000006f);
  let x_2023 : bool = u_xlatb47;
  let x_2024 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2024, x_2023);
  let x_2028 : f32 = u_xlat6.w;
  let x_2029 : f32 = u_xlat67;
  u_xlat67 = ((x_2028 * x_2029) + -0.400000006f);
  let x_2033 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2033);
  let x_2035 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2035);
  let x_2037 : f32 = u_xlat25;
  let x_2039 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2037) + abs(x_2039));
  let x_2042 : f32 = u_xlat25;
  u_xlat25 = max(x_2042, 0.0001f);
  let x_2045 : f32 = u_xlat67;
  let x_2046 : f32 = u_xlat25;
  u_xlat67 = (x_2045 / x_2046);
  let x_2048 : f32 = u_xlat67;
  u_xlat67 = (x_2048 + 0.5f);
  let x_2050 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2050, 0.0f, 1.0f);
  let x_2053 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2053 == 0.0f));
  let x_2055 : bool = u_xlatb25;
  if (x_2055) {
    let x_2059 : f32 = u_xlat67;
    x_2056 = x_2059;
  } else {
    let x_2062 : f32 = u_xlat47.x;
    x_2056 = x_2062;
  }
  let x_2063 : f32 = x_2056;
  u_xlat67 = x_2063;
  let x_2064 : f32 = u_xlat67;
  u_xlat47.x = (x_2064 + -0.0001f);
  let x_2069 : f32 = u_xlat47.x;
  u_xlatb47 = (x_2069 < 0.0f);
  let x_2071 : bool = u_xlatb47;
  if (((select(0i, 1i, x_2071) * -1i) != 0i)) {
    discard;
  }
  let x_2079 : vec3<f32> = u_xlat22;
  let x_2080 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2079 * vec3<f32>(x_2080.y, x_2080.y, x_2080.y));
  let x_2083 : vec3<f32> = u_xlat30;
  let x_2085 : vec4<f32> = vs_INTERP2;
  let x_2088 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2083.x, x_2083.x, x_2083.x) * vec3<f32>(x_2085.x, x_2085.y, x_2085.z)) + x_2088);
  let x_2090 : vec3<f32> = u_xlat30;
  let x_2092 : vec3<f32> = vs_INTERP1;
  let x_2094 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2090.z, x_2090.z, x_2090.z) * x_2092) + x_2094);
  let x_2096 : vec3<f32> = u_xlat22;
  let x_2097 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2096, x_2097);
  let x_2101 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2101);
  let x_2104 : vec3<f32> = u_xlat22;
  let x_2105 : vec2<f32> = u_xlat47;
  u_xlat22 = (x_2104 * vec3<f32>(x_2105.x, x_2105.x, x_2105.x));
  let x_2109 : f32 = vs_INTERP0.y;
  let x_2111 : f32 = x_160.unity_MatrixV[1i].z;
  u_xlat47.x = (x_2109 * x_2111);
  let x_2115 : f32 = x_160.unity_MatrixV[0i].z;
  let x_2117 : f32 = vs_INTERP0.x;
  let x_2120 : f32 = u_xlat47.x;
  u_xlat47.x = ((x_2115 * x_2117) + x_2120);
  let x_2124 : f32 = x_160.unity_MatrixV[2i].z;
  let x_2126 : f32 = vs_INTERP0.z;
  let x_2129 : f32 = u_xlat47.x;
  u_xlat47.x = ((x_2124 * x_2126) + x_2129);
  let x_2133 : f32 = u_xlat47.x;
  let x_2135 : f32 = x_160.unity_MatrixV[3i].z;
  u_xlat47.x = (x_2133 + x_2135);
  let x_2139 : f32 = u_xlat47.x;
  let x_2142 : f32 = x_160.x_ProjectionParams.y;
  u_xlat47.x = (-(x_2139) + -(x_2142));
  let x_2147 : f32 = u_xlat47.x;
  u_xlat47.x = max(x_2147, 0.0f);
  let x_2151 : f32 = u_xlat47.x;
  let x_2154 : f32 = x_160.unity_FogParams.x;
  u_xlat47.x = (x_2151 * x_2154);
  let x_2164 : vec2<f32> = vs_INTERP5;
  let x_2166 : f32 = x_160.x_GlobalMipBias.x;
  let x_2167 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_2164, x_2166);
  u_xlat5 = x_2167;
  let x_2172 : vec2<f32> = vs_INTERP5;
  let x_2174 : f32 = x_160.x_GlobalMipBias.x;
  let x_2175 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2172, x_2174);
  let x_2176 : vec3<f32> = vec3<f32>(x_2175.x, x_2175.y, x_2175.z);
  let x_2177 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2176.x, x_2176.y, x_2176.z, x_2177.w);
  let x_2179 : vec4<f32> = u_xlat5;
  let x_2182 : vec3<f32> = (vec3<f32>(x_2179.x, x_2179.y, x_2179.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_2183 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2182.x, x_2182.y, x_2182.z, x_2183.w);
  let x_2185 : vec3<f32> = u_xlat22;
  let x_2186 : vec4<f32> = u_xlat5;
  u_xlat69 = dot(x_2185, vec3<f32>(x_2186.x, x_2186.y, x_2186.z));
  let x_2189 : f32 = u_xlat69;
  u_xlat69 = (x_2189 + 0.5f);
  let x_2191 : f32 = u_xlat69;
  let x_2193 : vec4<f32> = u_xlat6;
  let x_2195 : vec3<f32> = (vec3<f32>(x_2191, x_2191, x_2191) * vec3<f32>(x_2193.x, x_2193.y, x_2193.z));
  let x_2196 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2195.x, x_2195.y, x_2195.z, x_2196.w);
  let x_2199 : f32 = u_xlat5.w;
  u_xlat69 = max(x_2199, 0.0001f);
  let x_2201 : vec4<f32> = u_xlat5;
  let x_2203 : f32 = u_xlat69;
  let x_2205 : vec3<f32> = (vec3<f32>(x_2201.x, x_2201.y, x_2201.z) / vec3<f32>(x_2203, x_2203, x_2203));
  let x_2206 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2205.x, x_2205.y, x_2205.z, x_2206.w);
  let x_2209 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2210 : vec2<f32> = vec2<f32>(x_2209.x, x_2209.y);
  let x_2214 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2210.x, x_2210.y));
  let x_2215 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2214.x, x_2214.y, x_2215.z, x_2215.w);
  let x_2217 : vec4<f32> = u_xlat6;
  let x_2219 : vec4<f32> = hlslcc_FragCoord;
  let x_2221 : vec2<f32> = (vec2<f32>(x_2217.x, x_2217.y) * vec2<f32>(x_2219.x, x_2219.y));
  let x_2222 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2221.x, x_2221.y, x_2222.z, x_2222.w);
  let x_2225 : f32 = u_xlat6.y;
  let x_2228 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2231 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat69 = ((x_2225 * x_2228) + x_2231);
  let x_2233 : f32 = u_xlat69;
  u_xlat6.z = (-(x_2233) + 1.0f);
  let x_2238 : f32 = u_xlat8.x;
  u_xlat8.x = x_2238;
  let x_2241 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2241, 0.0f, 1.0f);
  let x_2244 : f32 = u_xlat67;
  u_xlat67 = x_2244;
  let x_2245 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2245, 0.0f, 1.0f);
  let x_2247 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2247 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2252 : f32 = u_xlat8.x;
  u_xlat69 = (-(x_2252) + 1.0f);
  let x_2255 : f32 = u_xlat69;
  let x_2256 : f32 = u_xlat69;
  u_xlat70 = (x_2255 * x_2256);
  let x_2258 : f32 = u_xlat70;
  u_xlat70 = max(x_2258, 0.0078125f);
  let x_2262 : f32 = u_xlat70;
  let x_2263 : f32 = u_xlat70;
  u_xlat71 = (x_2262 * x_2263);
  let x_2267 : f32 = u_xlat8.x;
  u_xlat28 = (x_2267 + 0.040000021f);
  let x_2270 : f32 = u_xlat28;
  u_xlat28 = min(x_2270, 1.0f);
  let x_2273 : f32 = u_xlat70;
  u_xlat72 = ((x_2273 * 4.0f) + 2.0f);
  let x_2281 : vec4<f32> = u_xlat6;
  let x_2284 : f32 = x_160.x_GlobalMipBias.x;
  let x_2285 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2281.x, x_2281.z), x_2284);
  u_xlat6.x = x_2285.x;
  let x_2290 : f32 = u_xlat6.x;
  u_xlat50 = (x_2290 + -1.0f);
  let x_2293 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2294 : f32 = u_xlat50;
  u_xlat50 = ((x_2293 * x_2294) + 1.0f);
  let x_2298 : f32 = u_xlat6.x;
  let x_2300 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2298, x_2300);
  let x_2303 : bool = u_xlatb0;
  if (x_2303) {
    let x_2307 : f32 = x_379.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2307 == 1.0f);
    let x_2309 : bool = u_xlatb0;
    if (x_2309) {
      let x_2312 : vec4<f32> = u_xlat2;
      let x_2315 : vec4<f32> = x_379.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2312.x, x_2312.y, x_2312.x, x_2312.y) + x_2315);
      let x_2318 : vec4<f32> = u_xlat8;
      let x_2319 : vec2<f32> = vec2<f32>(x_2318.x, x_2318.y);
      let x_2321 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2319.x, x_2319.y, x_2321);
      let x_2328 : vec3<f32> = txVec30;
      let x_2330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2328.xy, x_2328.z);
      u_xlat9.x = x_2330;
      let x_2333 : vec4<f32> = u_xlat8;
      let x_2334 : vec2<f32> = vec2<f32>(x_2333.z, x_2333.w);
      let x_2336 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2334.x, x_2334.y, x_2336);
      let x_2343 : vec3<f32> = txVec31;
      let x_2345 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2343.xy, x_2343.z);
      u_xlat9.y = x_2345;
      let x_2347 : vec4<f32> = u_xlat2;
      let x_2350 : vec4<f32> = x_379.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2347.x, x_2347.y, x_2347.x, x_2347.y) + x_2350);
      let x_2353 : vec4<f32> = u_xlat8;
      let x_2354 : vec2<f32> = vec2<f32>(x_2353.x, x_2353.y);
      let x_2356 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2354.x, x_2354.y, x_2356);
      let x_2363 : vec3<f32> = txVec32;
      let x_2365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2363.xy, x_2363.z);
      u_xlat9.z = x_2365;
      let x_2368 : vec4<f32> = u_xlat8;
      let x_2369 : vec2<f32> = vec2<f32>(x_2368.z, x_2368.w);
      let x_2371 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2369.x, x_2369.y, x_2371);
      let x_2378 : vec3<f32> = txVec33;
      let x_2380 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2378.xy, x_2378.z);
      u_xlat9.w = x_2380;
      let x_2382 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2382, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2388 : f32 = x_379.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2388 == 2.0f);
      let x_2390 : bool = u_xlatb73;
      if (x_2390) {
        let x_2393 : vec4<f32> = u_xlat2;
        let x_2396 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2399 : vec2<f32> = ((vec2<f32>(x_2393.x, x_2393.y) * vec2<f32>(x_2396.z, x_2396.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2400 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2399.x, x_2399.y, x_2400.z, x_2400.w);
        let x_2402 : vec4<f32> = u_xlat8;
        let x_2404 : vec2<f32> = floor(vec2<f32>(x_2402.x, x_2402.y));
        let x_2405 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2404.x, x_2404.y, x_2405.z, x_2405.w);
        let x_2408 : vec4<f32> = u_xlat2;
        let x_2411 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2414 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2408.x, x_2408.y) * vec2<f32>(x_2411.z, x_2411.w)) + -(vec2<f32>(x_2414.x, x_2414.y)));
        let x_2418 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2418.x, x_2418.x, x_2418.y, x_2418.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2421 : vec4<f32> = u_xlat9;
        let x_2423 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2421.x, x_2421.x, x_2421.z, x_2421.z) * vec4<f32>(x_2423.x, x_2423.x, x_2423.z, x_2423.z));
        let x_2426 : vec4<f32> = u_xlat10;
        let x_2428 : vec2<f32> = (vec2<f32>(x_2426.y, x_2426.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2429 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2428.x, x_2429.y, x_2428.y, x_2429.w);
        let x_2431 : vec4<f32> = u_xlat10;
        let x_2434 : vec2<f32> = u_xlat52;
        let x_2436 : vec2<f32> = ((vec2<f32>(x_2431.x, x_2431.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2434));
        let x_2437 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2436.x, x_2436.y, x_2437.z, x_2437.w);
        let x_2439 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2439) + vec2<f32>(1.0f, 1.0f));
        let x_2442 : vec2<f32> = u_xlat52;
        let x_2443 : vec2<f32> = min(x_2442, vec2<f32>(0.0f, 0.0f));
        let x_2444 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2443.x, x_2443.y, x_2444.z, x_2444.w);
        let x_2446 : vec4<f32> = u_xlat11;
        let x_2449 : vec4<f32> = u_xlat11;
        let x_2452 : vec2<f32> = u_xlat54;
        let x_2453 : vec2<f32> = ((-(vec2<f32>(x_2446.x, x_2446.y)) * vec2<f32>(x_2449.x, x_2449.y)) + x_2452);
        let x_2454 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2453.x, x_2453.y, x_2454.z, x_2454.w);
        let x_2456 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2456, vec2<f32>(0.0f, 0.0f));
        let x_2458 : vec2<f32> = u_xlat52;
        let x_2460 : vec2<f32> = u_xlat52;
        let x_2462 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2458) * x_2460) + vec2<f32>(x_2462.y, x_2462.w));
        let x_2465 : vec4<f32> = u_xlat11;
        let x_2467 : vec2<f32> = (vec2<f32>(x_2465.x, x_2465.y) + vec2<f32>(1.0f, 1.0f));
        let x_2468 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2467.x, x_2467.y, x_2468.z, x_2468.w);
        let x_2470 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2470 + vec2<f32>(1.0f, 1.0f));
        let x_2472 : vec4<f32> = u_xlat10;
        let x_2474 : vec2<f32> = (vec2<f32>(x_2472.x, x_2472.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2475 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2474.x, x_2474.y, x_2475.z, x_2475.w);
        let x_2477 : vec2<f32> = u_xlat54;
        let x_2478 : vec2<f32> = (x_2477 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2479 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2478.x, x_2478.y, x_2479.z, x_2479.w);
        let x_2481 : vec4<f32> = u_xlat11;
        let x_2483 : vec2<f32> = (vec2<f32>(x_2481.x, x_2481.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2484 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2483.x, x_2483.y, x_2484.z, x_2484.w);
        let x_2486 : vec2<f32> = u_xlat52;
        let x_2487 : vec2<f32> = (x_2486 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2488 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2487.x, x_2487.y, x_2488.z, x_2488.w);
        let x_2490 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2490.y, x_2490.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2494 : f32 = u_xlat11.x;
        u_xlat12.z = x_2494;
        let x_2497 : f32 = u_xlat52.x;
        u_xlat12.w = x_2497;
        let x_2500 : f32 = u_xlat13.x;
        u_xlat10.z = x_2500;
        let x_2503 : f32 = u_xlat9.x;
        u_xlat10.w = x_2503;
        let x_2505 : vec4<f32> = u_xlat10;
        let x_2507 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2505.z, x_2505.w, x_2505.x, x_2505.z) + vec4<f32>(x_2507.z, x_2507.w, x_2507.x, x_2507.z));
        let x_2511 : f32 = u_xlat12.y;
        u_xlat11.z = x_2511;
        let x_2514 : f32 = u_xlat52.y;
        u_xlat11.w = x_2514;
        let x_2517 : f32 = u_xlat10.y;
        u_xlat13.z = x_2517;
        let x_2520 : f32 = u_xlat9.z;
        u_xlat13.w = x_2520;
        let x_2522 : vec4<f32> = u_xlat11;
        let x_2524 : vec4<f32> = u_xlat13;
        let x_2526 : vec3<f32> = (vec3<f32>(x_2522.z, x_2522.y, x_2522.w) + vec3<f32>(x_2524.z, x_2524.y, x_2524.w));
        let x_2527 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2526.x, x_2526.y, x_2526.z, x_2527.w);
        let x_2529 : vec4<f32> = u_xlat10;
        let x_2531 : vec4<f32> = u_xlat14;
        let x_2533 : vec3<f32> = (vec3<f32>(x_2529.x, x_2529.z, x_2529.w) / vec3<f32>(x_2531.z, x_2531.w, x_2531.y));
        let x_2534 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2533.x, x_2533.y, x_2533.z, x_2534.w);
        let x_2536 : vec4<f32> = u_xlat10;
        let x_2538 : vec3<f32> = (vec3<f32>(x_2536.x, x_2536.y, x_2536.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2539 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2538.x, x_2538.y, x_2538.z, x_2539.w);
        let x_2541 : vec4<f32> = u_xlat13;
        let x_2543 : vec4<f32> = u_xlat9;
        let x_2545 : vec3<f32> = (vec3<f32>(x_2541.z, x_2541.y, x_2541.w) / vec3<f32>(x_2543.x, x_2543.y, x_2543.z));
        let x_2546 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2545.x, x_2545.y, x_2545.z, x_2546.w);
        let x_2548 : vec4<f32> = u_xlat11;
        let x_2550 : vec3<f32> = (vec3<f32>(x_2548.x, x_2548.y, x_2548.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2551 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2550.x, x_2550.y, x_2550.z, x_2551.w);
        let x_2553 : vec4<f32> = u_xlat10;
        let x_2556 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2558 : vec3<f32> = (vec3<f32>(x_2553.y, x_2553.x, x_2553.z) * vec3<f32>(x_2556.x, x_2556.x, x_2556.x));
        let x_2559 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2558.x, x_2558.y, x_2558.z, x_2559.w);
        let x_2561 : vec4<f32> = u_xlat11;
        let x_2564 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2566 : vec3<f32> = (vec3<f32>(x_2561.x, x_2561.y, x_2561.z) * vec3<f32>(x_2564.y, x_2564.y, x_2564.y));
        let x_2567 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2566.x, x_2566.y, x_2566.z, x_2567.w);
        let x_2570 : f32 = u_xlat11.x;
        u_xlat10.w = x_2570;
        let x_2572 : vec4<f32> = u_xlat8;
        let x_2575 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2578 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2572.x, x_2572.y, x_2572.x, x_2572.y) * vec4<f32>(x_2575.x, x_2575.y, x_2575.x, x_2575.y)) + vec4<f32>(x_2578.y, x_2578.w, x_2578.x, x_2578.w));
        let x_2581 : vec4<f32> = u_xlat8;
        let x_2584 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2587 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2581.x, x_2581.y) * vec2<f32>(x_2584.x, x_2584.y)) + vec2<f32>(x_2587.z, x_2587.w));
        let x_2591 : f32 = u_xlat10.y;
        u_xlat11.w = x_2591;
        let x_2593 : vec4<f32> = u_xlat11;
        let x_2594 : vec2<f32> = vec2<f32>(x_2593.y, x_2593.z);
        let x_2595 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2595.x, x_2594.x, x_2595.z, x_2594.y);
        let x_2597 : vec4<f32> = u_xlat8;
        let x_2600 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2603 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2597.x, x_2597.y, x_2597.x, x_2597.y) * vec4<f32>(x_2600.x, x_2600.y, x_2600.x, x_2600.y)) + vec4<f32>(x_2603.x, x_2603.y, x_2603.z, x_2603.y));
        let x_2606 : vec4<f32> = u_xlat8;
        let x_2609 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2612 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2606.x, x_2606.y, x_2606.x, x_2606.y) * vec4<f32>(x_2609.x, x_2609.y, x_2609.x, x_2609.y)) + vec4<f32>(x_2612.w, x_2612.y, x_2612.w, x_2612.z));
        let x_2615 : vec4<f32> = u_xlat8;
        let x_2618 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2621 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2615.x, x_2615.y, x_2615.x, x_2615.y) * vec4<f32>(x_2618.x, x_2618.y, x_2618.x, x_2618.y)) + vec4<f32>(x_2621.x, x_2621.w, x_2621.z, x_2621.w));
        let x_2624 : vec4<f32> = u_xlat9;
        let x_2626 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2624.x, x_2624.x, x_2624.x, x_2624.y) * vec4<f32>(x_2626.z, x_2626.w, x_2626.y, x_2626.z));
        let x_2629 : vec4<f32> = u_xlat9;
        let x_2631 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2629.y, x_2629.y, x_2629.z, x_2629.z) * x_2631);
        let x_2635 : f32 = u_xlat9.z;
        let x_2637 : f32 = u_xlat14.y;
        u_xlat73 = (x_2635 * x_2637);
        let x_2640 : vec4<f32> = u_xlat12;
        let x_2641 : vec2<f32> = vec2<f32>(x_2640.x, x_2640.y);
        let x_2643 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2641.x, x_2641.y, x_2643);
        let x_2650 : vec3<f32> = txVec34;
        let x_2652 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2650.xy, x_2650.z);
        u_xlat8.x = x_2652;
        let x_2655 : vec4<f32> = u_xlat12;
        let x_2656 : vec2<f32> = vec2<f32>(x_2655.z, x_2655.w);
        let x_2658 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2656.x, x_2656.y, x_2658);
        let x_2665 : vec3<f32> = txVec35;
        let x_2667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2665.xy, x_2665.z);
        u_xlat30.x = x_2667;
        let x_2670 : f32 = u_xlat30.x;
        let x_2672 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2670 * x_2672);
        let x_2676 : f32 = u_xlat15.x;
        let x_2678 : f32 = u_xlat8.x;
        let x_2681 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2676 * x_2678) + x_2681);
        let x_2685 : vec2<f32> = u_xlat52;
        let x_2687 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2685.x, x_2685.y, x_2687);
        let x_2694 : vec3<f32> = txVec36;
        let x_2696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2694.xy, x_2694.z);
        u_xlat30.x = x_2696;
        let x_2699 : f32 = u_xlat15.z;
        let x_2701 : f32 = u_xlat30.x;
        let x_2704 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2699 * x_2701) + x_2704);
        let x_2708 : vec4<f32> = u_xlat11;
        let x_2709 : vec2<f32> = vec2<f32>(x_2708.x, x_2708.y);
        let x_2711 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2709.x, x_2709.y, x_2711);
        let x_2718 : vec3<f32> = txVec37;
        let x_2720 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2718.xy, x_2718.z);
        u_xlat30.x = x_2720;
        let x_2723 : f32 = u_xlat15.w;
        let x_2725 : f32 = u_xlat30.x;
        let x_2728 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2723 * x_2725) + x_2728);
        let x_2732 : vec4<f32> = u_xlat13;
        let x_2733 : vec2<f32> = vec2<f32>(x_2732.x, x_2732.y);
        let x_2735 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2733.x, x_2733.y, x_2735);
        let x_2742 : vec3<f32> = txVec38;
        let x_2744 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2742.xy, x_2742.z);
        u_xlat30.x = x_2744;
        let x_2747 : f32 = u_xlat16.x;
        let x_2749 : f32 = u_xlat30.x;
        let x_2752 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2747 * x_2749) + x_2752);
        let x_2756 : vec4<f32> = u_xlat13;
        let x_2757 : vec2<f32> = vec2<f32>(x_2756.z, x_2756.w);
        let x_2759 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2757.x, x_2757.y, x_2759);
        let x_2766 : vec3<f32> = txVec39;
        let x_2768 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2766.xy, x_2766.z);
        u_xlat30.x = x_2768;
        let x_2771 : f32 = u_xlat16.y;
        let x_2773 : f32 = u_xlat30.x;
        let x_2776 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2771 * x_2773) + x_2776);
        let x_2780 : vec4<f32> = u_xlat11;
        let x_2781 : vec2<f32> = vec2<f32>(x_2780.z, x_2780.w);
        let x_2783 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2781.x, x_2781.y, x_2783);
        let x_2790 : vec3<f32> = txVec40;
        let x_2792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2790.xy, x_2790.z);
        u_xlat30.x = x_2792;
        let x_2795 : f32 = u_xlat16.z;
        let x_2797 : f32 = u_xlat30.x;
        let x_2800 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2795 * x_2797) + x_2800);
        let x_2804 : vec4<f32> = u_xlat10;
        let x_2805 : vec2<f32> = vec2<f32>(x_2804.x, x_2804.y);
        let x_2807 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2805.x, x_2805.y, x_2807);
        let x_2814 : vec3<f32> = txVec41;
        let x_2816 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2814.xy, x_2814.z);
        u_xlat30.x = x_2816;
        let x_2819 : f32 = u_xlat16.w;
        let x_2821 : f32 = u_xlat30.x;
        let x_2824 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2819 * x_2821) + x_2824);
        let x_2828 : vec4<f32> = u_xlat10;
        let x_2829 : vec2<f32> = vec2<f32>(x_2828.z, x_2828.w);
        let x_2831 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2829.x, x_2829.y, x_2831);
        let x_2838 : vec3<f32> = txVec42;
        let x_2840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2838.xy, x_2838.z);
        u_xlat30.x = x_2840;
        let x_2842 : f32 = u_xlat73;
        let x_2844 : f32 = u_xlat30.x;
        let x_2847 : f32 = u_xlat8.x;
        u_xlat0.x = ((x_2842 * x_2844) + x_2847);
      } else {
        let x_2851 : vec4<f32> = u_xlat2;
        let x_2854 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2857 : vec2<f32> = ((vec2<f32>(x_2851.x, x_2851.y) * vec2<f32>(x_2854.z, x_2854.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2858 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2857.x, x_2857.y, x_2858.z, x_2858.w);
        let x_2860 : vec4<f32> = u_xlat8;
        let x_2862 : vec2<f32> = floor(vec2<f32>(x_2860.x, x_2860.y));
        let x_2863 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2862.x, x_2862.y, x_2863.z, x_2863.w);
        let x_2865 : vec4<f32> = u_xlat2;
        let x_2868 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_2871 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2865.x, x_2865.y) * vec2<f32>(x_2868.z, x_2868.w)) + -(vec2<f32>(x_2871.x, x_2871.y)));
        let x_2875 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2875.x, x_2875.x, x_2875.y, x_2875.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2878 : vec4<f32> = u_xlat9;
        let x_2880 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2878.x, x_2878.x, x_2878.z, x_2878.z) * vec4<f32>(x_2880.x, x_2880.x, x_2880.z, x_2880.z));
        let x_2883 : vec4<f32> = u_xlat10;
        let x_2885 : vec2<f32> = (vec2<f32>(x_2883.y, x_2883.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2886 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2886.x, x_2885.x, x_2886.z, x_2885.y);
        let x_2888 : vec4<f32> = u_xlat10;
        let x_2891 : vec2<f32> = u_xlat52;
        let x_2893 : vec2<f32> = ((vec2<f32>(x_2888.x, x_2888.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2891));
        let x_2894 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2893.x, x_2894.y, x_2893.y, x_2894.w);
        let x_2896 : vec2<f32> = u_xlat52;
        let x_2898 : vec2<f32> = (-(x_2896) + vec2<f32>(1.0f, 1.0f));
        let x_2899 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2898.x, x_2898.y, x_2899.z, x_2899.w);
        let x_2901 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2901, vec2<f32>(0.0f, 0.0f));
        let x_2903 : vec2<f32> = u_xlat54;
        let x_2905 : vec2<f32> = u_xlat54;
        let x_2907 : vec4<f32> = u_xlat10;
        let x_2909 : vec2<f32> = ((-(x_2903) * x_2905) + vec2<f32>(x_2907.x, x_2907.y));
        let x_2910 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2909.x, x_2909.y, x_2910.z, x_2910.w);
        let x_2912 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2912, vec2<f32>(0.0f, 0.0f));
        let x_2914 : vec2<f32> = u_xlat54;
        let x_2916 : vec2<f32> = u_xlat54;
        let x_2918 : vec4<f32> = u_xlat9;
        let x_2920 : vec2<f32> = ((-(x_2914) * x_2916) + vec2<f32>(x_2918.y, x_2918.w));
        let x_2921 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2920.x, x_2921.y, x_2920.y);
        let x_2923 : vec4<f32> = u_xlat10;
        let x_2925 : vec2<f32> = (vec2<f32>(x_2923.x, x_2923.y) + vec2<f32>(2.0f, 2.0f));
        let x_2926 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2925.x, x_2925.y, x_2926.z, x_2926.w);
        let x_2928 : vec3<f32> = u_xlat31;
        let x_2930 : vec2<f32> = (vec2<f32>(x_2928.x, x_2928.z) + vec2<f32>(2.0f, 2.0f));
        let x_2931 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2931.x, x_2930.x, x_2931.z, x_2930.y);
        let x_2934 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2934 * 0.081632003f);
        let x_2937 : vec4<f32> = u_xlat9;
        let x_2939 : vec3<f32> = (vec3<f32>(x_2937.z, x_2937.x, x_2937.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2940 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2939.x, x_2939.y, x_2939.z, x_2940.w);
        let x_2942 : vec4<f32> = u_xlat10;
        let x_2944 : vec2<f32> = (vec2<f32>(x_2942.x, x_2942.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2945 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2944.x, x_2944.y, x_2945.z, x_2945.w);
        let x_2948 : f32 = u_xlat13.y;
        u_xlat12.x = x_2948;
        let x_2950 : vec2<f32> = u_xlat52;
        let x_2953 : vec2<f32> = ((vec2<f32>(x_2950.x, x_2950.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2954 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2954.x, x_2953.x, x_2954.z, x_2953.y);
        let x_2956 : vec2<f32> = u_xlat52;
        let x_2959 : vec2<f32> = ((vec2<f32>(x_2956.x, x_2956.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2960 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2959.x, x_2960.y, x_2959.y, x_2960.w);
        let x_2963 : f32 = u_xlat9.x;
        u_xlat10.y = x_2963;
        let x_2966 : f32 = u_xlat11.y;
        u_xlat10.w = x_2966;
        let x_2968 : vec4<f32> = u_xlat10;
        let x_2969 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2968 + x_2969);
        let x_2971 : vec2<f32> = u_xlat52;
        let x_2974 : vec2<f32> = ((vec2<f32>(x_2971.y, x_2971.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2975 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2975.x, x_2974.x, x_2975.z, x_2974.y);
        let x_2977 : vec2<f32> = u_xlat52;
        let x_2980 : vec2<f32> = ((vec2<f32>(x_2977.y, x_2977.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2981 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2980.x, x_2981.y, x_2980.y, x_2981.w);
        let x_2984 : f32 = u_xlat9.y;
        u_xlat11.y = x_2984;
        let x_2986 : vec4<f32> = u_xlat11;
        let x_2987 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2986 + x_2987);
        let x_2989 : vec4<f32> = u_xlat10;
        let x_2990 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2989 / x_2990);
        let x_2992 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2992 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2994 : vec4<f32> = u_xlat11;
        let x_2995 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2994 / x_2995);
        let x_2997 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2997 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2999 : vec4<f32> = u_xlat10;
        let x_3002 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2999.w, x_2999.x, x_2999.y, x_2999.z) * vec4<f32>(x_3002.x, x_3002.x, x_3002.x, x_3002.x));
        let x_3005 : vec4<f32> = u_xlat11;
        let x_3008 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_3005.x, x_3005.w, x_3005.y, x_3005.z) * vec4<f32>(x_3008.y, x_3008.y, x_3008.y, x_3008.y));
        let x_3011 : vec4<f32> = u_xlat10;
        let x_3012 : vec3<f32> = vec3<f32>(x_3011.y, x_3011.z, x_3011.w);
        let x_3013 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_3012.x, x_3013.y, x_3012.y, x_3012.z);
        let x_3016 : f32 = u_xlat11.x;
        u_xlat13.y = x_3016;
        let x_3018 : vec4<f32> = u_xlat8;
        let x_3021 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3024 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_3018.x, x_3018.y, x_3018.x, x_3018.y) * vec4<f32>(x_3021.x, x_3021.y, x_3021.x, x_3021.y)) + vec4<f32>(x_3024.x, x_3024.y, x_3024.z, x_3024.y));
        let x_3027 : vec4<f32> = u_xlat8;
        let x_3030 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3033 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_3027.x, x_3027.y) * vec2<f32>(x_3030.x, x_3030.y)) + vec2<f32>(x_3033.w, x_3033.y));
        let x_3037 : f32 = u_xlat13.y;
        u_xlat10.y = x_3037;
        let x_3040 : f32 = u_xlat11.z;
        u_xlat13.y = x_3040;
        let x_3042 : vec4<f32> = u_xlat8;
        let x_3045 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3048 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_3042.x, x_3042.y, x_3042.x, x_3042.y) * vec4<f32>(x_3045.x, x_3045.y, x_3045.x, x_3045.y)) + vec4<f32>(x_3048.x, x_3048.y, x_3048.z, x_3048.y));
        let x_3051 : vec4<f32> = u_xlat8;
        let x_3054 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3057 : vec4<f32> = u_xlat13;
        let x_3059 : vec2<f32> = ((vec2<f32>(x_3051.x, x_3051.y) * vec2<f32>(x_3054.x, x_3054.y)) + vec2<f32>(x_3057.w, x_3057.y));
        let x_3060 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3059.x, x_3059.y, x_3060.z, x_3060.w);
        let x_3063 : f32 = u_xlat13.y;
        u_xlat10.z = x_3063;
        let x_3065 : vec4<f32> = u_xlat8;
        let x_3068 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3071 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3065.x, x_3065.y, x_3065.x, x_3065.y) * vec4<f32>(x_3068.x, x_3068.y, x_3068.x, x_3068.y)) + vec4<f32>(x_3071.x, x_3071.y, x_3071.x, x_3071.z));
        let x_3075 : f32 = u_xlat11.w;
        u_xlat13.y = x_3075;
        let x_3077 : vec4<f32> = u_xlat8;
        let x_3080 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3083 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3077.x, x_3077.y, x_3077.x, x_3077.y) * vec4<f32>(x_3080.x, x_3080.y, x_3080.x, x_3080.y)) + vec4<f32>(x_3083.x, x_3083.y, x_3083.z, x_3083.y));
        let x_3086 : vec4<f32> = u_xlat8;
        let x_3089 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3092 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3086.x, x_3086.y) * vec2<f32>(x_3089.x, x_3089.y)) + vec2<f32>(x_3092.w, x_3092.y));
        let x_3096 : f32 = u_xlat13.y;
        u_xlat10.w = x_3096;
        let x_3098 : vec4<f32> = u_xlat8;
        let x_3101 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3104 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3098.x, x_3098.y) * vec2<f32>(x_3101.x, x_3101.y)) + vec2<f32>(x_3104.x, x_3104.w));
        let x_3107 : vec4<f32> = u_xlat13;
        let x_3108 : vec3<f32> = vec3<f32>(x_3107.x, x_3107.z, x_3107.w);
        let x_3109 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3108.x, x_3109.y, x_3108.y, x_3108.z);
        let x_3111 : vec4<f32> = u_xlat8;
        let x_3114 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3117 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3111.x, x_3111.y, x_3111.x, x_3111.y) * vec4<f32>(x_3114.x, x_3114.y, x_3114.x, x_3114.y)) + vec4<f32>(x_3117.x, x_3117.y, x_3117.z, x_3117.y));
        let x_3120 : vec4<f32> = u_xlat8;
        let x_3123 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3126 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3120.x, x_3120.y) * vec2<f32>(x_3123.x, x_3123.y)) + vec2<f32>(x_3126.w, x_3126.y));
        let x_3130 : f32 = u_xlat10.x;
        u_xlat11.x = x_3130;
        let x_3132 : vec4<f32> = u_xlat8;
        let x_3135 : vec4<f32> = x_379.x_MainLightShadowmapSize;
        let x_3138 : vec4<f32> = u_xlat11;
        let x_3140 : vec2<f32> = ((vec2<f32>(x_3132.x, x_3132.y) * vec2<f32>(x_3135.x, x_3135.y)) + vec2<f32>(x_3138.x, x_3138.y));
        let x_3141 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3140.x, x_3140.y, x_3141.z, x_3141.w);
        let x_3143 : vec4<f32> = u_xlat9;
        let x_3145 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3143.x, x_3143.x, x_3143.x, x_3143.x) * x_3145);
        let x_3147 : vec4<f32> = u_xlat9;
        let x_3149 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3147.y, x_3147.y, x_3147.y, x_3147.y) * x_3149);
        let x_3151 : vec4<f32> = u_xlat9;
        let x_3153 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3151.z, x_3151.z, x_3151.z, x_3151.z) * x_3153);
        let x_3155 : vec4<f32> = u_xlat9;
        let x_3157 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3155.w, x_3155.w, x_3155.w, x_3155.w) * x_3157);
        let x_3160 : vec4<f32> = u_xlat14;
        let x_3161 : vec2<f32> = vec2<f32>(x_3160.x, x_3160.y);
        let x_3163 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3161.x, x_3161.y, x_3163);
        let x_3170 : vec3<f32> = txVec43;
        let x_3172 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3170.xy, x_3170.z);
        u_xlat73 = x_3172;
        let x_3174 : vec4<f32> = u_xlat14;
        let x_3175 : vec2<f32> = vec2<f32>(x_3174.z, x_3174.w);
        let x_3177 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3175.x, x_3175.y, x_3177);
        let x_3184 : vec3<f32> = txVec44;
        let x_3186 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3184.xy, x_3184.z);
        u_xlat10.x = x_3186;
        let x_3189 : f32 = u_xlat10.x;
        let x_3191 : f32 = u_xlat19.y;
        u_xlat10.x = (x_3189 * x_3191);
        let x_3195 : f32 = u_xlat19.x;
        let x_3196 : f32 = u_xlat73;
        let x_3199 : f32 = u_xlat10.x;
        u_xlat73 = ((x_3195 * x_3196) + x_3199);
        let x_3202 : vec2<f32> = u_xlat52;
        let x_3204 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3202.x, x_3202.y, x_3204);
        let x_3211 : vec3<f32> = txVec45;
        let x_3213 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3211.xy, x_3211.z);
        u_xlat52.x = x_3213;
        let x_3216 : f32 = u_xlat19.z;
        let x_3218 : f32 = u_xlat52.x;
        let x_3220 : f32 = u_xlat73;
        u_xlat73 = ((x_3216 * x_3218) + x_3220);
        let x_3223 : vec4<f32> = u_xlat17;
        let x_3224 : vec2<f32> = vec2<f32>(x_3223.x, x_3223.y);
        let x_3226 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3224.x, x_3224.y, x_3226);
        let x_3233 : vec3<f32> = txVec46;
        let x_3235 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3233.xy, x_3233.z);
        u_xlat52.x = x_3235;
        let x_3238 : f32 = u_xlat19.w;
        let x_3240 : f32 = u_xlat52.x;
        let x_3242 : f32 = u_xlat73;
        u_xlat73 = ((x_3238 * x_3240) + x_3242);
        let x_3245 : vec4<f32> = u_xlat15;
        let x_3246 : vec2<f32> = vec2<f32>(x_3245.x, x_3245.y);
        let x_3248 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3246.x, x_3246.y, x_3248);
        let x_3255 : vec3<f32> = txVec47;
        let x_3257 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3255.xy, x_3255.z);
        u_xlat52.x = x_3257;
        let x_3260 : f32 = u_xlat20.x;
        let x_3262 : f32 = u_xlat52.x;
        let x_3264 : f32 = u_xlat73;
        u_xlat73 = ((x_3260 * x_3262) + x_3264);
        let x_3267 : vec4<f32> = u_xlat15;
        let x_3268 : vec2<f32> = vec2<f32>(x_3267.z, x_3267.w);
        let x_3270 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3268.x, x_3268.y, x_3270);
        let x_3277 : vec3<f32> = txVec48;
        let x_3279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3277.xy, x_3277.z);
        u_xlat52.x = x_3279;
        let x_3282 : f32 = u_xlat20.y;
        let x_3284 : f32 = u_xlat52.x;
        let x_3286 : f32 = u_xlat73;
        u_xlat73 = ((x_3282 * x_3284) + x_3286);
        let x_3289 : vec4<f32> = u_xlat16;
        let x_3290 : vec2<f32> = vec2<f32>(x_3289.x, x_3289.y);
        let x_3292 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3290.x, x_3290.y, x_3292);
        let x_3299 : vec3<f32> = txVec49;
        let x_3301 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3299.xy, x_3299.z);
        u_xlat52.x = x_3301;
        let x_3304 : f32 = u_xlat20.z;
        let x_3306 : f32 = u_xlat52.x;
        let x_3308 : f32 = u_xlat73;
        u_xlat73 = ((x_3304 * x_3306) + x_3308);
        let x_3311 : vec4<f32> = u_xlat17;
        let x_3312 : vec2<f32> = vec2<f32>(x_3311.z, x_3311.w);
        let x_3314 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3312.x, x_3312.y, x_3314);
        let x_3321 : vec3<f32> = txVec50;
        let x_3323 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3321.xy, x_3321.z);
        u_xlat52.x = x_3323;
        let x_3326 : f32 = u_xlat20.w;
        let x_3328 : f32 = u_xlat52.x;
        let x_3330 : f32 = u_xlat73;
        u_xlat73 = ((x_3326 * x_3328) + x_3330);
        let x_3333 : vec4<f32> = u_xlat18;
        let x_3334 : vec2<f32> = vec2<f32>(x_3333.x, x_3333.y);
        let x_3336 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3334.x, x_3334.y, x_3336);
        let x_3343 : vec3<f32> = txVec51;
        let x_3345 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3343.xy, x_3343.z);
        u_xlat52.x = x_3345;
        let x_3348 : f32 = u_xlat21.x;
        let x_3350 : f32 = u_xlat52.x;
        let x_3352 : f32 = u_xlat73;
        u_xlat73 = ((x_3348 * x_3350) + x_3352);
        let x_3355 : vec4<f32> = u_xlat18;
        let x_3356 : vec2<f32> = vec2<f32>(x_3355.z, x_3355.w);
        let x_3358 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3356.x, x_3356.y, x_3358);
        let x_3365 : vec3<f32> = txVec52;
        let x_3367 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3365.xy, x_3365.z);
        u_xlat52.x = x_3367;
        let x_3370 : f32 = u_xlat21.y;
        let x_3372 : f32 = u_xlat52.x;
        let x_3374 : f32 = u_xlat73;
        u_xlat73 = ((x_3370 * x_3372) + x_3374);
        let x_3377 : vec2<f32> = u_xlat32;
        let x_3379 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3377.x, x_3377.y, x_3379);
        let x_3386 : vec3<f32> = txVec53;
        let x_3388 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3386.xy, x_3386.z);
        u_xlat52.x = x_3388;
        let x_3391 : f32 = u_xlat21.z;
        let x_3393 : f32 = u_xlat52.x;
        let x_3395 : f32 = u_xlat73;
        u_xlat73 = ((x_3391 * x_3393) + x_3395);
        let x_3398 : vec2<f32> = u_xlat60;
        let x_3400 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3398.x, x_3398.y, x_3400);
        let x_3407 : vec3<f32> = txVec54;
        let x_3409 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3407.xy, x_3407.z);
        u_xlat52.x = x_3409;
        let x_3412 : f32 = u_xlat21.w;
        let x_3414 : f32 = u_xlat52.x;
        let x_3416 : f32 = u_xlat73;
        u_xlat73 = ((x_3412 * x_3414) + x_3416);
        let x_3419 : vec4<f32> = u_xlat13;
        let x_3420 : vec2<f32> = vec2<f32>(x_3419.x, x_3419.y);
        let x_3422 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3420.x, x_3420.y, x_3422);
        let x_3429 : vec3<f32> = txVec55;
        let x_3431 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3429.xy, x_3429.z);
        u_xlat52.x = x_3431;
        let x_3434 : f32 = u_xlat9.x;
        let x_3436 : f32 = u_xlat52.x;
        let x_3438 : f32 = u_xlat73;
        u_xlat73 = ((x_3434 * x_3436) + x_3438);
        let x_3441 : vec4<f32> = u_xlat13;
        let x_3442 : vec2<f32> = vec2<f32>(x_3441.z, x_3441.w);
        let x_3444 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3442.x, x_3442.y, x_3444);
        let x_3451 : vec3<f32> = txVec56;
        let x_3453 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3451.xy, x_3451.z);
        u_xlat52.x = x_3453;
        let x_3456 : f32 = u_xlat9.y;
        let x_3458 : f32 = u_xlat52.x;
        let x_3460 : f32 = u_xlat73;
        u_xlat73 = ((x_3456 * x_3458) + x_3460);
        let x_3463 : vec2<f32> = u_xlat55;
        let x_3465 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3463.x, x_3463.y, x_3465);
        let x_3472 : vec3<f32> = txVec57;
        let x_3474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3472.xy, x_3472.z);
        u_xlat52.x = x_3474;
        let x_3477 : f32 = u_xlat9.z;
        let x_3479 : f32 = u_xlat52.x;
        let x_3481 : f32 = u_xlat73;
        u_xlat73 = ((x_3477 * x_3479) + x_3481);
        let x_3484 : vec4<f32> = u_xlat8;
        let x_3485 : vec2<f32> = vec2<f32>(x_3484.x, x_3484.y);
        let x_3487 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3485.x, x_3485.y, x_3487);
        let x_3494 : vec3<f32> = txVec58;
        let x_3496 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3494.xy, x_3494.z);
        u_xlat8.x = x_3496;
        let x_3499 : f32 = u_xlat9.w;
        let x_3501 : f32 = u_xlat8.x;
        let x_3503 : f32 = u_xlat73;
        u_xlat0.x = ((x_3499 * x_3501) + x_3503);
      }
    }
  } else {
    let x_3508 : vec4<f32> = u_xlat2;
    let x_3509 : vec2<f32> = vec2<f32>(x_3508.x, x_3508.y);
    let x_3511 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3509.x, x_3509.y, x_3511);
    let x_3518 : vec3<f32> = txVec59;
    let x_3520 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3518.xy, x_3518.z);
    u_xlat0.x = x_3520;
  }
  let x_3523 : f32 = u_xlat0.x;
  let x_3525 : f32 = x_379.x_MainLightShadowParams.x;
  let x_3527 : f32 = u_xlat68;
  u_xlat0.x = ((x_3523 * x_3525) + x_3527);
  let x_3530 : bool = u_xlatb3;
  if (x_3530) {
    x_3531 = 1.0f;
  } else {
    let x_3536 : f32 = u_xlat0.x;
    x_3531 = x_3536;
  }
  let x_3537 : f32 = x_3531;
  u_xlat0.x = x_3537;
  let x_3539 : vec3<f32> = vs_INTERP0;
  let x_3541 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3543 : vec3<f32> = (x_3539 + -(x_3541));
  let x_3544 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3543.x, x_3543.y, x_3543.z, x_3544.w);
  let x_3546 : vec4<f32> = u_xlat2;
  let x_3548 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3546.x, x_3546.y, x_3546.z), vec3<f32>(x_3548.x, x_3548.y, x_3548.z));
  let x_3553 : f32 = u_xlat2.x;
  let x_3555 : f32 = x_379.x_MainLightShadowParams.z;
  let x_3558 : f32 = x_379.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3553 * x_3555) + x_3558);
  let x_3562 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3562, 0.0f, 1.0f);
  let x_3567 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3567) + 1.0f);
  let x_3571 : f32 = u_xlat2.x;
  let x_3572 : f32 = u_xlat24;
  let x_3575 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3571 * x_3572) + x_3575);
  let x_3578 : f32 = u_xlat50;
  let x_3581 : vec4<f32> = x_160.x_MainLightColor;
  let x_3583 : vec3<f32> = (vec3<f32>(x_3578, x_3578, x_3578) * vec3<f32>(x_3581.x, x_3581.y, x_3581.z));
  let x_3584 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3583.x, x_3583.y, x_3583.z, x_3584.w);
  let x_3586 : vec3<f32> = u_xlat4;
  let x_3588 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(x_3586), x_3588);
  let x_3590 : f32 = u_xlat68;
  let x_3591 : f32 = u_xlat68;
  u_xlat68 = (x_3590 + x_3591);
  let x_3593 : vec3<f32> = u_xlat22;
  let x_3594 : f32 = u_xlat68;
  let x_3598 : vec3<f32> = u_xlat4;
  let x_3600 : vec3<f32> = ((x_3593 * -(vec3<f32>(x_3594, x_3594, x_3594))) + -(x_3598));
  let x_3601 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3600.x, x_3600.y, x_3600.z, x_3601.w);
  let x_3603 : vec3<f32> = u_xlat22;
  let x_3604 : vec3<f32> = u_xlat4;
  u_xlat68 = dot(x_3603, x_3604);
  let x_3606 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3606, 0.0f, 1.0f);
  let x_3608 : f32 = u_xlat68;
  u_xlat68 = (-(x_3608) + 1.0f);
  let x_3611 : f32 = u_xlat68;
  let x_3612 : f32 = u_xlat68;
  u_xlat68 = (x_3611 * x_3612);
  let x_3614 : f32 = u_xlat68;
  let x_3615 : f32 = u_xlat68;
  u_xlat68 = (x_3614 * x_3615);
  let x_3617 : f32 = u_xlat69;
  u_xlat3.x = ((-(x_3617) * 0.699999988f) + 1.700000048f);
  let x_3625 : f32 = u_xlat3.x;
  let x_3626 : f32 = u_xlat69;
  u_xlat3.x = (x_3625 * x_3626);
  let x_3630 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3630 * 6.0f);
  let x_3642 : vec4<f32> = u_xlat8;
  let x_3645 : f32 = u_xlat3.x;
  let x_3646 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3642.x, x_3642.y, x_3642.z), x_3645);
  u_xlat8 = x_3646;
  let x_3648 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3648 + -1.0f);
  let x_3652 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3654 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3652 * x_3654) + 1.0f);
  let x_3659 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3659, 0.0f);
  let x_3663 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3663);
  let x_3667 : f32 = u_xlat3.x;
  let x_3669 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3667 * x_3669);
  let x_3673 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3673);
  let x_3677 : f32 = u_xlat3.x;
  let x_3679 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3677 * x_3679);
  let x_3682 : vec4<f32> = u_xlat8;
  let x_3684 : vec4<f32> = u_xlat3;
  let x_3686 : vec3<f32> = (vec3<f32>(x_3682.x, x_3682.y, x_3682.z) * vec3<f32>(x_3684.x, x_3684.x, x_3684.x));
  let x_3687 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3686.x, x_3686.y, x_3686.z, x_3687.w);
  let x_3689 : f32 = u_xlat70;
  let x_3691 : f32 = u_xlat70;
  let x_3695 : vec2<f32> = ((vec2<f32>(x_3689, x_3689) * vec2<f32>(x_3691, x_3691)) + vec2<f32>(-1.0f, 1.0f));
  let x_3696 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3695.x, x_3696.y, x_3696.z, x_3695.y);
  let x_3699 : f32 = u_xlat3.w;
  u_xlat69 = (1.0f / x_3699);
  let x_3701 : f32 = u_xlat28;
  u_xlat70 = (x_3701 + -0.039999999f);
  let x_3704 : f32 = u_xlat68;
  let x_3705 : f32 = u_xlat70;
  u_xlat68 = ((x_3704 * x_3705) + 0.039999999f);
  let x_3709 : f32 = u_xlat68;
  let x_3710 : f32 = u_xlat69;
  u_xlat68 = (x_3709 * x_3710);
  let x_3712 : f32 = u_xlat68;
  let x_3714 : vec4<f32> = u_xlat8;
  let x_3716 : vec3<f32> = (vec3<f32>(x_3712, x_3712, x_3712) * vec3<f32>(x_3714.x, x_3714.y, x_3714.z));
  let x_3717 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3716.x, x_3716.y, x_3716.z, x_3717.w);
  let x_3719 : vec4<f32> = u_xlat5;
  let x_3721 : vec3<f32> = u_xlat7;
  let x_3723 : vec4<f32> = u_xlat8;
  let x_3725 : vec3<f32> = ((vec3<f32>(x_3719.x, x_3719.y, x_3719.z) * x_3721) + vec3<f32>(x_3723.x, x_3723.y, x_3723.z));
  let x_3726 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3725.x, x_3725.y, x_3725.z, x_3726.w);
  let x_3729 : f32 = u_xlat0.x;
  let x_3731 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3729 * x_3731);
  let x_3734 : vec3<f32> = u_xlat22;
  let x_3736 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(x_3734, vec3<f32>(x_3736.x, x_3736.y, x_3736.z));
  let x_3739 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3739, 0.0f, 1.0f);
  let x_3742 : f32 = u_xlat0.x;
  let x_3743 : f32 = u_xlat68;
  u_xlat0.x = (x_3742 * x_3743);
  let x_3746 : vec3<f32> = u_xlat0;
  let x_3748 : vec4<f32> = u_xlat2;
  let x_3750 : vec3<f32> = (vec3<f32>(x_3746.x, x_3746.x, x_3746.x) * vec3<f32>(x_3748.x, x_3748.y, x_3748.z));
  let x_3751 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3750.x, x_3750.y, x_3750.z, x_3751.w);
  let x_3753 : vec3<f32> = u_xlat4;
  let x_3755 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3757 : vec3<f32> = (x_3753 + vec3<f32>(x_3755.x, x_3755.y, x_3755.z));
  let x_3758 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3757.x, x_3757.y, x_3757.z, x_3758.w);
  let x_3760 : vec4<f32> = u_xlat8;
  let x_3762 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3760.x, x_3760.y, x_3760.z), vec3<f32>(x_3762.x, x_3762.y, x_3762.z));
  let x_3767 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3767, 1.17549435e-37f);
  let x_3771 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3771);
  let x_3774 : vec3<f32> = u_xlat0;
  let x_3776 : vec4<f32> = u_xlat8;
  let x_3778 : vec3<f32> = (vec3<f32>(x_3774.x, x_3774.x, x_3774.x) * vec3<f32>(x_3776.x, x_3776.y, x_3776.z));
  let x_3779 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3778.x, x_3778.y, x_3778.z, x_3779.w);
  let x_3781 : vec3<f32> = u_xlat22;
  let x_3782 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3781, vec3<f32>(x_3782.x, x_3782.y, x_3782.z));
  let x_3787 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3787, 0.0f, 1.0f);
  let x_3791 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3793 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3791.x, x_3791.y, x_3791.z), vec3<f32>(x_3793.x, x_3793.y, x_3793.z));
  let x_3796 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3796, 0.0f, 1.0f);
  let x_3799 : f32 = u_xlat0.x;
  let x_3801 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3799 * x_3801);
  let x_3805 : f32 = u_xlat0.x;
  let x_3807 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3805 * x_3807) + 1.000010014f);
  let x_3812 : f32 = u_xlat68;
  let x_3813 : f32 = u_xlat68;
  u_xlat68 = (x_3812 * x_3813);
  let x_3816 : f32 = u_xlat0.x;
  let x_3818 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3816 * x_3818);
  let x_3821 : f32 = u_xlat68;
  u_xlat68 = max(x_3821, 0.100000001f);
  let x_3825 : f32 = u_xlat0.x;
  let x_3826 : f32 = u_xlat68;
  u_xlat0.x = (x_3825 * x_3826);
  let x_3829 : f32 = u_xlat72;
  let x_3831 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3829 * x_3831);
  let x_3834 : f32 = u_xlat71;
  let x_3836 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3834 / x_3836);
  let x_3839 : vec3<f32> = u_xlat0;
  let x_3843 : vec3<f32> = u_xlat7;
  let x_3844 : vec3<f32> = ((vec3<f32>(x_3839.x, x_3839.x, x_3839.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3843);
  let x_3845 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3844.x, x_3844.y, x_3844.z, x_3845.w);
  let x_3847 : vec4<f32> = u_xlat2;
  let x_3849 : vec4<f32> = u_xlat8;
  let x_3851 : vec3<f32> = (vec3<f32>(x_3847.x, x_3847.y, x_3847.z) * vec3<f32>(x_3849.x, x_3849.y, x_3849.z));
  let x_3852 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3851.x, x_3851.y, x_3851.z, x_3852.w);
  let x_3855 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3857 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3855, x_3857);
  let x_3861 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3861));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3873 : u32 = u_xlatu_loop_1;
    let x_3874 : u32 = u_xlatu0;
    if ((x_3873 < x_3874)) {
    } else {
      break;
    }
    let x_3876 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_3876 >> 2u);
    let x_3879 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3879 & 3u));
    let x_3882 : u32 = u_xlatu69;
    let x_3885 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3882)];
    let x_3895 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3900 : vec4<u32> = indexable[x_3895];
    u_xlat69 = dot(x_3885, bitcast<vec4<f32>>(x_3900));
    let x_3904 : f32 = u_xlat69;
    u_xlati69 = i32(x_3904);
    let x_3906 : vec3<f32> = vs_INTERP0;
    let x_3918 : i32 = u_xlati69;
    let x_3920 : vec4<f32> = x_3917.x_AdditionalLightsPosition[x_3918];
    let x_3923 : i32 = u_xlati69;
    let x_3925 : vec4<f32> = x_3917.x_AdditionalLightsPosition[x_3923];
    let x_3927 : vec3<f32> = ((-(x_3906) * vec3<f32>(x_3920.w, x_3920.w, x_3920.w)) + vec3<f32>(x_3925.x, x_3925.y, x_3925.z));
    let x_3928 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3927.x, x_3927.y, x_3927.z, x_3928.w);
    let x_3930 : vec4<f32> = u_xlat9;
    let x_3932 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3930.x, x_3930.y, x_3930.z), vec3<f32>(x_3932.x, x_3932.y, x_3932.z));
    let x_3935 : f32 = u_xlat70;
    u_xlat70 = max(x_3935, 6.10351562e-05f);
    let x_3938 : f32 = u_xlat70;
    u_xlat28 = inverseSqrt(x_3938);
    let x_3940 : f32 = u_xlat28;
    let x_3942 : vec4<f32> = u_xlat9;
    let x_3944 : vec3<f32> = (vec3<f32>(x_3940, x_3940, x_3940) * vec3<f32>(x_3942.x, x_3942.y, x_3942.z));
    let x_3945 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3944.x, x_3944.y, x_3944.z, x_3945.w);
    let x_3947 : f32 = u_xlat70;
    u_xlat73 = (1.0f / x_3947);
    let x_3949 : f32 = u_xlat70;
    let x_3950 : i32 = u_xlati69;
    let x_3952 : f32 = x_3917.x_AdditionalLightsAttenuation[x_3950].x;
    u_xlat70 = (x_3949 * x_3952);
    let x_3954 : f32 = u_xlat70;
    let x_3956 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3954) * x_3956) + 1.0f);
    let x_3959 : f32 = u_xlat70;
    u_xlat70 = max(x_3959, 0.0f);
    let x_3961 : f32 = u_xlat70;
    let x_3962 : f32 = u_xlat70;
    u_xlat70 = (x_3961 * x_3962);
    let x_3964 : f32 = u_xlat70;
    let x_3965 : f32 = u_xlat73;
    u_xlat70 = (x_3964 * x_3965);
    let x_3967 : i32 = u_xlati69;
    let x_3969 : vec4<f32> = x_3917.x_AdditionalLightsSpotDir[x_3967];
    let x_3971 : vec4<f32> = u_xlat10;
    u_xlat73 = dot(vec3<f32>(x_3969.x, x_3969.y, x_3969.z), vec3<f32>(x_3971.x, x_3971.y, x_3971.z));
    let x_3974 : f32 = u_xlat73;
    let x_3975 : i32 = u_xlati69;
    let x_3977 : f32 = x_3917.x_AdditionalLightsAttenuation[x_3975].z;
    let x_3979 : i32 = u_xlati69;
    let x_3981 : f32 = x_3917.x_AdditionalLightsAttenuation[x_3979].w;
    u_xlat73 = ((x_3974 * x_3977) + x_3981);
    let x_3983 : f32 = u_xlat73;
    u_xlat73 = clamp(x_3983, 0.0f, 1.0f);
    let x_3985 : f32 = u_xlat73;
    let x_3986 : f32 = u_xlat73;
    u_xlat73 = (x_3985 * x_3986);
    let x_3988 : f32 = u_xlat70;
    let x_3989 : f32 = u_xlat73;
    u_xlat70 = (x_3988 * x_3989);
    let x_3991 : f32 = u_xlat50;
    let x_3993 : i32 = u_xlati69;
    let x_3995 : vec4<f32> = x_3917.x_AdditionalLightsColor[x_3993];
    let x_3997 : vec3<f32> = (vec3<f32>(x_3991, x_3991, x_3991) * vec3<f32>(x_3995.x, x_3995.y, x_3995.z));
    let x_3998 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3997.x, x_3997.y, x_3997.z, x_3998.w);
    let x_4000 : vec3<f32> = u_xlat22;
    let x_4001 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(x_4000, vec3<f32>(x_4001.x, x_4001.y, x_4001.z));
    let x_4004 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4004, 0.0f, 1.0f);
    let x_4006 : f32 = u_xlat69;
    let x_4007 : f32 = u_xlat70;
    u_xlat69 = (x_4006 * x_4007);
    let x_4009 : f32 = u_xlat69;
    let x_4011 : vec4<f32> = u_xlat11;
    let x_4013 : vec3<f32> = (vec3<f32>(x_4009, x_4009, x_4009) * vec3<f32>(x_4011.x, x_4011.y, x_4011.z));
    let x_4014 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4013.x, x_4013.y, x_4013.z, x_4014.w);
    let x_4016 : vec4<f32> = u_xlat9;
    let x_4018 : f32 = u_xlat28;
    let x_4021 : vec3<f32> = u_xlat4;
    let x_4022 : vec3<f32> = ((vec3<f32>(x_4016.x, x_4016.y, x_4016.z) * vec3<f32>(x_4018, x_4018, x_4018)) + x_4021);
    let x_4023 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4022.x, x_4022.y, x_4022.z, x_4023.w);
    let x_4025 : vec4<f32> = u_xlat9;
    let x_4027 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_4025.x, x_4025.y, x_4025.z), vec3<f32>(x_4027.x, x_4027.y, x_4027.z));
    let x_4030 : f32 = u_xlat69;
    u_xlat69 = max(x_4030, 1.17549435e-37f);
    let x_4032 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_4032);
    let x_4034 : f32 = u_xlat69;
    let x_4036 : vec4<f32> = u_xlat9;
    let x_4038 : vec3<f32> = (vec3<f32>(x_4034, x_4034, x_4034) * vec3<f32>(x_4036.x, x_4036.y, x_4036.z));
    let x_4039 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4038.x, x_4038.y, x_4038.z, x_4039.w);
    let x_4041 : vec3<f32> = u_xlat22;
    let x_4042 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(x_4041, vec3<f32>(x_4042.x, x_4042.y, x_4042.z));
    let x_4045 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4045, 0.0f, 1.0f);
    let x_4047 : vec4<f32> = u_xlat10;
    let x_4049 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_4047.x, x_4047.y, x_4047.z), vec3<f32>(x_4049.x, x_4049.y, x_4049.z));
    let x_4052 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4052, 0.0f, 1.0f);
    let x_4054 : f32 = u_xlat69;
    let x_4055 : f32 = u_xlat69;
    u_xlat69 = (x_4054 * x_4055);
    let x_4057 : f32 = u_xlat69;
    let x_4059 : f32 = u_xlat3.x;
    u_xlat69 = ((x_4057 * x_4059) + 1.000010014f);
    let x_4062 : f32 = u_xlat70;
    let x_4063 : f32 = u_xlat70;
    u_xlat70 = (x_4062 * x_4063);
    let x_4065 : f32 = u_xlat69;
    let x_4066 : f32 = u_xlat69;
    u_xlat69 = (x_4065 * x_4066);
    let x_4068 : f32 = u_xlat70;
    u_xlat70 = max(x_4068, 0.100000001f);
    let x_4070 : f32 = u_xlat69;
    let x_4071 : f32 = u_xlat70;
    u_xlat69 = (x_4070 * x_4071);
    let x_4073 : f32 = u_xlat72;
    let x_4074 : f32 = u_xlat69;
    u_xlat69 = (x_4073 * x_4074);
    let x_4076 : f32 = u_xlat71;
    let x_4077 : f32 = u_xlat69;
    u_xlat69 = (x_4076 / x_4077);
    let x_4079 : f32 = u_xlat69;
    let x_4082 : vec3<f32> = u_xlat7;
    let x_4083 : vec3<f32> = ((vec3<f32>(x_4079, x_4079, x_4079) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4082);
    let x_4084 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4083.x, x_4083.y, x_4083.z, x_4084.w);
    let x_4086 : vec4<f32> = u_xlat9;
    let x_4088 : vec4<f32> = u_xlat11;
    let x_4091 : vec4<f32> = u_xlat8;
    let x_4093 : vec3<f32> = ((vec3<f32>(x_4086.x, x_4086.y, x_4086.z) * vec3<f32>(x_4088.x, x_4088.y, x_4088.z)) + vec3<f32>(x_4091.x, x_4091.y, x_4091.z));
    let x_4094 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4093.x, x_4093.y, x_4093.z, x_4094.w);

    continuing {
      let x_4096 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4096 + bitcast<u32>(1i));
    }
  }
  let x_4098 : vec4<f32> = u_xlat5;
  let x_4100 : vec4<f32> = u_xlat6;
  let x_4103 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4098.x, x_4098.y, x_4098.z) * vec3<f32>(x_4100.x, x_4100.x, x_4100.x)) + vec3<f32>(x_4103.x, x_4103.y, x_4103.z));
  let x_4106 : vec4<f32> = u_xlat8;
  let x_4108 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4106.x, x_4106.y, x_4106.z) + x_4108);
  let x_4110 : vec4<f32> = vs_INTERP4;
  let x_4112 : vec3<f32> = u_xlat1;
  let x_4114 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_4110.w, x_4110.w, x_4110.w) * x_4112) + x_4114);
  let x_4118 : f32 = u_xlat47.x;
  let x_4120 : f32 = u_xlat47.x;
  u_xlat66 = (x_4118 * -(x_4120));
  let x_4123 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4123);
  let x_4125 : vec3<f32> = u_xlat0;
  let x_4128 : vec4<f32> = x_160.unity_FogColor;
  u_xlat0 = (x_4125 + -(vec3<f32>(x_4128.x, x_4128.y, x_4128.z)));
  let x_4134 : f32 = u_xlat66;
  let x_4136 : vec3<f32> = u_xlat0;
  let x_4139 : vec4<f32> = x_160.unity_FogColor;
  let x_4141 : vec3<f32> = ((vec3<f32>(x_4134, x_4134, x_4134) * x_4136) + vec3<f32>(x_4139.x, x_4139.y, x_4139.z));
  let x_4142 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4141.x, x_4141.y, x_4141.z, x_4142.w);
  let x_4144 : bool = u_xlatb25;
  let x_4145 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4145, x_4144);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

