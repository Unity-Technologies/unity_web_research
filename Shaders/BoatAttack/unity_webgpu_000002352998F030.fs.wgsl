type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat6 : vec3<f32>;
  var x_281 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var x_290 : vec3<f32>;
  var x_301 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var x_313 : vec3<f32>;
  var x_323 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlatb22 : bool;
  var x_557 : vec3<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var x_844 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlatb23 : bool;
  var x_1125 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var x_1396 : vec3<f32>;
  var u_xlatb11 : bool;
  var x_1646 : vec3<f32>;
  var x_1915 : vec3<f32>;
  var x_2171 : vec3<f32>;
  var x_2439 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_108 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_110 : vec2<f32> = vs_TEXCOORD0;
  let x_115 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_108.x, x_108.y, x_108.z) * vec3<f32>(x_110.x, x_110.x, x_110.x)) + vec3<f32>(x_115.x, x_115.y, x_115.z));
  let x_120 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_122 : vec2<f32> = u_xlat14;
  let x_125 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_120.x, x_120.y, x_120.z) * vec3<f32>(x_122.x, x_122.x, x_122.x)) + x_125);
  let x_129 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_131 : f32 = u_xlat21;
  let x_134 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_129.x, x_129.y, x_129.z) * vec3<f32>(x_131, x_131, x_131)) + x_134);
  let x_139 : f32 = x_34.x_SourceSize.z;
  u_xlat9.x = (x_139 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_144 : vec3<f32> = u_xlat9;
  let x_146 : vec2<f32> = vs_TEXCOORD0;
  let x_147 : vec2<f32> = (vec2<f32>(x_144.x, x_144.y) + x_146);
  let x_148 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_147.x, x_147.y, x_148.z);
  let x_153 : vec3<f32> = u_xlat9;
  let x_156 : f32 = x_34.x_GlobalMipBias.x;
  let x_157 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_153.x, x_153.y), x_156);
  u_xlat14.x = x_157.x;
  let x_161 : f32 = u_xlat7.x;
  let x_164 : f32 = u_xlat14.x;
  let x_167 : f32 = x_34.x_ProjectionParams.z;
  u_xlat9.z = ((-(x_161) * x_164) + x_167);
  let x_173 : f32 = x_34.x_SourceSize.z;
  u_xlat3.x = (x_173 * 2.0f);
  u_xlat3.y = 0.0f;
  let x_178 : vec4<f32> = u_xlat3;
  let x_180 : vec2<f32> = vs_TEXCOORD0;
  let x_181 : vec2<f32> = (vec2<f32>(x_178.x, x_178.y) + x_180);
  let x_182 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_181.x, x_181.y, x_182.z, x_182.w);
  let x_187 : vec4<f32> = u_xlat3;
  let x_190 : f32 = x_34.x_GlobalMipBias.x;
  let x_191 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_187.x, x_187.y), x_190);
  u_xlat14.x = x_191.x;
  let x_195 : f32 = u_xlat7.x;
  let x_198 : f32 = u_xlat14.x;
  let x_201 : f32 = x_34.x_ProjectionParams.z;
  u_xlat3.z = ((-(x_195) * x_198) + x_201);
  u_xlat11.x = 0.0f;
  let x_207 : f32 = x_34.x_SourceSize.w;
  u_xlat11.y = (x_207 * 2.0f);
  let x_210 : vec3<f32> = u_xlat11;
  let x_212 : vec2<f32> = vs_TEXCOORD0;
  let x_213 : vec2<f32> = (vec2<f32>(x_210.x, x_210.y) + x_212);
  let x_214 : vec3<f32> = u_xlat11;
  u_xlat11 = vec3<f32>(x_213.x, x_213.y, x_214.z);
  let x_219 : vec3<f32> = u_xlat11;
  let x_222 : f32 = x_34.x_GlobalMipBias.x;
  let x_223 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_219.x, x_219.y), x_222);
  u_xlat14.x = x_223.x;
  let x_227 : f32 = u_xlat7.x;
  let x_230 : f32 = u_xlat14.x;
  let x_233 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.z = ((-(x_227) * x_230) + x_233);
  u_xlat12.x = 0.0f;
  let x_239 : f32 = x_34.x_SourceSize.w;
  u_xlat12.y = (x_239 * -2.0f);
  let x_242 : vec3<f32> = u_xlat12;
  let x_244 : vec2<f32> = vs_TEXCOORD0;
  let x_245 : vec2<f32> = (vec2<f32>(x_242.x, x_242.y) + x_244);
  let x_246 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_245.x, x_245.y, x_246.z);
  let x_251 : vec3<f32> = u_xlat12;
  let x_254 : f32 = x_34.x_GlobalMipBias.x;
  let x_255 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_251.x, x_251.y), x_254);
  u_xlat14.x = x_255.x;
  let x_259 : f32 = u_xlat7.x;
  let x_262 : f32 = u_xlat14.x;
  let x_265 : f32 = x_34.x_ProjectionParams.z;
  u_xlat12.z = ((-(x_259) * x_262) + x_265);
  let x_269 : f32 = u_xlat3.z;
  let x_271 : f32 = u_xlat9.z;
  u_xlatb14 = (x_269 < x_271);
  let x_275 : f32 = u_xlat11.z;
  let x_277 : f32 = u_xlat12.z;
  u_xlatb21 = (x_275 < x_277);
  let x_280 : bool = u_xlatb14;
  if (x_280) {
    let x_284 : vec3<f32> = u_xlat9;
    x_281 = x_284;
  } else {
    let x_286 : vec3<f32> = u_xlat12;
    x_281 = x_286;
  }
  let x_287 : vec3<f32> = x_281;
  u_xlat6 = x_287;
  let x_289 : bool = u_xlatb14;
  if (x_289) {
    let x_293 : vec3<f32> = u_xlat12;
    x_290 = x_293;
  } else {
    let x_295 : vec4<f32> = u_xlat3;
    x_290 = vec3<f32>(x_295.x, x_295.y, x_295.z);
  }
  let x_297 : vec3<f32> = x_290;
  let x_298 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_298.x, x_297.x, x_297.y, x_297.z);
  let x_300 : bool = u_xlatb14;
  if (x_300) {
    let x_304 : vec3<f32> = u_xlat11;
    x_301 = x_304;
  } else {
    let x_306 : vec4<f32> = u_xlat3;
    x_301 = vec3<f32>(x_306.x, x_306.y, x_306.z);
  }
  let x_308 : vec3<f32> = x_301;
  let x_309 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_308.x, x_308.y, x_308.z, x_309.w);
  let x_312 : bool = u_xlatb14;
  if (x_312) {
    let x_316 : vec3<f32> = u_xlat9;
    x_313 = x_316;
  } else {
    let x_318 : vec3<f32> = u_xlat11;
    x_313 = x_318;
  }
  let x_319 : vec3<f32> = x_313;
  let x_320 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_320.x, x_319.x, x_319.y, x_319.z);
  let x_322 : bool = u_xlatb21;
  if (x_322) {
    let x_326 : vec3<f32> = u_xlat6;
    x_323 = vec2<f32>(x_326.x, x_326.y);
  } else {
    let x_329 : vec4<f32> = u_xlat3;
    x_323 = vec2<f32>(x_329.x, x_329.y);
  }
  let x_331 : vec2<f32> = x_323;
  let x_332 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_331.x, x_331.y, x_332.z, x_332.w);
  let x_335 : f32 = u_xlat6.z;
  u_xlat5.x = x_335;
  let x_338 : f32 = u_xlat3.z;
  u_xlat2.x = x_338;
  let x_340 : bool = u_xlatb21;
  let x_341 : vec4<f32> = u_xlat5;
  let x_342 : vec4<f32> = u_xlat2;
  u_xlat2 = select(x_342, x_341, vec4<bool>(x_340, x_340, x_340, x_340));
  let x_347 : f32 = u_xlat2.z;
  u_xlat14.x = (-(x_347) + 1.0f);
  let x_351 : vec4<f32> = u_xlat2;
  let x_354 : vec4<f32> = x_34.x_ProjectionParams;
  let x_356 : vec2<f32> = (vec2<f32>(x_351.w, x_351.x) * vec2<f32>(x_354.w, x_354.w));
  let x_357 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_356.x, x_357.y, x_356.y, x_357.w);
  let x_361 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_363 : vec4<f32> = u_xlat2;
  let x_367 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_361.z, x_361.x, x_361.y) * vec3<f32>(x_363.y, x_363.y, x_363.y)) + vec3<f32>(x_367.z, x_367.x, x_367.y));
  let x_371 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_373 : vec2<f32> = u_xlat14;
  let x_376 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_371.z, x_371.x, x_371.y) * vec3<f32>(x_373.x, x_373.x, x_373.x)) + x_376);
  let x_379 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_381 : vec4<f32> = u_xlat2;
  let x_384 : vec3<f32> = u_xlat4;
  let x_385 : vec3<f32> = ((vec3<f32>(x_379.z, x_379.x, x_379.y) * vec3<f32>(x_381.x, x_381.x, x_381.x)) + x_384);
  let x_386 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_385.x, x_385.y, x_386.z, x_385.z);
  let x_388 : vec3<f32> = u_xlat1;
  let x_391 : vec4<f32> = u_xlat2;
  let x_393 : vec3<f32> = (-(vec3<f32>(x_388.z, x_388.x, x_388.y)) + vec3<f32>(x_391.x, x_391.y, x_391.w));
  let x_394 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_393.x, x_393.y, x_394.z, x_393.z);
  let x_397 : f32 = u_xlat3.y;
  u_xlat14.x = (-(x_397) + 1.0f);
  let x_402 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_404 : vec4<f32> = u_xlat3;
  let x_408 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_410 : vec3<f32> = ((vec3<f32>(x_402.y, x_402.z, x_402.x) * vec3<f32>(x_404.x, x_404.x, x_404.x)) + vec3<f32>(x_408.y, x_408.z, x_408.x));
  let x_411 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_414 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_416 : vec2<f32> = u_xlat14;
  let x_419 : vec4<f32> = u_xlat3;
  let x_421 : vec3<f32> = ((vec3<f32>(x_414.y, x_414.z, x_414.x) * vec3<f32>(x_416.x, x_416.x, x_416.x)) + vec3<f32>(x_419.x, x_419.y, x_419.z));
  let x_422 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_421.x, x_421.y, x_421.z, x_422.w);
  let x_425 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_427 : vec4<f32> = u_xlat2;
  let x_430 : vec4<f32> = u_xlat3;
  let x_432 : vec3<f32> = ((vec3<f32>(x_425.y, x_425.z, x_425.x) * vec3<f32>(x_427.z, x_427.z, x_427.z)) + vec3<f32>(x_430.x, x_430.y, x_430.z));
  let x_433 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_432.x, x_432.y, x_432.z, x_433.w);
  let x_435 : vec3<f32> = u_xlat1;
  let x_438 : vec4<f32> = u_xlat3;
  let x_440 : vec3<f32> = (-(vec3<f32>(x_435.y, x_435.z, x_435.x)) + vec3<f32>(x_438.x, x_438.y, x_438.z));
  let x_441 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
  let x_443 : vec4<f32> = u_xlat2;
  let x_445 : vec4<f32> = u_xlat3;
  u_xlat4 = (vec3<f32>(x_443.x, x_443.y, x_443.w) * vec3<f32>(x_445.x, x_445.y, x_445.z));
  let x_448 : vec4<f32> = u_xlat2;
  let x_450 : vec4<f32> = u_xlat3;
  let x_453 : vec3<f32> = u_xlat4;
  let x_455 : vec3<f32> = ((vec3<f32>(x_448.w, x_448.x, x_448.y) * vec3<f32>(x_450.y, x_450.z, x_450.x)) + -(x_453));
  let x_456 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_455.x, x_455.y, x_455.z, x_456.w);
  let x_458 : vec4<f32> = u_xlat2;
  let x_460 : vec4<f32> = u_xlat2;
  u_xlat14.x = dot(vec3<f32>(x_458.x, x_458.y, x_458.z), vec3<f32>(x_460.x, x_460.y, x_460.z));
  let x_465 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_465);
  let x_468 : vec2<f32> = u_xlat14;
  let x_470 : vec4<f32> = u_xlat2;
  let x_472 : vec3<f32> = (vec3<f32>(x_468.x, x_468.x, x_468.x) * vec3<f32>(x_470.x, x_470.y, x_470.z));
  let x_473 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_472.x, x_472.y, x_472.z, x_473.w);
  let x_475 : vec2<f32> = vs_TEXCOORD0;
  let x_477 : vec4<f32> = x_34.x_ScaledScreenParams;
  u_xlat14 = (x_475 * vec2<f32>(x_477.x, x_477.y));
  let x_480 : vec2<f32> = u_xlat14;
  let x_482 : vec4<f32> = x_34.x_SSAOParams;
  let x_484 : vec2<f32> = (x_480 * vec2<f32>(x_482.z, x_482.z));
  let x_485 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_484.x, x_484.y, x_485.z, x_485.w);
  let x_488 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec2<f32>(x_488.x, x_488.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_494 : f32 = u_xlat22;
  u_xlat22 = fract(x_494);
  let x_496 : f32 = u_xlat22;
  u_xlat22 = (x_496 * 52.982917786f);
  let x_499 : f32 = u_xlat22;
  u_xlat22 = fract(x_499);
  let x_502 : f32 = u_xlat22;
  u_xlat23 = fract(x_502);
  let x_504 : f32 = u_xlat23;
  u_xlat3.z = ((x_504 * 2.0f) + -1.0f);
  let x_509 : f32 = u_xlat22;
  u_xlat22 = (x_509 + 0.9296875f);
  let x_512 : f32 = u_xlat22;
  u_xlat22 = (x_512 * 6.283185482f);
  let x_516 : f32 = u_xlat3.z;
  let x_519 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_516) * x_519) + 1.0f);
  let x_522 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_522);
  let x_524 : f32 = u_xlat22;
  u_xlat4.x = sin(x_524);
  let x_527 : f32 = u_xlat22;
  u_xlat5.x = cos(x_527);
  let x_530 : f32 = u_xlat23;
  let x_532 : f32 = u_xlat5.x;
  u_xlat3.x = (x_530 * x_532);
  let x_535 : f32 = u_xlat23;
  let x_537 : f32 = u_xlat4.x;
  u_xlat3.y = (x_535 * x_537);
  let x_540 : vec4<f32> = u_xlat3;
  let x_544 : vec3<f32> = (vec3<f32>(x_540.x, x_540.y, x_540.z) * vec3<f32>(0.353553385f, 0.353553385f, 0.353553385f));
  let x_545 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_544.x, x_544.y, x_544.z, x_545.w);
  let x_547 : vec4<f32> = u_xlat2;
  let x_550 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(-(vec3<f32>(x_547.x, x_547.y, x_547.z)), vec3<f32>(x_550.x, x_550.y, x_550.z));
  let x_554 : f32 = u_xlat22;
  u_xlatb22 = (x_554 >= 0.0f);
  let x_556 : bool = u_xlatb22;
  if (x_556) {
    let x_560 : vec4<f32> = u_xlat3;
    x_557 = -(vec3<f32>(x_560.x, x_560.y, x_560.z));
  } else {
    let x_564 : vec4<f32> = u_xlat3;
    x_557 = vec3<f32>(x_564.x, x_564.y, x_564.z);
  }
  let x_566 : vec3<f32> = x_557;
  let x_567 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_566.x, x_566.y, x_566.z, x_567.w);
  let x_569 : vec4<f32> = u_xlat3;
  let x_572 : vec4<f32> = x_34.x_SSAOParams;
  let x_575 : vec3<f32> = u_xlat1;
  let x_576 : vec3<f32> = ((vec3<f32>(x_569.x, x_569.y, x_569.z) * vec3<f32>(x_572.y, x_572.y, x_572.y)) + x_575);
  let x_577 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_576.x, x_576.y, x_576.z, x_577.w);
  let x_580 : vec4<f32> = u_xlat3;
  let x_584 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_586 : vec2<f32> = (vec2<f32>(x_580.y, x_580.y) * vec2<f32>(x_584.x, x_584.y));
  let x_587 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_586.x, x_587.y, x_586.y);
  let x_590 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_592 : vec4<f32> = u_xlat3;
  let x_595 : vec3<f32> = u_xlat10;
  let x_597 : vec2<f32> = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_592.x, x_592.x)) + vec2<f32>(x_595.x, x_595.z));
  let x_598 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_597.x, x_597.y, x_598.z, x_598.w);
  let x_601 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_603 : vec4<f32> = u_xlat3;
  let x_606 : vec4<f32> = u_xlat3;
  let x_608 : vec2<f32> = ((vec2<f32>(x_601.x, x_601.y) * vec2<f32>(x_603.z, x_603.z)) + vec2<f32>(x_606.x, x_606.y));
  let x_609 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_608.x, x_608.y, x_609.z, x_609.w);
  let x_611 : vec4<f32> = u_xlat3;
  let x_614 : vec2<f32> = (vec2<f32>(x_611.x, x_611.y) + vec2<f32>(1.0f, 1.0f));
  let x_615 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_614.x, x_614.y, x_615.z, x_615.w);
  let x_617 : vec4<f32> = u_xlat3;
  let x_620 : vec2<f32> = (vec2<f32>(x_617.x, x_617.y) * vec2<f32>(0.5f, 0.5f));
  let x_621 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
  let x_623 : vec4<f32> = u_xlat3;
  let x_627 : vec2<f32> = clamp(vec2<f32>(x_623.x, x_623.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_628 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_627.x, x_627.y, x_628.z, x_628.w);
  let x_633 : vec4<f32> = u_xlat3;
  let x_636 : f32 = x_34.x_GlobalMipBias.x;
  let x_637 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_633.x, x_633.y), x_636);
  u_xlat22 = x_637.x;
  let x_640 : f32 = u_xlat7.x;
  let x_642 : f32 = u_xlat22;
  let x_645 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_640) * x_642) + x_645);
  let x_648 : f32 = u_xlat0;
  let x_649 : f32 = u_xlat23;
  u_xlat17 = (x_648 + -(x_649));
  let x_653 : f32 = u_xlat17;
  let x_656 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_653) < x_656);
  let x_658 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_658);
  let x_660 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_660);
  let x_662 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_662);
  let x_664 : f32 = u_xlat22;
  let x_665 : f32 = u_xlat17;
  u_xlat22 = (x_664 * x_665);
  let x_668 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_668) + 1.0f);
  let x_672 : f32 = u_xlat23;
  let x_674 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_672 * x_674);
  let x_677 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_679 : vec4<f32> = u_xlat3;
  let x_683 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_685 : vec3<f32> = ((vec3<f32>(x_677.x, x_677.y, x_677.z) * vec3<f32>(x_679.x, x_679.x, x_679.x)) + vec3<f32>(x_683.x, x_683.y, x_683.z));
  let x_686 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_685.x, x_686.y, x_685.y, x_685.z);
  let x_689 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_691 : vec3<f32> = u_xlat10;
  let x_694 : vec4<f32> = u_xlat3;
  let x_696 : vec3<f32> = ((vec3<f32>(x_689.x, x_689.y, x_689.z) * vec3<f32>(x_691.x, x_691.x, x_691.x)) + vec3<f32>(x_694.x, x_694.z, x_694.w));
  let x_697 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_696.x, x_696.y, x_696.z, x_697.w);
  let x_700 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_702 : f32 = u_xlat23;
  let x_705 : vec4<f32> = u_xlat3;
  let x_707 : vec3<f32> = ((vec3<f32>(x_700.x, x_700.y, x_700.z) * vec3<f32>(x_702, x_702, x_702)) + vec3<f32>(x_705.x, x_705.y, x_705.z));
  let x_708 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_707.x, x_707.y, x_707.z, x_708.w);
  let x_710 : vec3<f32> = u_xlat1;
  let x_712 : vec4<f32> = u_xlat3;
  let x_714 : vec3<f32> = (-(x_710) + vec3<f32>(x_712.x, x_712.y, x_712.z));
  let x_715 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
  let x_717 : vec4<f32> = u_xlat3;
  let x_719 : vec4<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_717.x, x_717.y, x_717.z), vec3<f32>(x_719.x, x_719.y, x_719.z));
  let x_722 : f32 = u_xlat0;
  let x_726 : f32 = u_xlat23;
  u_xlat23 = ((-(x_722) * 0.004f) + x_726);
  let x_728 : f32 = u_xlat23;
  u_xlat23 = max(x_728, 0.0f);
  let x_730 : vec4<f32> = u_xlat3;
  let x_732 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_730.x, x_730.y, x_730.z), vec3<f32>(x_732.x, x_732.y, x_732.z));
  let x_737 : f32 = u_xlat3.x;
  u_xlat3.x = (x_737 + 0.0001f);
  let x_742 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_742);
  let x_745 : f32 = u_xlat23;
  let x_747 : f32 = u_xlat3.x;
  u_xlat23 = (x_745 * x_747);
  let x_749 : vec2<f32> = u_xlat14;
  let x_752 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_749.x, x_749.y, x_749.x, x_749.y) * vec4<f32>(x_752.z, x_752.z, x_752.z, x_752.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_761 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec2<f32>(x_761.x, x_761.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_766 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_766);
  let x_770 : f32 = u_xlat3.x;
  u_xlat3.x = (x_770 * 52.982917786f);
  let x_774 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_774);
  let x_777 : vec4<f32> = u_xlat3;
  let x_782 : vec2<f32> = (vec2<f32>(x_777.x, x_777.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_783 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_782.x, x_782.y, x_783.z, x_783.w);
  let x_786 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_786);
  let x_790 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_790 * 2.0f) + -1.0f);
  let x_795 : f32 = u_xlat3.y;
  u_xlat3.x = (x_795 * 6.283185482f);
  let x_799 : f32 = u_xlat4.z;
  let x_802 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_799) * x_802) + 1.0f);
  let x_807 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_807);
  let x_811 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_811);
  let x_815 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_815);
  let x_819 : f32 = u_xlat10.x;
  let x_821 : f32 = u_xlat5.x;
  u_xlat4.x = (x_819 * x_821);
  let x_825 : f32 = u_xlat3.x;
  let x_827 : f32 = u_xlat10.x;
  u_xlat4.y = (x_825 * x_827);
  let x_830 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_830 * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_833 : vec4<f32> = u_xlat2;
  let x_836 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(-(vec3<f32>(x_833.x, x_833.y, x_833.z)), x_836);
  let x_841 : f32 = u_xlat3.x;
  u_xlatb3 = (x_841 >= 0.0f);
  let x_843 : bool = u_xlatb3;
  if (x_843) {
    let x_847 : vec3<f32> = u_xlat4;
    x_844 = -(x_847);
  } else {
    let x_850 : vec3<f32> = u_xlat4;
    x_844 = x_850;
  }
  let x_851 : vec3<f32> = x_844;
  u_xlat4 = x_851;
  let x_852 : vec3<f32> = u_xlat4;
  let x_854 : vec4<f32> = x_34.x_SSAOParams;
  let x_857 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_852 * vec3<f32>(x_854.y, x_854.y, x_854.y)) + x_857);
  let x_859 : vec3<f32> = u_xlat4;
  let x_862 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_864 : vec2<f32> = (vec2<f32>(x_859.y, x_859.y) * vec2<f32>(x_862.x, x_862.y));
  let x_865 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_864.x, x_864.y, x_865.z, x_865.w);
  let x_868 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_870 : vec3<f32> = u_xlat4;
  let x_873 : vec4<f32> = u_xlat3;
  let x_875 : vec2<f32> = ((vec2<f32>(x_868.x, x_868.y) * vec2<f32>(x_870.x, x_870.x)) + vec2<f32>(x_873.x, x_873.y));
  let x_876 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_875.x, x_875.y, x_876.z, x_876.w);
  let x_879 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_881 : vec3<f32> = u_xlat4;
  let x_884 : vec4<f32> = u_xlat3;
  let x_886 : vec2<f32> = ((vec2<f32>(x_879.x, x_879.y) * vec2<f32>(x_881.z, x_881.z)) + vec2<f32>(x_884.x, x_884.y));
  let x_887 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_886.x, x_886.y, x_887.z, x_887.w);
  let x_889 : vec4<f32> = u_xlat3;
  let x_891 : vec2<f32> = (vec2<f32>(x_889.x, x_889.y) + vec2<f32>(1.0f, 1.0f));
  let x_892 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_891.x, x_891.y, x_892.z, x_892.w);
  let x_894 : vec4<f32> = u_xlat3;
  let x_896 : vec2<f32> = (vec2<f32>(x_894.x, x_894.y) * vec2<f32>(0.5f, 0.5f));
  let x_897 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_896.x, x_896.y, x_897.z, x_897.w);
  let x_899 : vec4<f32> = u_xlat3;
  let x_903 : vec2<f32> = clamp(vec2<f32>(x_899.x, x_899.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_904 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_903.x, x_903.y, x_904.z, x_904.w);
  let x_909 : vec4<f32> = u_xlat3;
  let x_912 : f32 = x_34.x_GlobalMipBias.x;
  let x_913 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_909.x, x_909.y), x_912);
  u_xlat4.x = x_913.x;
  let x_917 : f32 = u_xlat7.x;
  let x_920 : f32 = u_xlat4.x;
  let x_923 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_917) * x_920) + x_923);
  let x_927 : f32 = u_xlat0;
  let x_929 : f32 = u_xlat11.x;
  u_xlat18 = (x_927 + -(x_929));
  let x_935 : f32 = u_xlat18;
  let x_938 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_935) < x_938);
  let x_942 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_942);
  let x_946 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_946);
  let x_950 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_950);
  let x_954 : f32 = u_xlat4.x;
  let x_956 : f32 = u_xlat4.z;
  u_xlat4.x = (x_954 * x_956);
  let x_960 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_960) + 1.0f);
  let x_965 : f32 = u_xlat11.x;
  let x_967 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_965 * x_967);
  let x_971 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_973 : vec4<f32> = u_xlat3;
  let x_977 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_979 : vec3<f32> = ((vec3<f32>(x_971.x, x_971.y, x_971.z) * vec3<f32>(x_973.x, x_973.x, x_973.x)) + vec3<f32>(x_977.x, x_977.y, x_977.z));
  let x_980 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_979.x, x_979.y, x_979.z, x_980.w);
  let x_983 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_985 : vec3<f32> = u_xlat10;
  let x_988 : vec4<f32> = u_xlat5;
  let x_990 : vec3<f32> = ((vec3<f32>(x_983.x, x_983.y, x_983.z) * vec3<f32>(x_985.x, x_985.x, x_985.x)) + vec3<f32>(x_988.x, x_988.y, x_988.z));
  let x_991 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_990.x, x_990.y, x_990.z, x_991.w);
  let x_994 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_996 : vec3<f32> = u_xlat11;
  let x_999 : vec4<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_994.x, x_994.y, x_994.z) * vec3<f32>(x_996.x, x_996.x, x_996.x)) + vec3<f32>(x_999.x, x_999.y, x_999.z));
  let x_1002 : vec3<f32> = u_xlat1;
  let x_1004 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_1002) + x_1004);
  let x_1006 : vec3<f32> = u_xlat11;
  let x_1007 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_1006, vec3<f32>(x_1007.x, x_1007.y, x_1007.z));
  let x_1011 : f32 = u_xlat0;
  let x_1015 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1011) * 0.004f) + x_1015);
  let x_1019 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1019, 0.0f);
  let x_1022 : vec3<f32> = u_xlat11;
  let x_1023 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_1022, x_1023);
  let x_1027 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1027 + 0.0001f);
  let x_1031 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1031);
  let x_1035 : f32 = u_xlat10.x;
  let x_1037 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1035 * x_1037);
  let x_1041 : f32 = u_xlat4.x;
  let x_1043 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1041 * x_1043);
  let x_1046 : f32 = u_xlat23;
  let x_1047 : f32 = u_xlat22;
  let x_1050 : f32 = u_xlat3.x;
  u_xlat22 = ((x_1046 * x_1047) + x_1050);
  let x_1052 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1052.z, x_1052.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1055 : f32 = u_xlat23;
  u_xlat23 = fract(x_1055);
  let x_1057 : f32 = u_xlat23;
  u_xlat23 = (x_1057 * 52.982917786f);
  let x_1059 : f32 = u_xlat23;
  u_xlat23 = fract(x_1059);
  let x_1061 : f32 = u_xlat23;
  let x_1066 : vec2<f32> = (vec2<f32>(x_1061, x_1061) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1067 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1066.x, x_1066.y, x_1067.z, x_1067.w);
  let x_1070 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1070);
  let x_1072 : f32 = u_xlat23;
  u_xlat4.z = ((x_1072 * 2.0f) + -1.0f);
  let x_1077 : f32 = u_xlat3.y;
  u_xlat23 = (x_1077 * 6.283185482f);
  let x_1080 : f32 = u_xlat4.z;
  let x_1083 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1080) * x_1083) + 1.0f);
  let x_1088 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1088);
  let x_1091 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1091);
  let x_1094 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1094);
  let x_1098 : f32 = u_xlat3.x;
  let x_1100 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1098 * x_1100);
  let x_1104 : f32 = u_xlat3.x;
  let x_1106 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1104 * x_1106);
  let x_1109 : vec3<f32> = u_xlat4;
  let x_1112 : vec3<f32> = (x_1109 * vec3<f32>(0.612372458f, 0.612372458f, 0.612372458f));
  let x_1113 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1112.x, x_1112.y, x_1112.z, x_1113.w);
  let x_1115 : vec4<f32> = u_xlat2;
  let x_1118 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(vec3<f32>(x_1115.x, x_1115.y, x_1115.z)), vec3<f32>(x_1118.x, x_1118.y, x_1118.z));
  let x_1122 : f32 = u_xlat23;
  u_xlatb23 = (x_1122 >= 0.0f);
  let x_1124 : bool = u_xlatb23;
  if (x_1124) {
    let x_1128 : vec4<f32> = u_xlat3;
    x_1125 = -(vec3<f32>(x_1128.x, x_1128.y, x_1128.z));
  } else {
    let x_1132 : vec4<f32> = u_xlat3;
    x_1125 = vec3<f32>(x_1132.x, x_1132.y, x_1132.z);
  }
  let x_1134 : vec3<f32> = x_1125;
  let x_1135 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1134.x, x_1134.y, x_1134.z, x_1135.w);
  let x_1137 : vec4<f32> = u_xlat3;
  let x_1140 : vec4<f32> = x_34.x_SSAOParams;
  let x_1143 : vec3<f32> = u_xlat1;
  let x_1144 : vec3<f32> = ((vec3<f32>(x_1137.x, x_1137.y, x_1137.z) * vec3<f32>(x_1140.y, x_1140.y, x_1140.y)) + x_1143);
  let x_1145 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1144.x, x_1144.y, x_1144.z, x_1145.w);
  let x_1147 : vec4<f32> = u_xlat3;
  let x_1150 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1152 : vec2<f32> = (vec2<f32>(x_1147.y, x_1147.y) * vec2<f32>(x_1150.x, x_1150.y));
  let x_1153 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1152.x, x_1153.y, x_1152.y);
  let x_1156 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1158 : vec4<f32> = u_xlat3;
  let x_1161 : vec3<f32> = u_xlat10;
  let x_1163 : vec2<f32> = ((vec2<f32>(x_1156.x, x_1156.y) * vec2<f32>(x_1158.x, x_1158.x)) + vec2<f32>(x_1161.x, x_1161.z));
  let x_1164 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1163.x, x_1163.y, x_1164.z, x_1164.w);
  let x_1167 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1169 : vec4<f32> = u_xlat3;
  let x_1172 : vec4<f32> = u_xlat3;
  let x_1174 : vec2<f32> = ((vec2<f32>(x_1167.x, x_1167.y) * vec2<f32>(x_1169.z, x_1169.z)) + vec2<f32>(x_1172.x, x_1172.y));
  let x_1175 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1174.x, x_1174.y, x_1175.z, x_1175.w);
  let x_1177 : vec4<f32> = u_xlat3;
  let x_1179 : vec2<f32> = (vec2<f32>(x_1177.x, x_1177.y) + vec2<f32>(1.0f, 1.0f));
  let x_1180 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1179.x, x_1179.y, x_1180.z, x_1180.w);
  let x_1182 : vec4<f32> = u_xlat3;
  let x_1184 : vec2<f32> = (vec2<f32>(x_1182.x, x_1182.y) * vec2<f32>(0.5f, 0.5f));
  let x_1185 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1184.x, x_1184.y, x_1185.z, x_1185.w);
  let x_1187 : vec4<f32> = u_xlat3;
  let x_1191 : vec2<f32> = clamp(vec2<f32>(x_1187.x, x_1187.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1192 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1191.x, x_1191.y, x_1192.z, x_1192.w);
  let x_1197 : vec4<f32> = u_xlat3;
  let x_1200 : f32 = x_34.x_GlobalMipBias.x;
  let x_1201 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1197.x, x_1197.y), x_1200);
  u_xlat23 = x_1201.x;
  let x_1204 : f32 = u_xlat7.x;
  let x_1206 : f32 = u_xlat23;
  let x_1209 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1204) * x_1206) + x_1209);
  let x_1212 : f32 = u_xlat0;
  let x_1213 : f32 = u_xlat17;
  u_xlat24 = (x_1212 + -(x_1213));
  let x_1217 : f32 = u_xlat24;
  let x_1220 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1217) < x_1220);
  let x_1222 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1222);
  let x_1224 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1224);
  let x_1226 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1226);
  let x_1228 : f32 = u_xlat23;
  let x_1229 : f32 = u_xlat24;
  u_xlat23 = (x_1228 * x_1229);
  let x_1232 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1232) + 1.0f);
  let x_1236 : f32 = u_xlat17;
  let x_1238 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1236 * x_1238);
  let x_1241 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1243 : vec4<f32> = u_xlat3;
  let x_1247 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1241.x, x_1241.y, x_1241.z) * vec3<f32>(x_1243.x, x_1243.x, x_1243.x)) + vec3<f32>(x_1247.x, x_1247.y, x_1247.z));
  let x_1251 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1253 : vec3<f32> = u_xlat10;
  let x_1256 : vec3<f32> = u_xlat4;
  let x_1257 : vec3<f32> = ((vec3<f32>(x_1251.x, x_1251.y, x_1251.z) * vec3<f32>(x_1253.x, x_1253.x, x_1253.x)) + x_1256);
  let x_1258 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1257.x, x_1257.y, x_1258.z, x_1257.z);
  let x_1261 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1263 : f32 = u_xlat17;
  let x_1266 : vec4<f32> = u_xlat3;
  let x_1268 : vec3<f32> = ((vec3<f32>(x_1261.x, x_1261.y, x_1261.z) * vec3<f32>(x_1263, x_1263, x_1263)) + vec3<f32>(x_1266.x, x_1266.y, x_1266.w));
  let x_1269 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1268.x, x_1268.y, x_1268.z, x_1269.w);
  let x_1271 : vec3<f32> = u_xlat1;
  let x_1273 : vec4<f32> = u_xlat3;
  let x_1275 : vec3<f32> = (-(x_1271) + vec3<f32>(x_1273.x, x_1273.y, x_1273.z));
  let x_1276 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1275.x, x_1275.y, x_1275.z, x_1276.w);
  let x_1278 : vec4<f32> = u_xlat3;
  let x_1280 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1278.x, x_1278.y, x_1278.z), vec3<f32>(x_1280.x, x_1280.y, x_1280.z));
  let x_1283 : f32 = u_xlat0;
  let x_1286 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1283) * 0.004f) + x_1286);
  let x_1288 : f32 = u_xlat24;
  u_xlat24 = max(x_1288, 0.0f);
  let x_1290 : vec4<f32> = u_xlat3;
  let x_1292 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1290.x, x_1290.y, x_1290.z), vec3<f32>(x_1292.x, x_1292.y, x_1292.z));
  let x_1297 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1297 + 0.0001f);
  let x_1301 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1301);
  let x_1305 : f32 = u_xlat3.x;
  let x_1306 : f32 = u_xlat24;
  u_xlat3.x = (x_1305 * x_1306);
  let x_1310 : f32 = u_xlat3.x;
  let x_1311 : f32 = u_xlat23;
  let x_1313 : f32 = u_xlat22;
  u_xlat22 = ((x_1310 * x_1311) + x_1313);
  let x_1315 : vec2<f32> = u_xlat14;
  let x_1318 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1315.x, x_1315.y, x_1315.x, x_1315.y) * vec4<f32>(x_1318.z, x_1318.z, x_1318.z, x_1318.z)) + vec4<f32>(6.248999596f, 14.600999832f, 8.331999779f, 19.468000412f));
  let x_1327 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1327.x, x_1327.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1330 : f32 = u_xlat23;
  u_xlat23 = fract(x_1330);
  let x_1332 : f32 = u_xlat23;
  u_xlat23 = (x_1332 * 52.982917786f);
  let x_1334 : f32 = u_xlat23;
  u_xlat23 = fract(x_1334);
  let x_1336 : f32 = u_xlat23;
  let x_1341 : vec2<f32> = (vec2<f32>(x_1336, x_1336) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1342 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1341.x, x_1341.y, x_1342.z, x_1342.w);
  let x_1345 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1345);
  let x_1347 : f32 = u_xlat23;
  u_xlat4.z = ((x_1347 * 2.0f) + -1.0f);
  let x_1352 : f32 = u_xlat3.y;
  u_xlat23 = (x_1352 * 6.283185482f);
  let x_1355 : f32 = u_xlat4.z;
  let x_1358 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1355) * x_1358) + 1.0f);
  let x_1363 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1363);
  let x_1366 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1366);
  let x_1369 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1369);
  let x_1373 : f32 = u_xlat3.x;
  let x_1375 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1373 * x_1375);
  let x_1379 : f32 = u_xlat3.x;
  let x_1381 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1379 * x_1381);
  let x_1384 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1384 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_1388 : vec4<f32> = u_xlat2;
  let x_1391 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(vec3<f32>(x_1388.x, x_1388.y, x_1388.z)), x_1391);
  let x_1393 : f32 = u_xlat23;
  u_xlatb23 = (x_1393 >= 0.0f);
  let x_1395 : bool = u_xlatb23;
  if (x_1395) {
    let x_1399 : vec3<f32> = u_xlat4;
    x_1396 = -(x_1399);
  } else {
    let x_1402 : vec3<f32> = u_xlat4;
    x_1396 = x_1402;
  }
  let x_1403 : vec3<f32> = x_1396;
  u_xlat4 = x_1403;
  let x_1404 : vec3<f32> = u_xlat4;
  let x_1406 : vec4<f32> = x_34.x_SSAOParams;
  let x_1409 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_1404 * vec3<f32>(x_1406.y, x_1406.y, x_1406.y)) + x_1409);
  let x_1411 : vec3<f32> = u_xlat4;
  let x_1414 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1416 : vec2<f32> = (vec2<f32>(x_1411.y, x_1411.y) * vec2<f32>(x_1414.x, x_1414.y));
  let x_1417 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1416.x, x_1416.y, x_1417.z, x_1417.w);
  let x_1420 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1422 : vec3<f32> = u_xlat4;
  let x_1425 : vec4<f32> = u_xlat3;
  let x_1427 : vec2<f32> = ((vec2<f32>(x_1420.x, x_1420.y) * vec2<f32>(x_1422.x, x_1422.x)) + vec2<f32>(x_1425.x, x_1425.y));
  let x_1428 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1427.x, x_1427.y, x_1428.z, x_1428.w);
  let x_1431 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1433 : vec3<f32> = u_xlat4;
  let x_1436 : vec4<f32> = u_xlat3;
  let x_1438 : vec2<f32> = ((vec2<f32>(x_1431.x, x_1431.y) * vec2<f32>(x_1433.z, x_1433.z)) + vec2<f32>(x_1436.x, x_1436.y));
  let x_1439 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1438.x, x_1438.y, x_1439.z, x_1439.w);
  let x_1441 : vec4<f32> = u_xlat3;
  let x_1443 : vec2<f32> = (vec2<f32>(x_1441.x, x_1441.y) + vec2<f32>(1.0f, 1.0f));
  let x_1444 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1443.x, x_1443.y, x_1444.z, x_1444.w);
  let x_1446 : vec4<f32> = u_xlat3;
  let x_1448 : vec2<f32> = (vec2<f32>(x_1446.x, x_1446.y) * vec2<f32>(0.5f, 0.5f));
  let x_1449 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1448.x, x_1448.y, x_1449.z, x_1449.w);
  let x_1451 : vec4<f32> = u_xlat3;
  let x_1455 : vec2<f32> = clamp(vec2<f32>(x_1451.x, x_1451.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1456 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1455.x, x_1455.y, x_1456.z, x_1456.w);
  let x_1461 : vec4<f32> = u_xlat3;
  let x_1464 : f32 = x_34.x_GlobalMipBias.x;
  let x_1465 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1461.x, x_1461.y), x_1464);
  u_xlat23 = x_1465.x;
  let x_1468 : f32 = u_xlat7.x;
  let x_1470 : f32 = u_xlat23;
  let x_1473 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1468) * x_1470) + x_1473);
  let x_1476 : f32 = u_xlat0;
  let x_1478 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1476 + -(x_1478));
  let x_1484 : f32 = u_xlat11.x;
  let x_1487 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1484) < x_1487);
  let x_1489 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1489);
  let x_1492 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1492);
  let x_1494 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1494);
  let x_1496 : f32 = u_xlat23;
  let x_1498 : f32 = u_xlat11.x;
  u_xlat23 = (x_1496 * x_1498);
  let x_1501 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1501) + 1.0f);
  let x_1506 : f32 = u_xlat4.x;
  let x_1508 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1506 * x_1508);
  let x_1512 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1514 : vec4<f32> = u_xlat3;
  let x_1518 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1512.x, x_1512.y, x_1512.z) * vec3<f32>(x_1514.x, x_1514.x, x_1514.x)) + vec3<f32>(x_1518.x, x_1518.y, x_1518.z));
  let x_1522 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1524 : vec3<f32> = u_xlat10;
  let x_1527 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1522.x, x_1522.y, x_1522.z) * vec3<f32>(x_1524.x, x_1524.x, x_1524.x)) + x_1527);
  let x_1530 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1532 : vec3<f32> = u_xlat4;
  let x_1535 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1530.x, x_1530.y, x_1530.z) * vec3<f32>(x_1532.x, x_1532.x, x_1532.x)) + x_1535);
  let x_1537 : vec3<f32> = u_xlat1;
  let x_1539 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1537) + x_1539);
  let x_1541 : vec3<f32> = u_xlat4;
  let x_1542 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_1541, vec3<f32>(x_1542.x, x_1542.y, x_1542.z));
  let x_1546 : f32 = u_xlat0;
  let x_1550 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1546) * 0.004f) + x_1550);
  let x_1554 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1554, 0.0f);
  let x_1557 : vec3<f32> = u_xlat4;
  let x_1558 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1557, x_1558);
  let x_1562 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1562 + 0.0001f);
  let x_1566 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1566);
  let x_1570 : f32 = u_xlat10.x;
  let x_1572 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1570 * x_1572);
  let x_1576 : f32 = u_xlat3.x;
  let x_1577 : f32 = u_xlat23;
  let x_1579 : f32 = u_xlat22;
  u_xlat22 = ((x_1576 * x_1577) + x_1579);
  let x_1581 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1581.z, x_1581.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1584 : f32 = u_xlat23;
  u_xlat23 = fract(x_1584);
  let x_1586 : f32 = u_xlat23;
  u_xlat23 = (x_1586 * 52.982917786f);
  let x_1588 : f32 = u_xlat23;
  u_xlat23 = fract(x_1588);
  let x_1590 : f32 = u_xlat23;
  u_xlat3.x = (x_1590 + 0.984375f);
  let x_1595 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_1595);
  let x_1599 : f32 = u_xlat3.x;
  u_xlat3.z = ((x_1599 * 2.0f) + -1.0f);
  let x_1603 : f32 = u_xlat23;
  u_xlat23 = (x_1603 * 6.283185482f);
  let x_1606 : f32 = u_xlat3.z;
  let x_1609 : f32 = u_xlat3.z;
  u_xlat24 = ((-(x_1606) * x_1609) + 1.0f);
  let x_1612 : f32 = u_xlat24;
  u_xlat24 = sqrt(x_1612);
  let x_1614 : f32 = u_xlat23;
  u_xlat4.x = sin(x_1614);
  let x_1617 : f32 = u_xlat23;
  u_xlat5.x = cos(x_1617);
  let x_1620 : f32 = u_xlat24;
  let x_1622 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1620 * x_1622);
  let x_1625 : f32 = u_xlat24;
  let x_1627 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1625 * x_1627);
  let x_1630 : vec4<f32> = u_xlat3;
  let x_1634 : vec3<f32> = (vec3<f32>(x_1630.x, x_1630.y, x_1630.z) * vec3<f32>(0.790569425f, 0.790569425f, 0.790569425f));
  let x_1635 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1634.x, x_1634.y, x_1634.z, x_1635.w);
  let x_1637 : vec4<f32> = u_xlat2;
  let x_1640 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(vec3<f32>(x_1637.x, x_1637.y, x_1637.z)), vec3<f32>(x_1640.x, x_1640.y, x_1640.z));
  let x_1643 : f32 = u_xlat23;
  u_xlatb23 = (x_1643 >= 0.0f);
  let x_1645 : bool = u_xlatb23;
  if (x_1645) {
    let x_1649 : vec4<f32> = u_xlat3;
    x_1646 = -(vec3<f32>(x_1649.x, x_1649.y, x_1649.z));
  } else {
    let x_1653 : vec4<f32> = u_xlat3;
    x_1646 = vec3<f32>(x_1653.x, x_1653.y, x_1653.z);
  }
  let x_1655 : vec3<f32> = x_1646;
  let x_1656 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1655.x, x_1655.y, x_1655.z, x_1656.w);
  let x_1658 : vec4<f32> = u_xlat3;
  let x_1661 : vec4<f32> = x_34.x_SSAOParams;
  let x_1664 : vec3<f32> = u_xlat1;
  let x_1665 : vec3<f32> = ((vec3<f32>(x_1658.x, x_1658.y, x_1658.z) * vec3<f32>(x_1661.y, x_1661.y, x_1661.y)) + x_1664);
  let x_1666 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1665.x, x_1665.y, x_1665.z, x_1666.w);
  let x_1668 : vec4<f32> = u_xlat3;
  let x_1671 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1673 : vec2<f32> = (vec2<f32>(x_1668.y, x_1668.y) * vec2<f32>(x_1671.x, x_1671.y));
  let x_1674 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1673.x, x_1674.y, x_1673.y);
  let x_1677 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1679 : vec4<f32> = u_xlat3;
  let x_1682 : vec3<f32> = u_xlat10;
  let x_1684 : vec2<f32> = ((vec2<f32>(x_1677.x, x_1677.y) * vec2<f32>(x_1679.x, x_1679.x)) + vec2<f32>(x_1682.x, x_1682.z));
  let x_1685 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1684.x, x_1684.y, x_1685.z, x_1685.w);
  let x_1688 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1690 : vec4<f32> = u_xlat3;
  let x_1693 : vec4<f32> = u_xlat3;
  let x_1695 : vec2<f32> = ((vec2<f32>(x_1688.x, x_1688.y) * vec2<f32>(x_1690.z, x_1690.z)) + vec2<f32>(x_1693.x, x_1693.y));
  let x_1696 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1695.x, x_1695.y, x_1696.z, x_1696.w);
  let x_1698 : vec4<f32> = u_xlat3;
  let x_1700 : vec2<f32> = (vec2<f32>(x_1698.x, x_1698.y) + vec2<f32>(1.0f, 1.0f));
  let x_1701 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1700.x, x_1700.y, x_1701.z, x_1701.w);
  let x_1703 : vec4<f32> = u_xlat3;
  let x_1705 : vec2<f32> = (vec2<f32>(x_1703.x, x_1703.y) * vec2<f32>(0.5f, 0.5f));
  let x_1706 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1705.x, x_1705.y, x_1706.z, x_1706.w);
  let x_1708 : vec4<f32> = u_xlat3;
  let x_1712 : vec2<f32> = clamp(vec2<f32>(x_1708.x, x_1708.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1713 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1712.x, x_1712.y, x_1713.z, x_1713.w);
  let x_1718 : vec4<f32> = u_xlat3;
  let x_1721 : f32 = x_34.x_GlobalMipBias.x;
  let x_1722 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1718.x, x_1718.y), x_1721);
  u_xlat23 = x_1722.x;
  let x_1725 : f32 = u_xlat7.x;
  let x_1727 : f32 = u_xlat23;
  let x_1730 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1725) * x_1727) + x_1730);
  let x_1732 : f32 = u_xlat0;
  let x_1733 : f32 = u_xlat17;
  u_xlat24 = (x_1732 + -(x_1733));
  let x_1736 : f32 = u_xlat24;
  let x_1739 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1736) < x_1739);
  let x_1741 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1741);
  let x_1743 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1743);
  let x_1745 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1745);
  let x_1747 : f32 = u_xlat23;
  let x_1748 : f32 = u_xlat24;
  u_xlat23 = (x_1747 * x_1748);
  let x_1751 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1751) + 1.0f);
  let x_1755 : f32 = u_xlat17;
  let x_1757 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1755 * x_1757);
  let x_1760 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1762 : vec4<f32> = u_xlat3;
  let x_1766 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1760.x, x_1760.y, x_1760.z) * vec3<f32>(x_1762.x, x_1762.x, x_1762.x)) + vec3<f32>(x_1766.x, x_1766.y, x_1766.z));
  let x_1770 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1772 : vec3<f32> = u_xlat10;
  let x_1775 : vec3<f32> = u_xlat4;
  let x_1776 : vec3<f32> = ((vec3<f32>(x_1770.x, x_1770.y, x_1770.z) * vec3<f32>(x_1772.x, x_1772.x, x_1772.x)) + x_1775);
  let x_1777 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1776.x, x_1776.y, x_1777.z, x_1776.z);
  let x_1780 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1782 : f32 = u_xlat17;
  let x_1785 : vec4<f32> = u_xlat3;
  let x_1787 : vec3<f32> = ((vec3<f32>(x_1780.x, x_1780.y, x_1780.z) * vec3<f32>(x_1782, x_1782, x_1782)) + vec3<f32>(x_1785.x, x_1785.y, x_1785.w));
  let x_1788 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1787.x, x_1787.y, x_1787.z, x_1788.w);
  let x_1790 : vec3<f32> = u_xlat1;
  let x_1792 : vec4<f32> = u_xlat3;
  let x_1794 : vec3<f32> = (-(x_1790) + vec3<f32>(x_1792.x, x_1792.y, x_1792.z));
  let x_1795 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1794.x, x_1794.y, x_1794.z, x_1795.w);
  let x_1797 : vec4<f32> = u_xlat3;
  let x_1799 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1797.x, x_1797.y, x_1797.z), vec3<f32>(x_1799.x, x_1799.y, x_1799.z));
  let x_1802 : f32 = u_xlat0;
  let x_1805 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1802) * 0.004f) + x_1805);
  let x_1807 : f32 = u_xlat24;
  u_xlat24 = max(x_1807, 0.0f);
  let x_1809 : vec4<f32> = u_xlat3;
  let x_1811 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1809.x, x_1809.y, x_1809.z), vec3<f32>(x_1811.x, x_1811.y, x_1811.z));
  let x_1816 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1816 + 0.0001f);
  let x_1820 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1820);
  let x_1824 : f32 = u_xlat3.x;
  let x_1825 : f32 = u_xlat24;
  u_xlat3.x = (x_1824 * x_1825);
  let x_1829 : f32 = u_xlat3.x;
  let x_1830 : f32 = u_xlat23;
  let x_1832 : f32 = u_xlat22;
  u_xlat22 = ((x_1829 * x_1830) + x_1832);
  let x_1834 : vec2<f32> = u_xlat14;
  let x_1837 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1834.x, x_1834.y, x_1834.x, x_1834.y) * vec4<f32>(x_1837.z, x_1837.z, x_1837.z, x_1837.z)) + vec4<f32>(10.414999962f, 24.335000992f, 12.497999191f, 29.201999664f));
  let x_1846 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1846.x, x_1846.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1849 : f32 = u_xlat23;
  u_xlat23 = fract(x_1849);
  let x_1851 : f32 = u_xlat23;
  u_xlat23 = (x_1851 * 52.982917786f);
  let x_1853 : f32 = u_xlat23;
  u_xlat23 = fract(x_1853);
  let x_1855 : f32 = u_xlat23;
  let x_1860 : vec2<f32> = (vec2<f32>(x_1855, x_1855) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1861 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1860.x, x_1860.y, x_1861.z, x_1861.w);
  let x_1864 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1864);
  let x_1866 : f32 = u_xlat23;
  u_xlat4.z = ((x_1866 * 2.0f) + -1.0f);
  let x_1871 : f32 = u_xlat3.y;
  u_xlat23 = (x_1871 * 6.283185482f);
  let x_1874 : f32 = u_xlat4.z;
  let x_1877 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1874) * x_1877) + 1.0f);
  let x_1882 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1882);
  let x_1885 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1885);
  let x_1888 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1888);
  let x_1892 : f32 = u_xlat3.x;
  let x_1894 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1892 * x_1894);
  let x_1898 : f32 = u_xlat3.x;
  let x_1900 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1898 * x_1900);
  let x_1903 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1903 * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_1907 : vec4<f32> = u_xlat2;
  let x_1910 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(vec3<f32>(x_1907.x, x_1907.y, x_1907.z)), x_1910);
  let x_1912 : f32 = u_xlat23;
  u_xlatb23 = (x_1912 >= 0.0f);
  let x_1914 : bool = u_xlatb23;
  if (x_1914) {
    let x_1918 : vec3<f32> = u_xlat4;
    x_1915 = -(x_1918);
  } else {
    let x_1921 : vec3<f32> = u_xlat4;
    x_1915 = x_1921;
  }
  let x_1922 : vec3<f32> = x_1915;
  u_xlat4 = x_1922;
  let x_1923 : vec3<f32> = u_xlat4;
  let x_1925 : vec4<f32> = x_34.x_SSAOParams;
  let x_1928 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_1923 * vec3<f32>(x_1925.y, x_1925.y, x_1925.y)) + x_1928);
  let x_1930 : vec3<f32> = u_xlat4;
  let x_1933 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1935 : vec2<f32> = (vec2<f32>(x_1930.y, x_1930.y) * vec2<f32>(x_1933.x, x_1933.y));
  let x_1936 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1935.x, x_1935.y, x_1936.z, x_1936.w);
  let x_1939 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1941 : vec3<f32> = u_xlat4;
  let x_1944 : vec4<f32> = u_xlat3;
  let x_1946 : vec2<f32> = ((vec2<f32>(x_1939.x, x_1939.y) * vec2<f32>(x_1941.x, x_1941.x)) + vec2<f32>(x_1944.x, x_1944.y));
  let x_1947 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1946.x, x_1946.y, x_1947.z, x_1947.w);
  let x_1950 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1952 : vec3<f32> = u_xlat4;
  let x_1955 : vec4<f32> = u_xlat3;
  let x_1957 : vec2<f32> = ((vec2<f32>(x_1950.x, x_1950.y) * vec2<f32>(x_1952.z, x_1952.z)) + vec2<f32>(x_1955.x, x_1955.y));
  let x_1958 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1957.x, x_1957.y, x_1958.z, x_1958.w);
  let x_1960 : vec4<f32> = u_xlat3;
  let x_1962 : vec2<f32> = (vec2<f32>(x_1960.x, x_1960.y) + vec2<f32>(1.0f, 1.0f));
  let x_1963 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1962.x, x_1962.y, x_1963.z, x_1963.w);
  let x_1965 : vec4<f32> = u_xlat3;
  let x_1967 : vec2<f32> = (vec2<f32>(x_1965.x, x_1965.y) * vec2<f32>(0.5f, 0.5f));
  let x_1968 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1967.x, x_1967.y, x_1968.z, x_1968.w);
  let x_1970 : vec4<f32> = u_xlat3;
  let x_1974 : vec2<f32> = clamp(vec2<f32>(x_1970.x, x_1970.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1975 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1974.x, x_1974.y, x_1975.z, x_1975.w);
  let x_1980 : vec4<f32> = u_xlat3;
  let x_1983 : f32 = x_34.x_GlobalMipBias.x;
  let x_1984 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1980.x, x_1980.y), x_1983);
  u_xlat23 = x_1984.x;
  let x_1987 : f32 = u_xlat7.x;
  let x_1989 : f32 = u_xlat23;
  let x_1992 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1987) * x_1989) + x_1992);
  let x_1995 : f32 = u_xlat0;
  let x_1997 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1995 + -(x_1997));
  let x_2002 : f32 = u_xlat11.x;
  let x_2005 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2002) < x_2005);
  let x_2007 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2007);
  let x_2010 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2010);
  let x_2012 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2012);
  let x_2014 : f32 = u_xlat23;
  let x_2016 : f32 = u_xlat11.x;
  u_xlat23 = (x_2014 * x_2016);
  let x_2019 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2019) + 1.0f);
  let x_2024 : f32 = u_xlat4.x;
  let x_2026 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2024 * x_2026);
  let x_2030 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2032 : vec4<f32> = u_xlat3;
  let x_2036 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2030.x, x_2030.y, x_2030.z) * vec3<f32>(x_2032.x, x_2032.x, x_2032.x)) + vec3<f32>(x_2036.x, x_2036.y, x_2036.z));
  let x_2040 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2042 : vec3<f32> = u_xlat10;
  let x_2045 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2040.x, x_2040.y, x_2040.z) * vec3<f32>(x_2042.x, x_2042.x, x_2042.x)) + x_2045);
  let x_2048 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2050 : vec3<f32> = u_xlat4;
  let x_2053 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2048.x, x_2048.y, x_2048.z) * vec3<f32>(x_2050.x, x_2050.x, x_2050.x)) + x_2053);
  let x_2055 : vec3<f32> = u_xlat1;
  let x_2057 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2055) + x_2057);
  let x_2059 : vec3<f32> = u_xlat4;
  let x_2060 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_2059, vec3<f32>(x_2060.x, x_2060.y, x_2060.z));
  let x_2064 : f32 = u_xlat0;
  let x_2068 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2064) * 0.004f) + x_2068);
  let x_2072 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2072, 0.0f);
  let x_2075 : vec3<f32> = u_xlat4;
  let x_2076 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2075, x_2076);
  let x_2080 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2080 + 0.0001f);
  let x_2084 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2084);
  let x_2088 : f32 = u_xlat10.x;
  let x_2090 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2088 * x_2090);
  let x_2094 : f32 = u_xlat3.x;
  let x_2095 : f32 = u_xlat23;
  let x_2097 : f32 = u_xlat22;
  u_xlat22 = ((x_2094 * x_2095) + x_2097);
  let x_2099 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_2099.z, x_2099.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2102 : f32 = u_xlat23;
  u_xlat23 = fract(x_2102);
  let x_2104 : f32 = u_xlat23;
  u_xlat23 = (x_2104 * 52.982917786f);
  let x_2106 : f32 = u_xlat23;
  u_xlat23 = fract(x_2106);
  let x_2108 : f32 = u_xlat23;
  let x_2113 : vec2<f32> = (vec2<f32>(x_2108, x_2108) + vec2<f32>(0.23828125f, 0.640625f));
  let x_2114 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2113.x, x_2113.y, x_2114.z, x_2114.w);
  let x_2117 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2117);
  let x_2119 : f32 = u_xlat23;
  u_xlat4.z = ((x_2119 * 2.0f) + -1.0f);
  let x_2124 : f32 = u_xlat3.y;
  u_xlat23 = (x_2124 * 6.283185482f);
  let x_2127 : f32 = u_xlat4.z;
  let x_2130 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2127) * x_2130) + 1.0f);
  let x_2135 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2135);
  let x_2138 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2138);
  let x_2141 : f32 = u_xlat23;
  u_xlat6.x = cos(x_2141);
  let x_2145 : f32 = u_xlat3.x;
  let x_2147 : f32 = u_xlat6.x;
  u_xlat4.x = (x_2145 * x_2147);
  let x_2151 : f32 = u_xlat3.x;
  let x_2153 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2151 * x_2153);
  let x_2156 : vec3<f32> = u_xlat4;
  let x_2159 : vec3<f32> = (x_2156 * vec3<f32>(0.935414374f, 0.935414374f, 0.935414374f));
  let x_2160 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2159.x, x_2159.y, x_2159.z, x_2160.w);
  let x_2162 : vec4<f32> = u_xlat2;
  let x_2165 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(vec3<f32>(x_2162.x, x_2162.y, x_2162.z)), vec3<f32>(x_2165.x, x_2165.y, x_2165.z));
  let x_2168 : f32 = u_xlat23;
  u_xlatb23 = (x_2168 >= 0.0f);
  let x_2170 : bool = u_xlatb23;
  if (x_2170) {
    let x_2174 : vec4<f32> = u_xlat3;
    x_2171 = -(vec3<f32>(x_2174.x, x_2174.y, x_2174.z));
  } else {
    let x_2178 : vec4<f32> = u_xlat3;
    x_2171 = vec3<f32>(x_2178.x, x_2178.y, x_2178.z);
  }
  let x_2180 : vec3<f32> = x_2171;
  let x_2181 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2180.x, x_2180.y, x_2180.z, x_2181.w);
  let x_2183 : vec4<f32> = u_xlat3;
  let x_2186 : vec4<f32> = x_34.x_SSAOParams;
  let x_2189 : vec3<f32> = u_xlat1;
  let x_2190 : vec3<f32> = ((vec3<f32>(x_2183.x, x_2183.y, x_2183.z) * vec3<f32>(x_2186.y, x_2186.y, x_2186.y)) + x_2189);
  let x_2191 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2190.x, x_2190.y, x_2190.z, x_2191.w);
  let x_2193 : vec4<f32> = u_xlat3;
  let x_2196 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2198 : vec2<f32> = (vec2<f32>(x_2193.y, x_2193.y) * vec2<f32>(x_2196.x, x_2196.y));
  let x_2199 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2198.x, x_2199.y, x_2198.y);
  let x_2202 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2204 : vec4<f32> = u_xlat3;
  let x_2207 : vec3<f32> = u_xlat10;
  let x_2209 : vec2<f32> = ((vec2<f32>(x_2202.x, x_2202.y) * vec2<f32>(x_2204.x, x_2204.x)) + vec2<f32>(x_2207.x, x_2207.z));
  let x_2210 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2209.x, x_2209.y, x_2210.z, x_2210.w);
  let x_2213 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2215 : vec4<f32> = u_xlat3;
  let x_2218 : vec4<f32> = u_xlat3;
  let x_2220 : vec2<f32> = ((vec2<f32>(x_2213.x, x_2213.y) * vec2<f32>(x_2215.z, x_2215.z)) + vec2<f32>(x_2218.x, x_2218.y));
  let x_2221 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2220.x, x_2220.y, x_2221.z, x_2221.w);
  let x_2223 : vec4<f32> = u_xlat3;
  let x_2225 : vec2<f32> = (vec2<f32>(x_2223.x, x_2223.y) + vec2<f32>(1.0f, 1.0f));
  let x_2226 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2225.x, x_2225.y, x_2226.z, x_2226.w);
  let x_2228 : vec4<f32> = u_xlat3;
  let x_2230 : vec2<f32> = (vec2<f32>(x_2228.x, x_2228.y) * vec2<f32>(0.5f, 0.5f));
  let x_2231 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2230.x, x_2230.y, x_2231.z, x_2231.w);
  let x_2233 : vec4<f32> = u_xlat3;
  let x_2237 : vec2<f32> = clamp(vec2<f32>(x_2233.x, x_2233.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2238 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2237.x, x_2237.y, x_2238.z, x_2238.w);
  let x_2243 : vec4<f32> = u_xlat3;
  let x_2246 : f32 = x_34.x_GlobalMipBias.x;
  let x_2247 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2243.x, x_2243.y), x_2246);
  u_xlat23 = x_2247.x;
  let x_2250 : f32 = u_xlat7.x;
  let x_2252 : f32 = u_xlat23;
  let x_2255 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_2250) * x_2252) + x_2255);
  let x_2257 : f32 = u_xlat0;
  let x_2258 : f32 = u_xlat17;
  u_xlat24 = (x_2257 + -(x_2258));
  let x_2261 : f32 = u_xlat24;
  let x_2264 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2261) < x_2264);
  let x_2266 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2266);
  let x_2268 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2268);
  let x_2270 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2270);
  let x_2272 : f32 = u_xlat23;
  let x_2273 : f32 = u_xlat24;
  u_xlat23 = (x_2272 * x_2273);
  let x_2276 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2276) + 1.0f);
  let x_2280 : f32 = u_xlat17;
  let x_2282 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_2280 * x_2282);
  let x_2285 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2287 : vec4<f32> = u_xlat3;
  let x_2291 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2285.x, x_2285.y, x_2285.z) * vec3<f32>(x_2287.x, x_2287.x, x_2287.x)) + vec3<f32>(x_2291.x, x_2291.y, x_2291.z));
  let x_2295 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2297 : vec3<f32> = u_xlat10;
  let x_2300 : vec3<f32> = u_xlat4;
  let x_2301 : vec3<f32> = ((vec3<f32>(x_2295.x, x_2295.y, x_2295.z) * vec3<f32>(x_2297.x, x_2297.x, x_2297.x)) + x_2300);
  let x_2302 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2301.x, x_2301.y, x_2302.z, x_2301.z);
  let x_2305 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2307 : f32 = u_xlat17;
  let x_2310 : vec4<f32> = u_xlat3;
  let x_2312 : vec3<f32> = ((vec3<f32>(x_2305.x, x_2305.y, x_2305.z) * vec3<f32>(x_2307, x_2307, x_2307)) + vec3<f32>(x_2310.x, x_2310.y, x_2310.w));
  let x_2313 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2312.x, x_2312.y, x_2312.z, x_2313.w);
  let x_2315 : vec3<f32> = u_xlat1;
  let x_2317 : vec4<f32> = u_xlat3;
  let x_2319 : vec3<f32> = (-(x_2315) + vec3<f32>(x_2317.x, x_2317.y, x_2317.z));
  let x_2320 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2319.x, x_2319.y, x_2319.z, x_2320.w);
  let x_2322 : vec4<f32> = u_xlat3;
  let x_2324 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_2322.x, x_2322.y, x_2322.z), vec3<f32>(x_2324.x, x_2324.y, x_2324.z));
  let x_2327 : f32 = u_xlat0;
  let x_2330 : f32 = u_xlat24;
  u_xlat24 = ((-(x_2327) * 0.004f) + x_2330);
  let x_2332 : f32 = u_xlat24;
  u_xlat24 = max(x_2332, 0.0f);
  let x_2334 : vec4<f32> = u_xlat3;
  let x_2336 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2334.x, x_2334.y, x_2334.z), vec3<f32>(x_2336.x, x_2336.y, x_2336.z));
  let x_2341 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2341 + 0.0001f);
  let x_2345 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2345);
  let x_2349 : f32 = u_xlat3.x;
  let x_2350 : f32 = u_xlat24;
  u_xlat3.x = (x_2349 * x_2350);
  let x_2354 : f32 = u_xlat3.x;
  let x_2355 : f32 = u_xlat23;
  let x_2357 : f32 = u_xlat22;
  u_xlat22 = ((x_2354 * x_2355) + x_2357);
  let x_2359 : vec2<f32> = u_xlat14;
  let x_2361 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat14 = ((x_2359 * vec2<f32>(x_2361.z, x_2361.z)) + vec2<f32>(14.580999374f, 34.069000244f));
  let x_2368 : vec2<f32> = u_xlat14;
  u_xlat14.x = dot(x_2368, vec2<f32>(0.067110561f, 0.00583715f));
  let x_2372 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_2372);
  let x_2376 : f32 = u_xlat14.x;
  u_xlat14.x = (x_2376 * 52.982917786f);
  let x_2380 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_2380);
  let x_2383 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_2383.x, x_2383.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2389 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_2389);
  let x_2393 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_2393 * 2.0f) + -1.0f);
  let x_2398 : f32 = u_xlat14.y;
  u_xlat14.x = (x_2398 * 6.283185482f);
  let x_2402 : f32 = u_xlat3.z;
  let x_2405 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_2402) * x_2405) + 1.0f);
  let x_2408 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_2408);
  let x_2411 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_2411);
  let x_2415 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_2415);
  let x_2418 : f32 = u_xlat21;
  let x_2420 : f32 = u_xlat5.x;
  u_xlat3.x = (x_2418 * x_2420);
  let x_2423 : f32 = u_xlat21;
  let x_2425 : f32 = u_xlat4.x;
  u_xlat3.y = (x_2423 * x_2425);
  let x_2428 : vec4<f32> = u_xlat2;
  let x_2431 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(-(vec3<f32>(x_2428.x, x_2428.y, x_2428.z)), vec3<f32>(x_2431.x, x_2431.y, x_2431.z));
  let x_2436 : f32 = u_xlat14.x;
  u_xlatb14 = (x_2436 >= 0.0f);
  let x_2438 : bool = u_xlatb14;
  if (x_2438) {
    let x_2442 : vec4<f32> = u_xlat3;
    x_2439 = -(vec3<f32>(x_2442.x, x_2442.y, x_2442.z));
  } else {
    let x_2446 : vec4<f32> = u_xlat3;
    x_2439 = vec3<f32>(x_2446.x, x_2446.y, x_2446.z);
  }
  let x_2448 : vec3<f32> = x_2439;
  let x_2449 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2448.x, x_2448.y, x_2448.z, x_2449.w);
  let x_2451 : vec4<f32> = u_xlat3;
  let x_2454 : vec4<f32> = x_34.x_SSAOParams;
  let x_2457 : vec3<f32> = u_xlat1;
  let x_2458 : vec3<f32> = ((vec3<f32>(x_2451.x, x_2451.y, x_2451.z) * vec3<f32>(x_2454.y, x_2454.y, x_2454.y)) + x_2457);
  let x_2459 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2458.x, x_2458.y, x_2458.z, x_2459.w);
  let x_2461 : vec4<f32> = u_xlat3;
  let x_2464 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_2461.y, x_2461.y) * vec2<f32>(x_2464.x, x_2464.y));
  let x_2468 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2470 : vec4<f32> = u_xlat3;
  let x_2473 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_2468.x, x_2468.y) * vec2<f32>(x_2470.x, x_2470.x)) + x_2473);
  let x_2476 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2478 : vec4<f32> = u_xlat3;
  let x_2481 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_2476.x, x_2476.y) * vec2<f32>(x_2478.z, x_2478.z)) + x_2481);
  let x_2483 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_2483 + vec2<f32>(1.0f, 1.0f));
  let x_2485 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_2485 * vec2<f32>(0.5f, 0.5f));
  let x_2487 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_2487, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2494 : vec2<f32> = u_xlat14;
  let x_2496 : f32 = x_34.x_GlobalMipBias.x;
  let x_2497 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2494, x_2496);
  u_xlat23 = x_2497.x;
  let x_2500 : f32 = u_xlat7.x;
  let x_2502 : f32 = u_xlat23;
  let x_2505 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_2500) * x_2502) + x_2505);
  let x_2509 : f32 = u_xlat7.x;
  let x_2511 : f32 = u_xlat0;
  u_xlat3.x = (-(x_2509) + x_2511);
  let x_2515 : f32 = u_xlat3.x;
  let x_2518 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_2515) < x_2518);
  let x_2520 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_2520);
  let x_2523 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2523);
  let x_2525 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2525);
  let x_2527 : f32 = u_xlat23;
  let x_2529 : f32 = u_xlat3.x;
  u_xlat23 = (x_2527 * x_2529);
  let x_2532 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_2532) + 1.0f);
  let x_2536 : f32 = u_xlat7.x;
  let x_2538 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_2536 * x_2538);
  let x_2542 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2544 : vec2<f32> = u_xlat14;
  let x_2548 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_2550 : vec3<f32> = ((vec3<f32>(x_2542.x, x_2542.y, x_2542.z) * vec3<f32>(x_2544.x, x_2544.x, x_2544.x)) + vec3<f32>(x_2548.x, x_2548.y, x_2548.z));
  let x_2551 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2550.x, x_2550.y, x_2550.z, x_2551.w);
  let x_2554 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2556 : f32 = u_xlat21;
  let x_2559 : vec4<f32> = u_xlat3;
  let x_2561 : vec3<f32> = ((vec3<f32>(x_2554.x, x_2554.y, x_2554.z) * vec3<f32>(x_2556, x_2556, x_2556)) + vec3<f32>(x_2559.x, x_2559.y, x_2559.z));
  let x_2562 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2561.x, x_2561.y, x_2561.z, x_2562.w);
  let x_2565 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2567 : vec3<f32> = u_xlat7;
  let x_2570 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_2565.x, x_2565.y, x_2565.z) * vec3<f32>(x_2567.x, x_2567.x, x_2567.x)) + vec3<f32>(x_2570.x, x_2570.y, x_2570.z));
  let x_2573 : vec3<f32> = u_xlat1;
  let x_2575 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_2573) + x_2575);
  let x_2577 : vec3<f32> = u_xlat7;
  let x_2578 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(x_2577, vec3<f32>(x_2578.x, x_2578.y, x_2578.z));
  let x_2582 : f32 = u_xlat0;
  let x_2586 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_2582) * 0.004f) + x_2586);
  let x_2590 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2590, 0.0f);
  let x_2593 : vec3<f32> = u_xlat7;
  let x_2594 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_2593, x_2594);
  let x_2598 : f32 = u_xlat7.x;
  u_xlat7.x = (x_2598 + 0.0001f);
  let x_2602 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_2602);
  let x_2606 : f32 = u_xlat7.x;
  let x_2608 : f32 = u_xlat1.x;
  u_xlat7.x = (x_2606 * x_2608);
  let x_2612 : f32 = u_xlat7.x;
  let x_2613 : f32 = u_xlat23;
  let x_2615 : f32 = u_xlat22;
  u_xlat7.x = ((x_2612 * x_2613) + x_2615);
  let x_2619 : f32 = u_xlat7.x;
  let x_2621 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_2619 * x_2621);
  let x_2625 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_2625);
  let x_2628 : f32 = u_xlat0;
  let x_2631 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_2628) * x_2631) + 1.0f);
  let x_2634 : f32 = u_xlat0;
  let x_2635 : f32 = u_xlat0;
  u_xlat0 = (x_2634 * x_2635);
  let x_2638 : f32 = u_xlat7.x;
  let x_2640 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_2638 * x_2640);
  let x_2643 : f32 = u_xlat0;
  let x_2645 : f32 = u_xlat7.x;
  u_xlat0 = (x_2643 * x_2645);
  let x_2647 : f32 = u_xlat0;
  u_xlat0 = (x_2647 * 0.125f);
  let x_2650 : f32 = u_xlat0;
  u_xlat0 = clamp(x_2650, 0.0f, 1.0f);
  let x_2652 : f32 = u_xlat0;
  u_xlat0 = log2(x_2652);
  let x_2654 : f32 = u_xlat0;
  u_xlat0 = (x_2654 * 0.600000024f);
  let x_2657 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_2657);
  let x_2661 : vec4<f32> = u_xlat2;
  let x_2664 : vec3<f32> = ((vec3<f32>(x_2661.x, x_2661.y, x_2661.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_2665 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2665.x, x_2664.x, x_2664.y, x_2664.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

