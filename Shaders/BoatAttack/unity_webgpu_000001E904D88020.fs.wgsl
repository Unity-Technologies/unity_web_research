type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(4) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_137 : PGlobals;

@group(1) @binding(4) var<uniform> x_147 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_248 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3533 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb0 : bool;
  var u_xlatb64 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat56 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var u_xlat22 : vec3<f32>;
  var x_1592 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat44 : f32;
  var x_1637 : f32;
  var x_1715 : f32;
  var x_1727 : f32;
  var x_1738 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : bool;
  var x_3104 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat21;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat21 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_114 : vec3<f32> = u_xlat21;
  let x_115 : vec3<f32> = u_xlat0;
  let x_117 : vec3<f32> = (x_114 * vec3<f32>(x_115.x, x_115.x, x_115.x));
  let x_118 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_117.x, x_117.y, x_117.z, x_118.w);
  let x_133 : vec4<f32> = vs_INTERP3;
  let x_140 : f32 = x_137.x_GlobalMipBias.x;
  let x_141 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_133.x, x_133.y), x_140);
  u_xlat4 = x_141;
  let x_143 : vec4<f32> = u_xlat4;
  let x_150 : vec4<f32> = x_147.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_150.x, x_150.y, x_150.z));
  let x_159 : vec4<f32> = vs_INTERP3;
  let x_162 : f32 = x_137.x_GlobalMipBias.x;
  let x_163 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_159.x, x_159.y), x_162);
  u_xlat6 = vec4<f32>(x_163.w, x_163.x, x_163.y, x_163.z);
  let x_166 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_166.y, x_166.z, x_166.w, x_166.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_173 : vec4<f32> = u_xlat7;
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_173, x_174);
  let x_178 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_178);
  let x_182 : vec3<f32> = u_xlat0;
  let x_184 : vec4<f32> = u_xlat7;
  u_xlat27 = (vec3<f32>(x_182.x, x_182.x, x_182.x) * vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_189 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_189 * 200.0f);
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_194, 1.0f);
  let x_197 : vec3<f32> = u_xlat0;
  let x_199 : vec4<f32> = u_xlat4;
  let x_201 : vec3<f32> = (vec3<f32>(x_197.x, x_197.x, x_197.x) * vec3<f32>(x_199.x, x_199.y, x_199.z));
  let x_202 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_204 : vec4<f32> = u_xlat3;
  let x_206 : vec3<f32> = u_xlat27;
  let x_208 : vec3<f32> = (vec3<f32>(x_204.x, x_204.y, x_204.z) * vec3<f32>(x_206.y, x_206.y, x_206.y));
  let x_209 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_208.x, x_208.y, x_208.z, x_209.w);
  let x_211 : vec3<f32> = u_xlat27;
  let x_213 : vec3<f32> = u_xlat2;
  let x_215 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_211.x, x_211.x, x_211.x) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.z));
  let x_218 : vec3<f32> = u_xlat27;
  let x_220 : vec3<f32> = u_xlat1;
  let x_222 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_218.z, x_218.z, x_218.z) * x_220) + x_222);
  let x_224 : vec3<f32> = u_xlat1;
  let x_225 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_224, x_225);
  let x_229 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_229, 1.17549435e-37f);
  let x_234 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_234);
  let x_237 : vec3<f32> = u_xlat0;
  let x_239 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_237.x, x_237.x, x_237.x) * x_239);
  let x_242 : vec3<f32> = vs_INTERP0;
  let x_251 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_242.y, x_242.y, x_242.y) * vec3<f32>(x_251.x, x_251.y, x_251.z));
  let x_255 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][0i];
  let x_257 : vec3<f32> = vs_INTERP0;
  let x_260 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(x_257.x, x_257.x, x_257.x)) + x_260);
  let x_264 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][2i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.z, x_266.z, x_266.z)) + x_269);
  let x_271 : vec3<f32> = u_xlat2;
  let x_273 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_271 + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_279 : f32 = x_248.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_279);
  let x_281 : bool = u_xlatb0;
  if (x_281) {
    let x_286 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb64 = (x_286 == 1.0f);
    let x_288 : bool = u_xlatb64;
    if (x_288) {
      let x_291 : vec3<f32> = u_xlat2;
      let x_295 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_291.x, x_291.y, x_291.x, x_291.y) + x_295);
      let x_298 : vec4<f32> = u_xlat3;
      let x_299 : vec2<f32> = vec2<f32>(x_298.x, x_298.y);
      let x_301 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_299.x, x_299.y, x_301);
      let x_313 : vec3<f32> = txVec0;
      let x_315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_313.xy, x_313.z);
      u_xlat7.x = x_315;
      let x_318 : vec4<f32> = u_xlat3;
      let x_319 : vec2<f32> = vec2<f32>(x_318.z, x_318.w);
      let x_321 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_319.x, x_319.y, x_321);
      let x_328 : vec3<f32> = txVec1;
      let x_330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_328.xy, x_328.z);
      u_xlat7.y = x_330;
      let x_332 : vec3<f32> = u_xlat2;
      let x_336 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_332.x, x_332.y, x_332.x, x_332.y) + x_336);
      let x_339 : vec4<f32> = u_xlat3;
      let x_340 : vec2<f32> = vec2<f32>(x_339.x, x_339.y);
      let x_342 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_340.x, x_340.y, x_342);
      let x_349 : vec3<f32> = txVec2;
      let x_351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_349.xy, x_349.z);
      u_xlat7.z = x_351;
      let x_354 : vec4<f32> = u_xlat3;
      let x_355 : vec2<f32> = vec2<f32>(x_354.z, x_354.w);
      let x_357 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_364 : vec3<f32> = txVec3;
      let x_366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_364.xy, x_364.z);
      u_xlat7.w = x_366;
      let x_369 : vec4<f32> = u_xlat7;
      u_xlat64 = dot(x_369, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_376 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb65 = (x_376 == 2.0f);
      let x_378 : bool = u_xlatb65;
      if (x_378) {
        let x_381 : vec3<f32> = u_xlat2;
        let x_385 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_390 : vec2<f32> = ((vec2<f32>(x_381.x, x_381.y) * vec2<f32>(x_385.z, x_385.w)) + vec2<f32>(0.5f, 0.5f));
        let x_391 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat3;
        let x_395 : vec2<f32> = floor(vec2<f32>(x_393.x, x_393.y));
        let x_396 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_400 : vec3<f32> = u_xlat2;
        let x_403 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_406 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_400.x, x_400.y) * vec2<f32>(x_403.z, x_403.w)) + -(vec2<f32>(x_406.x, x_406.y)));
        let x_410 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_410.x, x_410.x, x_410.y, x_410.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_415 : vec4<f32> = u_xlat7;
        let x_417 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_415.x, x_415.x, x_415.z, x_415.z) * vec4<f32>(x_417.x, x_417.x, x_417.z, x_417.z));
        let x_420 : vec4<f32> = u_xlat8;
        let x_424 : vec2<f32> = (vec2<f32>(x_420.y, x_420.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_425 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_424.x, x_425.y, x_424.y, x_425.w);
        let x_427 : vec4<f32> = u_xlat8;
        let x_430 : vec2<f32> = u_xlat45;
        let x_432 : vec2<f32> = ((vec2<f32>(x_427.x, x_427.z) * vec2<f32>(0.5f, 0.5f)) + -(x_430));
        let x_433 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_432.x, x_432.y, x_433.z, x_433.w);
        let x_436 : vec2<f32> = u_xlat45;
        u_xlat50 = (-(x_436) + vec2<f32>(1.0f, 1.0f));
        let x_441 : vec2<f32> = u_xlat45;
        let x_443 : vec2<f32> = min(x_441, vec2<f32>(0.0f, 0.0f));
        let x_444 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_446 : vec4<f32> = u_xlat9;
        let x_449 : vec4<f32> = u_xlat9;
        let x_452 : vec2<f32> = u_xlat50;
        let x_453 : vec2<f32> = ((-(vec2<f32>(x_446.x, x_446.y)) * vec2<f32>(x_449.x, x_449.y)) + x_452);
        let x_454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_456 : vec2<f32> = u_xlat45;
        u_xlat45 = max(x_456, vec2<f32>(0.0f, 0.0f));
        let x_458 : vec2<f32> = u_xlat45;
        let x_460 : vec2<f32> = u_xlat45;
        let x_462 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_458) * x_460) + vec2<f32>(x_462.y, x_462.w));
        let x_465 : vec4<f32> = u_xlat9;
        let x_467 : vec2<f32> = (vec2<f32>(x_465.x, x_465.y) + vec2<f32>(1.0f, 1.0f));
        let x_468 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
        let x_470 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_470 + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec4<f32> = u_xlat8;
        let x_477 : vec2<f32> = (vec2<f32>(x_473.x, x_473.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_477.x, x_477.y, x_478.z, x_478.w);
        let x_480 : vec2<f32> = u_xlat50;
        let x_481 : vec2<f32> = (x_480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_482 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_481.x, x_481.y, x_482.z, x_482.w);
        let x_484 : vec4<f32> = u_xlat9;
        let x_486 : vec2<f32> = (vec2<f32>(x_484.x, x_484.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_487 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_490 : vec2<f32> = u_xlat45;
        let x_491 : vec2<f32> = (x_490 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_491.x, x_491.y, x_492.z, x_492.w);
        let x_494 : vec4<f32> = u_xlat7;
        u_xlat45 = (vec2<f32>(x_494.y, x_494.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_498 : f32 = u_xlat9.x;
        u_xlat10.z = x_498;
        let x_501 : f32 = u_xlat45.x;
        u_xlat10.w = x_501;
        let x_504 : f32 = u_xlat11.x;
        u_xlat8.z = x_504;
        let x_507 : f32 = u_xlat7.x;
        u_xlat8.w = x_507;
        let x_510 : vec4<f32> = u_xlat8;
        let x_512 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_510.z, x_510.w, x_510.x, x_510.z) + vec4<f32>(x_512.z, x_512.w, x_512.x, x_512.z));
        let x_516 : f32 = u_xlat10.y;
        u_xlat9.z = x_516;
        let x_519 : f32 = u_xlat45.y;
        u_xlat9.w = x_519;
        let x_522 : f32 = u_xlat8.y;
        u_xlat11.z = x_522;
        let x_525 : f32 = u_xlat7.z;
        u_xlat11.w = x_525;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        let x_531 : vec3<f32> = (vec3<f32>(x_527.z, x_527.y, x_527.w) + vec3<f32>(x_529.z, x_529.y, x_529.w));
        let x_532 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
        let x_534 : vec4<f32> = u_xlat8;
        let x_536 : vec4<f32> = u_xlat12;
        let x_538 : vec3<f32> = (vec3<f32>(x_534.x, x_534.z, x_534.w) / vec3<f32>(x_536.z, x_536.w, x_536.y));
        let x_539 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_538.z, x_539.w);
        let x_541 : vec4<f32> = u_xlat8;
        let x_547 : vec3<f32> = (vec3<f32>(x_541.x, x_541.y, x_541.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
        let x_550 : vec4<f32> = u_xlat11;
        let x_552 : vec4<f32> = u_xlat7;
        let x_554 : vec3<f32> = (vec3<f32>(x_550.z, x_550.y, x_550.w) / vec3<f32>(x_552.x, x_552.y, x_552.z));
        let x_555 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
        let x_557 : vec4<f32> = u_xlat9;
        let x_559 : vec3<f32> = (vec3<f32>(x_557.x, x_557.y, x_557.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
        let x_562 : vec4<f32> = u_xlat8;
        let x_565 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_567 : vec3<f32> = (vec3<f32>(x_562.y, x_562.x, x_562.z) * vec3<f32>(x_565.x, x_565.x, x_565.x));
        let x_568 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat9;
        let x_573 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_575 : vec3<f32> = (vec3<f32>(x_570.x, x_570.y, x_570.z) * vec3<f32>(x_573.y, x_573.y, x_573.y));
        let x_576 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
        let x_579 : f32 = u_xlat9.x;
        u_xlat8.w = x_579;
        let x_581 : vec4<f32> = u_xlat3;
        let x_584 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_587 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_581.x, x_581.y, x_581.x, x_581.y) * vec4<f32>(x_584.x, x_584.y, x_584.x, x_584.y)) + vec4<f32>(x_587.y, x_587.w, x_587.x, x_587.w));
        let x_590 : vec4<f32> = u_xlat3;
        let x_593 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_596 : vec4<f32> = u_xlat8;
        u_xlat45 = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_593.x, x_593.y)) + vec2<f32>(x_596.z, x_596.w));
        let x_600 : f32 = u_xlat8.y;
        u_xlat9.w = x_600;
        let x_602 : vec4<f32> = u_xlat9;
        let x_603 : vec2<f32> = vec2<f32>(x_602.y, x_602.z);
        let x_604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_604.x, x_603.x, x_604.z, x_603.y);
        let x_606 : vec4<f32> = u_xlat3;
        let x_609 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_612 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_606.x, x_606.y, x_606.x, x_606.y) * vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y)) + vec4<f32>(x_612.x, x_612.y, x_612.z, x_612.y));
        let x_615 : vec4<f32> = u_xlat3;
        let x_618 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_615.x, x_615.y, x_615.x, x_615.y) * vec4<f32>(x_618.x, x_618.y, x_618.x, x_618.y)) + vec4<f32>(x_621.w, x_621.y, x_621.w, x_621.z));
        let x_624 : vec4<f32> = u_xlat3;
        let x_627 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_630 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_624.x, x_624.y, x_624.x, x_624.y) * vec4<f32>(x_627.x, x_627.y, x_627.x, x_627.y)) + vec4<f32>(x_630.x, x_630.w, x_630.z, x_630.w));
        let x_634 : vec4<f32> = u_xlat7;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_634.x, x_634.x, x_634.x, x_634.y) * vec4<f32>(x_636.z, x_636.w, x_636.y, x_636.z));
        let x_640 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_640.y, x_640.y, x_640.z, x_640.z) * x_642);
        let x_646 : f32 = u_xlat7.z;
        let x_648 : f32 = u_xlat12.y;
        u_xlat65 = (x_646 * x_648);
        let x_651 : vec4<f32> = u_xlat10;
        let x_652 : vec2<f32> = vec2<f32>(x_651.x, x_651.y);
        let x_654 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_652.x, x_652.y, x_654);
        let x_661 : vec3<f32> = txVec4;
        let x_663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_661.xy, x_661.z);
        u_xlat3.x = x_663;
        let x_666 : vec4<f32> = u_xlat10;
        let x_667 : vec2<f32> = vec2<f32>(x_666.z, x_666.w);
        let x_669 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_667.x, x_667.y, x_669);
        let x_677 : vec3<f32> = txVec5;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat24 = x_679;
        let x_680 : f32 = u_xlat24;
        let x_682 : f32 = u_xlat13.y;
        u_xlat24 = (x_680 * x_682);
        let x_685 : f32 = u_xlat13.x;
        let x_687 : f32 = u_xlat3.x;
        let x_689 : f32 = u_xlat24;
        u_xlat3.x = ((x_685 * x_687) + x_689);
        let x_693 : vec2<f32> = u_xlat45;
        let x_695 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_693.x, x_693.y, x_695);
        let x_702 : vec3<f32> = txVec6;
        let x_704 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_702.xy, x_702.z);
        u_xlat24 = x_704;
        let x_706 : f32 = u_xlat13.z;
        let x_707 : f32 = u_xlat24;
        let x_710 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_706 * x_707) + x_710);
        let x_714 : vec4<f32> = u_xlat9;
        let x_715 : vec2<f32> = vec2<f32>(x_714.x, x_714.y);
        let x_717 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_715.x, x_715.y, x_717);
        let x_724 : vec3<f32> = txVec7;
        let x_726 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_724.xy, x_724.z);
        u_xlat24 = x_726;
        let x_728 : f32 = u_xlat13.w;
        let x_729 : f32 = u_xlat24;
        let x_732 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_728 * x_729) + x_732);
        let x_736 : vec4<f32> = u_xlat11;
        let x_737 : vec2<f32> = vec2<f32>(x_736.x, x_736.y);
        let x_739 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_737.x, x_737.y, x_739);
        let x_746 : vec3<f32> = txVec8;
        let x_748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_746.xy, x_746.z);
        u_xlat24 = x_748;
        let x_750 : f32 = u_xlat14.x;
        let x_751 : f32 = u_xlat24;
        let x_754 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_750 * x_751) + x_754);
        let x_758 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = vec2<f32>(x_758.z, x_758.w);
        let x_761 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_759.x, x_759.y, x_761);
        let x_768 : vec3<f32> = txVec9;
        let x_770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_768.xy, x_768.z);
        u_xlat24 = x_770;
        let x_772 : f32 = u_xlat14.y;
        let x_773 : f32 = u_xlat24;
        let x_776 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_772 * x_773) + x_776);
        let x_780 : vec4<f32> = u_xlat9;
        let x_781 : vec2<f32> = vec2<f32>(x_780.z, x_780.w);
        let x_783 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_781.x, x_781.y, x_783);
        let x_790 : vec3<f32> = txVec10;
        let x_792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_790.xy, x_790.z);
        u_xlat24 = x_792;
        let x_794 : f32 = u_xlat14.z;
        let x_795 : f32 = u_xlat24;
        let x_798 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_794 * x_795) + x_798);
        let x_802 : vec4<f32> = u_xlat8;
        let x_803 : vec2<f32> = vec2<f32>(x_802.x, x_802.y);
        let x_805 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec11;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat24 = x_814;
        let x_816 : f32 = u_xlat14.w;
        let x_817 : f32 = u_xlat24;
        let x_820 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_816 * x_817) + x_820);
        let x_824 : vec4<f32> = u_xlat8;
        let x_825 : vec2<f32> = vec2<f32>(x_824.z, x_824.w);
        let x_827 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_825.x, x_825.y, x_827);
        let x_834 : vec3<f32> = txVec12;
        let x_836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_834.xy, x_834.z);
        u_xlat24 = x_836;
        let x_837 : f32 = u_xlat65;
        let x_838 : f32 = u_xlat24;
        let x_841 : f32 = u_xlat3.x;
        u_xlat64 = ((x_837 * x_838) + x_841);
      } else {
        let x_844 : vec3<f32> = u_xlat2;
        let x_847 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_850 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_847.z, x_847.w)) + vec2<f32>(0.5f, 0.5f));
        let x_851 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
        let x_853 : vec4<f32> = u_xlat3;
        let x_855 : vec2<f32> = floor(vec2<f32>(x_853.x, x_853.y));
        let x_856 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
        let x_858 : vec3<f32> = u_xlat2;
        let x_861 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_864 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_858.x, x_858.y) * vec2<f32>(x_861.z, x_861.w)) + -(vec2<f32>(x_864.x, x_864.y)));
        let x_868 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_868.x, x_868.x, x_868.y, x_868.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_871.x, x_871.x, x_871.z, x_871.z) * vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z));
        let x_876 : vec4<f32> = u_xlat8;
        let x_880 : vec2<f32> = (vec2<f32>(x_876.y, x_876.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_881 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_881.x, x_880.x, x_881.z, x_880.y);
        let x_883 : vec4<f32> = u_xlat8;
        let x_886 : vec2<f32> = u_xlat45;
        let x_888 : vec2<f32> = ((vec2<f32>(x_883.x, x_883.z) * vec2<f32>(0.5f, 0.5f)) + -(x_886));
        let x_889 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_888.x, x_889.y, x_888.y, x_889.w);
        let x_891 : vec2<f32> = u_xlat45;
        let x_893 : vec2<f32> = (-(x_891) + vec2<f32>(1.0f, 1.0f));
        let x_894 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
        let x_896 : vec2<f32> = u_xlat45;
        u_xlat50 = min(x_896, vec2<f32>(0.0f, 0.0f));
        let x_898 : vec2<f32> = u_xlat50;
        let x_900 : vec2<f32> = u_xlat50;
        let x_902 : vec4<f32> = u_xlat8;
        let x_904 : vec2<f32> = ((-(x_898) * x_900) + vec2<f32>(x_902.x, x_902.y));
        let x_905 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_904.x, x_904.y, x_905.z, x_905.w);
        let x_907 : vec2<f32> = u_xlat45;
        u_xlat50 = max(x_907, vec2<f32>(0.0f, 0.0f));
        let x_910 : vec2<f32> = u_xlat50;
        let x_912 : vec2<f32> = u_xlat50;
        let x_914 : vec4<f32> = u_xlat7;
        let x_916 : vec2<f32> = ((-(x_910) * x_912) + vec2<f32>(x_914.y, x_914.w));
        let x_917 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_916.x, x_917.y, x_916.y);
        let x_919 : vec4<f32> = u_xlat8;
        let x_922 : vec2<f32> = (vec2<f32>(x_919.x, x_919.y) + vec2<f32>(2.0f, 2.0f));
        let x_923 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec3<f32> = u_xlat28;
        let x_927 : vec2<f32> = (vec2<f32>(x_925.x, x_925.z) + vec2<f32>(2.0f, 2.0f));
        let x_928 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_928.x, x_927.x, x_928.z, x_927.y);
        let x_931 : f32 = u_xlat7.y;
        u_xlat10.z = (x_931 * 0.081632003f);
        let x_935 : vec4<f32> = u_xlat7;
        let x_938 : vec3<f32> = (vec3<f32>(x_935.z, x_935.x, x_935.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_939 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_938.x, x_938.y, x_938.z, x_939.w);
        let x_941 : vec4<f32> = u_xlat8;
        let x_944 : vec2<f32> = (vec2<f32>(x_941.x, x_941.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_945 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_944.x, x_944.y, x_945.z, x_945.w);
        let x_948 : f32 = u_xlat11.y;
        u_xlat10.x = x_948;
        let x_950 : vec2<f32> = u_xlat45;
        let x_957 : vec2<f32> = ((vec2<f32>(x_950.x, x_950.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_958.x, x_957.x, x_958.z, x_957.y);
        let x_960 : vec2<f32> = u_xlat45;
        let x_964 : vec2<f32> = ((vec2<f32>(x_960.x, x_960.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_965 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_964.x, x_965.y, x_964.y, x_965.w);
        let x_968 : f32 = u_xlat7.x;
        u_xlat8.y = x_968;
        let x_971 : f32 = u_xlat9.y;
        u_xlat8.w = x_971;
        let x_973 : vec4<f32> = u_xlat8;
        let x_974 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_973 + x_974);
        let x_976 : vec2<f32> = u_xlat45;
        let x_979 : vec2<f32> = ((vec2<f32>(x_976.y, x_976.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_980 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_980.x, x_979.x, x_980.z, x_979.y);
        let x_982 : vec2<f32> = u_xlat45;
        let x_985 : vec2<f32> = ((vec2<f32>(x_982.y, x_982.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_986 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_985.x, x_986.y, x_985.y, x_986.w);
        let x_989 : f32 = u_xlat7.y;
        u_xlat9.y = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_991 + x_992);
        let x_994 : vec4<f32> = u_xlat8;
        let x_995 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_994 / x_995);
        let x_997 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_997 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1003 : vec4<f32> = u_xlat9;
        let x_1004 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1003 / x_1004);
        let x_1006 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1006 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1008 : vec4<f32> = u_xlat8;
        let x_1011 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1008.w, x_1008.x, x_1008.y, x_1008.z) * vec4<f32>(x_1011.x, x_1011.x, x_1011.x, x_1011.x));
        let x_1014 : vec4<f32> = u_xlat9;
        let x_1017 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1014.x, x_1014.w, x_1014.y, x_1014.z) * vec4<f32>(x_1017.y, x_1017.y, x_1017.y, x_1017.y));
        let x_1020 : vec4<f32> = u_xlat8;
        let x_1021 : vec3<f32> = vec3<f32>(x_1020.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1021.x, x_1022.y, x_1021.y, x_1021.z);
        let x_1025 : f32 = u_xlat9.x;
        u_xlat11.y = x_1025;
        let x_1027 : vec4<f32> = u_xlat3;
        let x_1030 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1033 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1027.x, x_1027.y, x_1027.x, x_1027.y) * vec4<f32>(x_1030.x, x_1030.y, x_1030.x, x_1030.y)) + vec4<f32>(x_1033.x, x_1033.y, x_1033.z, x_1033.y));
        let x_1036 : vec4<f32> = u_xlat3;
        let x_1039 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1042 : vec4<f32> = u_xlat11;
        u_xlat45 = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.x, x_1039.y)) + vec2<f32>(x_1042.w, x_1042.y));
        let x_1046 : f32 = u_xlat11.y;
        u_xlat8.y = x_1046;
        let x_1049 : f32 = u_xlat9.z;
        u_xlat11.y = x_1049;
        let x_1051 : vec4<f32> = u_xlat3;
        let x_1054 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1057 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1051.x, x_1051.y, x_1051.x, x_1051.y) * vec4<f32>(x_1054.x, x_1054.y, x_1054.x, x_1054.y)) + vec4<f32>(x_1057.x, x_1057.y, x_1057.z, x_1057.y));
        let x_1060 : vec4<f32> = u_xlat3;
        let x_1063 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1068 : vec2<f32> = ((vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(x_1063.x, x_1063.y)) + vec2<f32>(x_1066.w, x_1066.y));
        let x_1069 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat11.y;
        u_xlat8.z = x_1072;
        let x_1075 : vec4<f32> = u_xlat3;
        let x_1078 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1081 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1075.x, x_1075.y, x_1075.x, x_1075.y) * vec4<f32>(x_1078.x, x_1078.y, x_1078.x, x_1078.y)) + vec4<f32>(x_1081.x, x_1081.y, x_1081.x, x_1081.z));
        let x_1085 : f32 = u_xlat9.w;
        u_xlat11.y = x_1085;
        let x_1088 : vec4<f32> = u_xlat3;
        let x_1091 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1094 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1088.x, x_1088.y, x_1088.x, x_1088.y) * vec4<f32>(x_1091.x, x_1091.y, x_1091.x, x_1091.y)) + vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1094.y));
        let x_1098 : vec4<f32> = u_xlat3;
        let x_1101 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1104 : vec4<f32> = u_xlat11;
        u_xlat29 = ((vec2<f32>(x_1098.x, x_1098.y) * vec2<f32>(x_1101.x, x_1101.y)) + vec2<f32>(x_1104.w, x_1104.y));
        let x_1108 : f32 = u_xlat11.y;
        u_xlat8.w = x_1108;
        let x_1111 : vec4<f32> = u_xlat3;
        let x_1114 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1117 : vec4<f32> = u_xlat8;
        u_xlat56 = ((vec2<f32>(x_1111.x, x_1111.y) * vec2<f32>(x_1114.x, x_1114.y)) + vec2<f32>(x_1117.x, x_1117.w));
        let x_1120 : vec4<f32> = u_xlat11;
        let x_1121 : vec3<f32> = vec3<f32>(x_1120.x, x_1120.z, x_1120.w);
        let x_1122 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1121.x, x_1122.y, x_1121.y, x_1121.z);
        let x_1124 : vec4<f32> = u_xlat3;
        let x_1127 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1134 : vec4<f32> = u_xlat3;
        let x_1137 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1140 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_1134.x, x_1134.y) * vec2<f32>(x_1137.x, x_1137.y)) + vec2<f32>(x_1140.w, x_1140.y));
        let x_1144 : f32 = u_xlat8.x;
        u_xlat9.x = x_1144;
        let x_1146 : vec4<f32> = u_xlat3;
        let x_1149 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1152 : vec4<f32> = u_xlat9;
        let x_1154 : vec2<f32> = ((vec2<f32>(x_1146.x, x_1146.y) * vec2<f32>(x_1149.x, x_1149.y)) + vec2<f32>(x_1152.x, x_1152.y));
        let x_1155 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1154.x, x_1154.y, x_1155.z, x_1155.w);
        let x_1158 : vec4<f32> = u_xlat7;
        let x_1160 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1158.x, x_1158.x, x_1158.x, x_1158.x) * x_1160);
        let x_1163 : vec4<f32> = u_xlat7;
        let x_1165 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1163.y, x_1163.y, x_1163.y, x_1163.y) * x_1165);
        let x_1168 : vec4<f32> = u_xlat7;
        let x_1170 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1168.z, x_1168.z, x_1168.z, x_1168.z) * x_1170);
        let x_1172 : vec4<f32> = u_xlat7;
        let x_1174 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1172.w, x_1172.w, x_1172.w, x_1172.w) * x_1174);
        let x_1177 : vec4<f32> = u_xlat12;
        let x_1178 : vec2<f32> = vec2<f32>(x_1177.x, x_1177.y);
        let x_1180 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1178.x, x_1178.y, x_1180);
        let x_1187 : vec3<f32> = txVec13;
        let x_1189 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1187.xy, x_1187.z);
        u_xlat65 = x_1189;
        let x_1191 : vec4<f32> = u_xlat12;
        let x_1192 : vec2<f32> = vec2<f32>(x_1191.z, x_1191.w);
        let x_1194 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1192.x, x_1192.y, x_1194);
        let x_1202 : vec3<f32> = txVec14;
        let x_1204 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1202.xy, x_1202.z);
        u_xlat68 = x_1204;
        let x_1205 : f32 = u_xlat68;
        let x_1207 : f32 = u_xlat17.y;
        u_xlat68 = (x_1205 * x_1207);
        let x_1210 : f32 = u_xlat17.x;
        let x_1211 : f32 = u_xlat65;
        let x_1213 : f32 = u_xlat68;
        u_xlat65 = ((x_1210 * x_1211) + x_1213);
        let x_1216 : vec2<f32> = u_xlat45;
        let x_1218 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec15;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat45.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat45.x;
        let x_1234 : f32 = u_xlat65;
        u_xlat65 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat15;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.x, x_1237.y);
        let x_1240 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec16;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat45.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat45.x;
        let x_1256 : f32 = u_xlat65;
        u_xlat65 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat13;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec17;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat45.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat45.x;
        let x_1278 : f32 = u_xlat65;
        u_xlat65 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat13;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec18;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat45.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat45.x;
        let x_1300 : f32 = u_xlat65;
        u_xlat65 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec4<f32> = u_xlat14;
        let x_1304 : vec2<f32> = vec2<f32>(x_1303.x, x_1303.y);
        let x_1306 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1304.x, x_1304.y, x_1306);
        let x_1313 : vec3<f32> = txVec19;
        let x_1315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1313.xy, x_1313.z);
        u_xlat45.x = x_1315;
        let x_1318 : f32 = u_xlat18.z;
        let x_1320 : f32 = u_xlat45.x;
        let x_1322 : f32 = u_xlat65;
        u_xlat65 = ((x_1318 * x_1320) + x_1322);
        let x_1325 : vec4<f32> = u_xlat15;
        let x_1326 : vec2<f32> = vec2<f32>(x_1325.z, x_1325.w);
        let x_1328 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1326.x, x_1326.y, x_1328);
        let x_1335 : vec3<f32> = txVec20;
        let x_1337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1335.xy, x_1335.z);
        u_xlat45.x = x_1337;
        let x_1340 : f32 = u_xlat18.w;
        let x_1342 : f32 = u_xlat45.x;
        let x_1344 : f32 = u_xlat65;
        u_xlat65 = ((x_1340 * x_1342) + x_1344);
        let x_1347 : vec4<f32> = u_xlat16;
        let x_1348 : vec2<f32> = vec2<f32>(x_1347.x, x_1347.y);
        let x_1350 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1348.x, x_1348.y, x_1350);
        let x_1357 : vec3<f32> = txVec21;
        let x_1359 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1357.xy, x_1357.z);
        u_xlat45.x = x_1359;
        let x_1362 : f32 = u_xlat19.x;
        let x_1364 : f32 = u_xlat45.x;
        let x_1366 : f32 = u_xlat65;
        u_xlat65 = ((x_1362 * x_1364) + x_1366);
        let x_1369 : vec4<f32> = u_xlat16;
        let x_1370 : vec2<f32> = vec2<f32>(x_1369.z, x_1369.w);
        let x_1372 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1370.x, x_1370.y, x_1372);
        let x_1379 : vec3<f32> = txVec22;
        let x_1381 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1379.xy, x_1379.z);
        u_xlat45.x = x_1381;
        let x_1384 : f32 = u_xlat19.y;
        let x_1386 : f32 = u_xlat45.x;
        let x_1388 : f32 = u_xlat65;
        u_xlat65 = ((x_1384 * x_1386) + x_1388);
        let x_1391 : vec2<f32> = u_xlat29;
        let x_1393 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1391.x, x_1391.y, x_1393);
        let x_1400 : vec3<f32> = txVec23;
        let x_1402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1400.xy, x_1400.z);
        u_xlat45.x = x_1402;
        let x_1405 : f32 = u_xlat19.z;
        let x_1407 : f32 = u_xlat45.x;
        let x_1409 : f32 = u_xlat65;
        u_xlat65 = ((x_1405 * x_1407) + x_1409);
        let x_1412 : vec2<f32> = u_xlat56;
        let x_1414 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1412.x, x_1412.y, x_1414);
        let x_1421 : vec3<f32> = txVec24;
        let x_1423 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1421.xy, x_1421.z);
        u_xlat45.x = x_1423;
        let x_1426 : f32 = u_xlat19.w;
        let x_1428 : f32 = u_xlat45.x;
        let x_1430 : f32 = u_xlat65;
        u_xlat65 = ((x_1426 * x_1428) + x_1430);
        let x_1433 : vec4<f32> = u_xlat11;
        let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
        let x_1436 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
        let x_1443 : vec3<f32> = txVec25;
        let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
        u_xlat45.x = x_1445;
        let x_1448 : f32 = u_xlat7.x;
        let x_1450 : f32 = u_xlat45.x;
        let x_1452 : f32 = u_xlat65;
        u_xlat65 = ((x_1448 * x_1450) + x_1452);
        let x_1455 : vec4<f32> = u_xlat11;
        let x_1456 : vec2<f32> = vec2<f32>(x_1455.z, x_1455.w);
        let x_1458 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1456.x, x_1456.y, x_1458);
        let x_1465 : vec3<f32> = txVec26;
        let x_1467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1465.xy, x_1465.z);
        u_xlat45.x = x_1467;
        let x_1470 : f32 = u_xlat7.y;
        let x_1472 : f32 = u_xlat45.x;
        let x_1474 : f32 = u_xlat65;
        u_xlat65 = ((x_1470 * x_1472) + x_1474);
        let x_1477 : vec2<f32> = u_xlat51;
        let x_1479 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1477.x, x_1477.y, x_1479);
        let x_1486 : vec3<f32> = txVec27;
        let x_1488 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1486.xy, x_1486.z);
        u_xlat45.x = x_1488;
        let x_1491 : f32 = u_xlat7.z;
        let x_1493 : f32 = u_xlat45.x;
        let x_1495 : f32 = u_xlat65;
        u_xlat65 = ((x_1491 * x_1493) + x_1495);
        let x_1498 : vec4<f32> = u_xlat3;
        let x_1499 : vec2<f32> = vec2<f32>(x_1498.x, x_1498.y);
        let x_1501 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1499.x, x_1499.y, x_1501);
        let x_1508 : vec3<f32> = txVec28;
        let x_1510 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1508.xy, x_1508.z);
        u_xlat3.x = x_1510;
        let x_1513 : f32 = u_xlat7.w;
        let x_1515 : f32 = u_xlat3.x;
        let x_1517 : f32 = u_xlat65;
        u_xlat64 = ((x_1513 * x_1515) + x_1517);
      }
    }
  } else {
    let x_1521 : vec3<f32> = u_xlat2;
    let x_1522 : vec2<f32> = vec2<f32>(x_1521.x, x_1521.y);
    let x_1524 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1522.x, x_1522.y, x_1524);
    let x_1531 : vec3<f32> = txVec29;
    let x_1533 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1531.xy, x_1531.z);
    u_xlat64 = x_1533;
  }
  let x_1535 : f32 = x_248.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1535) + 1.0f);
  let x_1539 : f32 = u_xlat64;
  let x_1541 : f32 = x_248.x_MainLightShadowParams.x;
  let x_1544 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1539 * x_1541) + x_1544);
  let x_1548 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_1548);
  let x_1552 : f32 = u_xlat2.z;
  u_xlatb44 = (x_1552 >= 1.0f);
  let x_1554 : bool = u_xlatb44;
  let x_1555 : bool = u_xlatb23;
  u_xlatb23 = (x_1554 | x_1555);
  let x_1557 : bool = u_xlatb23;
  let x_1558 : f32 = u_xlat64;
  u_xlat64 = select(x_1558, 1.0f, x_1557);
  let x_1560 : vec3<f32> = u_xlat1;
  let x_1562 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat1.x = dot(x_1560, -(vec3<f32>(x_1562.x, x_1562.y, x_1562.z)));
  let x_1568 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1568, 0.0f, 1.0f);
  let x_1572 : f32 = u_xlat64;
  let x_1576 : vec4<f32> = x_137.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_1572, x_1572, x_1572) * vec3<f32>(x_1576.x, x_1576.y, x_1576.z));
  let x_1579 : vec3<f32> = u_xlat22;
  let x_1580 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1579 * vec3<f32>(x_1580.x, x_1580.x, x_1580.x));
  let x_1583 : vec3<f32> = u_xlat1;
  let x_1584 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1583 * vec3<f32>(x_1584.x, x_1584.y, x_1584.z));
  let x_1588 : f32 = u_xlat4.w;
  u_xlatb64 = (x_1588 >= 0.400000006f);
  let x_1591 : bool = u_xlatb64;
  if (x_1591) {
    let x_1596 : f32 = u_xlat4.w;
    x_1592 = x_1596;
  } else {
    x_1592 = 0.0f;
  }
  let x_1598 : f32 = x_1592;
  u_xlat64 = x_1598;
  let x_1601 : f32 = u_xlat4.w;
  u_xlat23.x = (x_1601 + -0.400000006f);
  let x_1607 : f32 = u_xlat4.w;
  u_xlat44 = dpdxCoarse(x_1607);
  let x_1610 : f32 = u_xlat4.w;
  u_xlat65 = dpdyCoarse(x_1610);
  let x_1612 : f32 = u_xlat65;
  let x_1614 : f32 = u_xlat44;
  u_xlat44 = (abs(x_1612) + abs(x_1614));
  let x_1617 : f32 = u_xlat44;
  u_xlat44 = max(x_1617, 0.0001f);
  let x_1621 : f32 = u_xlat23.x;
  let x_1622 : f32 = u_xlat44;
  u_xlat23.x = (x_1621 / x_1622);
  let x_1626 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1626 + 0.5f);
  let x_1630 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1630, 0.0f, 1.0f);
  let x_1634 : f32 = x_137.x_AlphaToMaskAvailable;
  u_xlatb44 = !((x_1634 == 0.0f));
  let x_1636 : bool = u_xlatb44;
  if (x_1636) {
    let x_1641 : f32 = u_xlat23.x;
    x_1637 = x_1641;
  } else {
    let x_1643 : f32 = u_xlat64;
    x_1637 = x_1643;
  }
  let x_1644 : f32 = x_1637;
  u_xlat64 = x_1644;
  let x_1645 : f32 = u_xlat64;
  u_xlat23.x = (x_1645 + -0.0001f);
  let x_1650 : f32 = u_xlat23.x;
  u_xlatb23 = (x_1650 < 0.0f);
  let x_1652 : bool = u_xlatb23;
  if (((select(0i, 1i, x_1652) * -1i) != 0i)) {
    discard;
  }
  let x_1660 : vec3<f32> = u_xlat21;
  let x_1661 : vec3<f32> = u_xlat27;
  u_xlat21 = (x_1660 * vec3<f32>(x_1661.y, x_1661.y, x_1661.y));
  let x_1664 : vec3<f32> = u_xlat27;
  let x_1666 : vec4<f32> = vs_INTERP2;
  let x_1669 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1664.x, x_1664.x, x_1664.x) * vec3<f32>(x_1666.x, x_1666.y, x_1666.z)) + x_1669);
  let x_1671 : vec3<f32> = u_xlat27;
  let x_1673 : vec3<f32> = vs_INTERP1;
  let x_1675 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1671.z, x_1671.z, x_1671.z) * x_1673) + x_1675);
  let x_1677 : vec3<f32> = u_xlat21;
  let x_1678 : vec3<f32> = u_xlat21;
  u_xlat23.x = dot(x_1677, x_1678);
  let x_1682 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1682);
  let x_1685 : vec3<f32> = u_xlat21;
  let x_1686 : vec3<f32> = u_xlat23;
  u_xlat21 = (x_1685 * vec3<f32>(x_1686.x, x_1686.x, x_1686.x));
  let x_1690 : f32 = x_137.unity_OrthoParams.w;
  u_xlatb23 = (x_1690 == 0.0f);
  let x_1692 : vec3<f32> = vs_INTERP0;
  let x_1696 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_1697 : vec3<f32> = (-(x_1692) + x_1696);
  let x_1698 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1697.x, x_1697.y, x_1697.z, x_1698.w);
  let x_1700 : vec4<f32> = u_xlat3;
  let x_1702 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(vec3<f32>(x_1700.x, x_1700.y, x_1700.z), vec3<f32>(x_1702.x, x_1702.y, x_1702.z));
  let x_1705 : f32 = u_xlat65;
  u_xlat65 = inverseSqrt(x_1705);
  let x_1707 : f32 = u_xlat65;
  let x_1709 : vec4<f32> = u_xlat3;
  let x_1711 : vec3<f32> = (vec3<f32>(x_1707, x_1707, x_1707) * vec3<f32>(x_1709.x, x_1709.y, x_1709.z));
  let x_1712 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1711.x, x_1711.y, x_1711.z, x_1712.w);
  let x_1714 : bool = u_xlatb23;
  if (x_1714) {
    let x_1719 : f32 = u_xlat3.x;
    x_1715 = x_1719;
  } else {
    let x_1723 : f32 = x_137.unity_MatrixV[0i].z;
    x_1715 = x_1723;
  }
  let x_1724 : f32 = x_1715;
  u_xlat4.x = x_1724;
  let x_1726 : bool = u_xlatb23;
  if (x_1726) {
    let x_1731 : f32 = u_xlat3.y;
    x_1727 = x_1731;
  } else {
    let x_1734 : f32 = x_137.unity_MatrixV[1i].z;
    x_1727 = x_1734;
  }
  let x_1735 : f32 = x_1727;
  u_xlat4.y = x_1735;
  let x_1737 : bool = u_xlatb23;
  if (x_1737) {
    let x_1742 : f32 = u_xlat3.z;
    x_1738 = x_1742;
  } else {
    let x_1745 : f32 = x_137.unity_MatrixV[2i].z;
    x_1738 = x_1745;
  }
  let x_1746 : f32 = x_1738;
  u_xlat4.z = x_1746;
  let x_1755 : vec2<f32> = vs_INTERP5;
  let x_1757 : f32 = x_137.x_GlobalMipBias.x;
  let x_1758 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1755, x_1757);
  let x_1759 : vec3<f32> = vec3<f32>(x_1758.x, x_1758.y, x_1758.z);
  let x_1760 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1759.x, x_1759.y, x_1759.z, x_1760.w);
  let x_1763 : vec4<f32> = x_137.x_ScaledScreenParams;
  let x_1764 : vec2<f32> = vec2<f32>(x_1763.x, x_1763.y);
  let x_1768 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1764.x, x_1764.y));
  let x_1769 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1768.x, x_1769.y, x_1768.y);
  let x_1771 : vec3<f32> = u_xlat23;
  let x_1773 : vec4<f32> = hlslcc_FragCoord;
  let x_1775 : vec2<f32> = (vec2<f32>(x_1771.x, x_1771.z) * vec2<f32>(x_1773.x, x_1773.y));
  let x_1776 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1775.x, x_1775.y, x_1776.z, x_1776.w);
  let x_1779 : f32 = u_xlat7.y;
  let x_1781 : f32 = x_137.x_ScaleBiasRt.x;
  let x_1784 : f32 = x_137.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1779 * x_1781) + x_1784);
  let x_1788 : f32 = u_xlat23.x;
  u_xlat7.z = (-(x_1788) + 1.0f);
  let x_1793 : f32 = u_xlat6.x;
  u_xlat6.x = x_1793;
  let x_1796 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1796, 0.0f, 1.0f);
  let x_1799 : f32 = u_xlat64;
  u_xlat64 = min(x_1799, 1.0f);
  let x_1801 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1801 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1806 : f32 = u_xlat6.x;
  u_xlat23.x = (-(x_1806) + 1.0f);
  let x_1811 : f32 = u_xlat23.x;
  let x_1813 : f32 = u_xlat23.x;
  u_xlat65 = (x_1811 * x_1813);
  let x_1815 : f32 = u_xlat65;
  u_xlat65 = max(x_1815, 0.0078125f);
  let x_1819 : f32 = u_xlat65;
  let x_1820 : f32 = u_xlat65;
  u_xlat66 = (x_1819 * x_1820);
  let x_1824 : f32 = u_xlat6.x;
  u_xlat67 = (x_1824 + 0.040000021f);
  let x_1827 : f32 = u_xlat67;
  u_xlat67 = min(x_1827, 1.0f);
  let x_1829 : f32 = u_xlat65;
  u_xlat68 = ((x_1829 * 4.0f) + 2.0f);
  let x_1838 : vec4<f32> = u_xlat7;
  let x_1841 : f32 = x_137.x_GlobalMipBias.x;
  let x_1842 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1838.x, x_1838.z), x_1841);
  u_xlat6.x = x_1842.x;
  let x_1846 : f32 = u_xlat6.x;
  u_xlat27.x = (x_1846 + -1.0f);
  let x_1851 : f32 = x_137.x_AmbientOcclusionParam.w;
  let x_1853 : f32 = u_xlat27.x;
  u_xlat27.x = ((x_1851 * x_1853) + 1.0f);
  let x_1858 : f32 = u_xlat6.x;
  let x_1860 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1858, x_1860);
  let x_1863 : bool = u_xlatb0;
  if (x_1863) {
    let x_1867 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb0 = (x_1867 == 1.0f);
    let x_1869 : bool = u_xlatb0;
    if (x_1869) {
      let x_1873 : vec4<f32> = vs_INTERP9;
      let x_1876 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1873.x, x_1873.y, x_1873.x, x_1873.y) + x_1876);
      let x_1879 : vec4<f32> = u_xlat7;
      let x_1880 : vec2<f32> = vec2<f32>(x_1879.x, x_1879.y);
      let x_1882 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1880.x, x_1880.y, x_1882);
      let x_1889 : vec3<f32> = txVec30;
      let x_1891 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1889.xy, x_1889.z);
      u_xlat8.x = x_1891;
      let x_1894 : vec4<f32> = u_xlat7;
      let x_1895 : vec2<f32> = vec2<f32>(x_1894.z, x_1894.w);
      let x_1897 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1895.x, x_1895.y, x_1897);
      let x_1904 : vec3<f32> = txVec31;
      let x_1906 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1904.xy, x_1904.z);
      u_xlat8.y = x_1906;
      let x_1908 : vec4<f32> = vs_INTERP9;
      let x_1911 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1908.x, x_1908.y, x_1908.x, x_1908.y) + x_1911);
      let x_1914 : vec4<f32> = u_xlat7;
      let x_1915 : vec2<f32> = vec2<f32>(x_1914.x, x_1914.y);
      let x_1917 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1915.x, x_1915.y, x_1917);
      let x_1924 : vec3<f32> = txVec32;
      let x_1926 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1924.xy, x_1924.z);
      u_xlat8.z = x_1926;
      let x_1929 : vec4<f32> = u_xlat7;
      let x_1930 : vec2<f32> = vec2<f32>(x_1929.z, x_1929.w);
      let x_1932 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1930.x, x_1930.y, x_1932);
      let x_1939 : vec3<f32> = txVec33;
      let x_1941 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1939.xy, x_1939.z);
      u_xlat8.w = x_1941;
      let x_1943 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_1943, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1949 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb48 = (x_1949 == 2.0f);
      let x_1951 : bool = u_xlatb48;
      if (x_1951) {
        let x_1955 : vec4<f32> = vs_INTERP9;
        let x_1958 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1955.x, x_1955.y) * vec2<f32>(x_1958.z, x_1958.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1962 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_1962);
        let x_1964 : vec4<f32> = vs_INTERP9;
        let x_1967 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1970 : vec2<f32> = u_xlat48;
        let x_1972 : vec2<f32> = ((vec2<f32>(x_1964.x, x_1964.y) * vec2<f32>(x_1967.z, x_1967.w)) + -(x_1970));
        let x_1973 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1972.x, x_1972.y, x_1973.z, x_1973.w);
        let x_1975 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1975.x, x_1975.x, x_1975.y, x_1975.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1978 : vec4<f32> = u_xlat8;
        let x_1980 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1978.x, x_1978.x, x_1978.z, x_1978.z) * vec4<f32>(x_1980.x, x_1980.x, x_1980.z, x_1980.z));
        let x_1984 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1984.y, x_1984.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1987 : vec4<f32> = u_xlat9;
        let x_1990 : vec4<f32> = u_xlat7;
        let x_1993 : vec2<f32> = ((vec2<f32>(x_1987.x, x_1987.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1990.x, x_1990.y)));
        let x_1994 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1993.x, x_1994.y, x_1993.y, x_1994.w);
        let x_1996 : vec4<f32> = u_xlat7;
        let x_1999 : vec2<f32> = (-(vec2<f32>(x_1996.x, x_1996.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2000 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1999.x, x_1999.y, x_2000.z, x_2000.w);
        let x_2002 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2002.x, x_2002.y), vec2<f32>(0.0f, 0.0f));
        let x_2005 : vec2<f32> = u_xlat51;
        let x_2007 : vec2<f32> = u_xlat51;
        let x_2009 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2005) * x_2007) + vec2<f32>(x_2009.x, x_2009.y));
        let x_2012 : vec4<f32> = u_xlat7;
        let x_2014 : vec2<f32> = max(vec2<f32>(x_2012.x, x_2012.y), vec2<f32>(0.0f, 0.0f));
        let x_2015 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2014.x, x_2014.y, x_2015.z, x_2015.w);
        let x_2017 : vec4<f32> = u_xlat7;
        let x_2020 : vec4<f32> = u_xlat7;
        let x_2023 : vec4<f32> = u_xlat8;
        let x_2025 : vec2<f32> = ((-(vec2<f32>(x_2017.x, x_2017.y)) * vec2<f32>(x_2020.x, x_2020.y)) + vec2<f32>(x_2023.y, x_2023.w));
        let x_2026 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2025.x, x_2025.y, x_2026.z, x_2026.w);
        let x_2028 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2028 + vec2<f32>(1.0f, 1.0f));
        let x_2030 : vec4<f32> = u_xlat7;
        let x_2032 : vec2<f32> = (vec2<f32>(x_2030.x, x_2030.y) + vec2<f32>(1.0f, 1.0f));
        let x_2033 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2032.x, x_2032.y, x_2033.z, x_2033.w);
        let x_2035 : vec4<f32> = u_xlat8;
        let x_2037 : vec2<f32> = (vec2<f32>(x_2035.x, x_2035.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2038 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2037.x, x_2037.y, x_2038.z, x_2038.w);
        let x_2040 : vec4<f32> = u_xlat9;
        let x_2042 : vec2<f32> = (vec2<f32>(x_2040.x, x_2040.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2043 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2042.x, x_2042.y, x_2043.z, x_2043.w);
        let x_2045 : vec2<f32> = u_xlat51;
        let x_2046 : vec2<f32> = (x_2045 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2047 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2046.x, x_2046.y, x_2047.z, x_2047.w);
        let x_2049 : vec4<f32> = u_xlat7;
        let x_2051 : vec2<f32> = (vec2<f32>(x_2049.x, x_2049.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2052 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2051.x, x_2051.y, x_2052.z, x_2052.w);
        let x_2054 : vec4<f32> = u_xlat8;
        let x_2056 : vec2<f32> = (vec2<f32>(x_2054.y, x_2054.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2057 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2056.x, x_2056.y, x_2057.z, x_2057.w);
        let x_2060 : f32 = u_xlat9.x;
        u_xlat10.z = x_2060;
        let x_2063 : f32 = u_xlat7.x;
        u_xlat10.w = x_2063;
        let x_2066 : f32 = u_xlat12.x;
        u_xlat11.z = x_2066;
        let x_2069 : f32 = u_xlat49.x;
        u_xlat11.w = x_2069;
        let x_2071 : vec4<f32> = u_xlat10;
        let x_2073 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2071.z, x_2071.w, x_2071.x, x_2071.z) + vec4<f32>(x_2073.z, x_2073.w, x_2073.x, x_2073.z));
        let x_2077 : f32 = u_xlat10.y;
        u_xlat9.z = x_2077;
        let x_2080 : f32 = u_xlat7.y;
        u_xlat9.w = x_2080;
        let x_2083 : f32 = u_xlat11.y;
        u_xlat12.z = x_2083;
        let x_2086 : f32 = u_xlat49.y;
        u_xlat12.w = x_2086;
        let x_2088 : vec4<f32> = u_xlat9;
        let x_2090 : vec4<f32> = u_xlat12;
        let x_2092 : vec3<f32> = (vec3<f32>(x_2088.z, x_2088.y, x_2088.w) + vec3<f32>(x_2090.z, x_2090.y, x_2090.w));
        let x_2093 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2092.x, x_2092.y, x_2092.z, x_2093.w);
        let x_2095 : vec4<f32> = u_xlat11;
        let x_2097 : vec4<f32> = u_xlat8;
        let x_2099 : vec3<f32> = (vec3<f32>(x_2095.x, x_2095.z, x_2095.w) / vec3<f32>(x_2097.z, x_2097.w, x_2097.y));
        let x_2100 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2099.x, x_2099.y, x_2099.z, x_2100.w);
        let x_2102 : vec4<f32> = u_xlat9;
        let x_2104 : vec3<f32> = (vec3<f32>(x_2102.x, x_2102.y, x_2102.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2105 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2104.x, x_2104.y, x_2104.z, x_2105.w);
        let x_2107 : vec4<f32> = u_xlat12;
        let x_2109 : vec4<f32> = u_xlat7;
        let x_2111 : vec3<f32> = (vec3<f32>(x_2107.z, x_2107.y, x_2107.w) / vec3<f32>(x_2109.x, x_2109.y, x_2109.z));
        let x_2112 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2111.x, x_2111.y, x_2111.z, x_2112.w);
        let x_2114 : vec4<f32> = u_xlat10;
        let x_2116 : vec3<f32> = (vec3<f32>(x_2114.x, x_2114.y, x_2114.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2117 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2116.x, x_2116.y, x_2116.z, x_2117.w);
        let x_2119 : vec4<f32> = u_xlat9;
        let x_2122 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2124 : vec3<f32> = (vec3<f32>(x_2119.y, x_2119.x, x_2119.z) * vec3<f32>(x_2122.x, x_2122.x, x_2122.x));
        let x_2125 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2124.x, x_2124.y, x_2124.z, x_2125.w);
        let x_2127 : vec4<f32> = u_xlat10;
        let x_2130 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2132 : vec3<f32> = (vec3<f32>(x_2127.x, x_2127.y, x_2127.z) * vec3<f32>(x_2130.y, x_2130.y, x_2130.y));
        let x_2133 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2132.x, x_2132.y, x_2132.z, x_2133.w);
        let x_2136 : f32 = u_xlat10.x;
        u_xlat9.w = x_2136;
        let x_2138 : vec2<f32> = u_xlat48;
        let x_2141 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2144 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2138.x, x_2138.y, x_2138.x, x_2138.y) * vec4<f32>(x_2141.x, x_2141.y, x_2141.x, x_2141.y)) + vec4<f32>(x_2144.y, x_2144.w, x_2144.x, x_2144.w));
        let x_2147 : vec2<f32> = u_xlat48;
        let x_2149 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2152 : vec4<f32> = u_xlat9;
        let x_2154 : vec2<f32> = ((x_2147 * vec2<f32>(x_2149.x, x_2149.y)) + vec2<f32>(x_2152.z, x_2152.w));
        let x_2155 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2154.x, x_2154.y, x_2155.z, x_2155.w);
        let x_2158 : f32 = u_xlat9.y;
        u_xlat10.w = x_2158;
        let x_2160 : vec4<f32> = u_xlat10;
        let x_2161 : vec2<f32> = vec2<f32>(x_2160.y, x_2160.z);
        let x_2162 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2162.x, x_2161.x, x_2162.z, x_2161.y);
        let x_2164 : vec2<f32> = u_xlat48;
        let x_2167 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2170 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2164.x, x_2164.y, x_2164.x, x_2164.y) * vec4<f32>(x_2167.x, x_2167.y, x_2167.x, x_2167.y)) + vec4<f32>(x_2170.x, x_2170.y, x_2170.z, x_2170.y));
        let x_2173 : vec2<f32> = u_xlat48;
        let x_2176 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2179 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2173.x, x_2173.y, x_2173.x, x_2173.y) * vec4<f32>(x_2176.x, x_2176.y, x_2176.x, x_2176.y)) + vec4<f32>(x_2179.w, x_2179.y, x_2179.w, x_2179.z));
        let x_2182 : vec2<f32> = u_xlat48;
        let x_2185 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2188 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2182.x, x_2182.y, x_2182.x, x_2182.y) * vec4<f32>(x_2185.x, x_2185.y, x_2185.x, x_2185.y)) + vec4<f32>(x_2188.x, x_2188.w, x_2188.z, x_2188.w));
        let x_2191 : vec4<f32> = u_xlat7;
        let x_2193 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2191.x, x_2191.x, x_2191.x, x_2191.y) * vec4<f32>(x_2193.z, x_2193.w, x_2193.y, x_2193.z));
        let x_2196 : vec4<f32> = u_xlat7;
        let x_2198 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2196.y, x_2196.y, x_2196.z, x_2196.z) * x_2198);
        let x_2201 : f32 = u_xlat7.z;
        let x_2203 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2201 * x_2203);
        let x_2207 : vec4<f32> = u_xlat11;
        let x_2208 : vec2<f32> = vec2<f32>(x_2207.x, x_2207.y);
        let x_2210 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2208.x, x_2208.y, x_2210);
        let x_2218 : vec3<f32> = txVec34;
        let x_2220 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2218.xy, x_2218.z);
        u_xlat69 = x_2220;
        let x_2222 : vec4<f32> = u_xlat11;
        let x_2223 : vec2<f32> = vec2<f32>(x_2222.z, x_2222.w);
        let x_2225 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2223.x, x_2223.y, x_2225);
        let x_2232 : vec3<f32> = txVec35;
        let x_2234 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2232.xy, x_2232.z);
        u_xlat7.x = x_2234;
        let x_2237 : f32 = u_xlat7.x;
        let x_2239 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2237 * x_2239);
        let x_2243 : f32 = u_xlat14.x;
        let x_2244 : f32 = u_xlat69;
        let x_2247 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2243 * x_2244) + x_2247);
        let x_2250 : vec4<f32> = u_xlat12;
        let x_2251 : vec2<f32> = vec2<f32>(x_2250.x, x_2250.y);
        let x_2253 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2251.x, x_2251.y, x_2253);
        let x_2260 : vec3<f32> = txVec36;
        let x_2262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2260.xy, x_2260.z);
        u_xlat7.x = x_2262;
        let x_2265 : f32 = u_xlat14.z;
        let x_2267 : f32 = u_xlat7.x;
        let x_2269 : f32 = u_xlat69;
        u_xlat69 = ((x_2265 * x_2267) + x_2269);
        let x_2272 : vec4<f32> = u_xlat10;
        let x_2273 : vec2<f32> = vec2<f32>(x_2272.x, x_2272.y);
        let x_2275 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2273.x, x_2273.y, x_2275);
        let x_2282 : vec3<f32> = txVec37;
        let x_2284 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2282.xy, x_2282.z);
        u_xlat7.x = x_2284;
        let x_2287 : f32 = u_xlat14.w;
        let x_2289 : f32 = u_xlat7.x;
        let x_2291 : f32 = u_xlat69;
        u_xlat69 = ((x_2287 * x_2289) + x_2291);
        let x_2294 : vec4<f32> = u_xlat13;
        let x_2295 : vec2<f32> = vec2<f32>(x_2294.x, x_2294.y);
        let x_2297 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2295.x, x_2295.y, x_2297);
        let x_2304 : vec3<f32> = txVec38;
        let x_2306 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2304.xy, x_2304.z);
        u_xlat7.x = x_2306;
        let x_2309 : f32 = u_xlat15.x;
        let x_2311 : f32 = u_xlat7.x;
        let x_2313 : f32 = u_xlat69;
        u_xlat69 = ((x_2309 * x_2311) + x_2313);
        let x_2316 : vec4<f32> = u_xlat13;
        let x_2317 : vec2<f32> = vec2<f32>(x_2316.z, x_2316.w);
        let x_2319 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2317.x, x_2317.y, x_2319);
        let x_2326 : vec3<f32> = txVec39;
        let x_2328 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2326.xy, x_2326.z);
        u_xlat7.x = x_2328;
        let x_2331 : f32 = u_xlat15.y;
        let x_2333 : f32 = u_xlat7.x;
        let x_2335 : f32 = u_xlat69;
        u_xlat69 = ((x_2331 * x_2333) + x_2335);
        let x_2338 : vec4<f32> = u_xlat10;
        let x_2339 : vec2<f32> = vec2<f32>(x_2338.z, x_2338.w);
        let x_2341 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2339.x, x_2339.y, x_2341);
        let x_2348 : vec3<f32> = txVec40;
        let x_2350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2348.xy, x_2348.z);
        u_xlat7.x = x_2350;
        let x_2353 : f32 = u_xlat15.z;
        let x_2355 : f32 = u_xlat7.x;
        let x_2357 : f32 = u_xlat69;
        u_xlat69 = ((x_2353 * x_2355) + x_2357);
        let x_2360 : vec4<f32> = u_xlat9;
        let x_2361 : vec2<f32> = vec2<f32>(x_2360.x, x_2360.y);
        let x_2363 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2361.x, x_2361.y, x_2363);
        let x_2370 : vec3<f32> = txVec41;
        let x_2372 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2370.xy, x_2370.z);
        u_xlat7.x = x_2372;
        let x_2375 : f32 = u_xlat15.w;
        let x_2377 : f32 = u_xlat7.x;
        let x_2379 : f32 = u_xlat69;
        u_xlat69 = ((x_2375 * x_2377) + x_2379);
        let x_2382 : vec4<f32> = u_xlat9;
        let x_2383 : vec2<f32> = vec2<f32>(x_2382.z, x_2382.w);
        let x_2385 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2383.x, x_2383.y, x_2385);
        let x_2392 : vec3<f32> = txVec42;
        let x_2394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2392.xy, x_2392.z);
        u_xlat7.x = x_2394;
        let x_2397 : f32 = u_xlat48.x;
        let x_2399 : f32 = u_xlat7.x;
        let x_2401 : f32 = u_xlat69;
        u_xlat0.x = ((x_2397 * x_2399) + x_2401);
      } else {
        let x_2405 : vec4<f32> = vs_INTERP9;
        let x_2408 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2405.x, x_2405.y) * vec2<f32>(x_2408.z, x_2408.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2412 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2412);
        let x_2414 : vec4<f32> = vs_INTERP9;
        let x_2417 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2420 : vec2<f32> = u_xlat48;
        let x_2422 : vec2<f32> = ((vec2<f32>(x_2414.x, x_2414.y) * vec2<f32>(x_2417.z, x_2417.w)) + -(x_2420));
        let x_2423 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2422.x, x_2422.y, x_2423.z, x_2423.w);
        let x_2425 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2425.x, x_2425.x, x_2425.y, x_2425.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2428 : vec4<f32> = u_xlat8;
        let x_2430 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2428.x, x_2428.x, x_2428.z, x_2428.z) * vec4<f32>(x_2430.x, x_2430.x, x_2430.z, x_2430.z));
        let x_2433 : vec4<f32> = u_xlat9;
        let x_2435 : vec2<f32> = (vec2<f32>(x_2433.y, x_2433.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2436 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2436.x, x_2435.x, x_2436.z, x_2435.y);
        let x_2438 : vec4<f32> = u_xlat9;
        let x_2441 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2438.x, x_2438.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2441.x, x_2441.y)));
        let x_2445 : vec4<f32> = u_xlat7;
        let x_2448 : vec2<f32> = (-(vec2<f32>(x_2445.x, x_2445.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2449 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2448.x, x_2449.y, x_2448.y, x_2449.w);
        let x_2451 : vec4<f32> = u_xlat7;
        let x_2453 : vec2<f32> = min(vec2<f32>(x_2451.x, x_2451.y), vec2<f32>(0.0f, 0.0f));
        let x_2454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2453.x, x_2453.y, x_2454.z, x_2454.w);
        let x_2456 : vec4<f32> = u_xlat9;
        let x_2459 : vec4<f32> = u_xlat9;
        let x_2462 : vec4<f32> = u_xlat8;
        let x_2464 : vec2<f32> = ((-(vec2<f32>(x_2456.x, x_2456.y)) * vec2<f32>(x_2459.x, x_2459.y)) + vec2<f32>(x_2462.x, x_2462.z));
        let x_2465 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2464.x, x_2465.y, x_2464.y, x_2465.w);
        let x_2467 : vec4<f32> = u_xlat7;
        let x_2469 : vec2<f32> = max(vec2<f32>(x_2467.x, x_2467.y), vec2<f32>(0.0f, 0.0f));
        let x_2470 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2469.x, x_2469.y, x_2470.z, x_2470.w);
        let x_2472 : vec4<f32> = u_xlat9;
        let x_2475 : vec4<f32> = u_xlat9;
        let x_2478 : vec4<f32> = u_xlat8;
        let x_2480 : vec2<f32> = ((-(vec2<f32>(x_2472.x, x_2472.y)) * vec2<f32>(x_2475.x, x_2475.y)) + vec2<f32>(x_2478.y, x_2478.w));
        let x_2481 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2481.x, x_2480.x, x_2481.z, x_2480.y);
        let x_2483 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2483 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2486 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2486 * 0.081632003f);
        let x_2489 : vec2<f32> = u_xlat49;
        let x_2491 : vec2<f32> = (vec2<f32>(x_2489.y, x_2489.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2491.x, x_2491.y, x_2492.z, x_2492.w);
        let x_2494 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2494.x, x_2494.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2498 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2498 * 0.081632003f);
        let x_2502 : f32 = u_xlat11.y;
        u_xlat9.x = x_2502;
        let x_2504 : vec4<f32> = u_xlat7;
        let x_2507 : vec2<f32> = ((vec2<f32>(x_2504.x, x_2504.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2508 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2508.x, x_2507.x, x_2508.z, x_2507.y);
        let x_2510 : vec4<f32> = u_xlat7;
        let x_2513 : vec2<f32> = ((vec2<f32>(x_2510.x, x_2510.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2514 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2513.x, x_2514.y, x_2513.y, x_2514.w);
        let x_2517 : f32 = u_xlat49.x;
        u_xlat8.y = x_2517;
        let x_2520 : f32 = u_xlat10.y;
        u_xlat8.w = x_2520;
        let x_2522 : vec4<f32> = u_xlat8;
        let x_2523 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2522 + x_2523);
        let x_2525 : vec4<f32> = u_xlat7;
        let x_2528 : vec2<f32> = ((vec2<f32>(x_2525.y, x_2525.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2529 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2529.x, x_2528.x, x_2529.z, x_2528.y);
        let x_2531 : vec4<f32> = u_xlat7;
        let x_2534 : vec2<f32> = ((vec2<f32>(x_2531.y, x_2531.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2535 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2534.x, x_2535.y, x_2534.y, x_2535.w);
        let x_2538 : f32 = u_xlat49.y;
        u_xlat10.y = x_2538;
        let x_2540 : vec4<f32> = u_xlat10;
        let x_2541 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2540 + x_2541);
        let x_2543 : vec4<f32> = u_xlat8;
        let x_2544 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2543 / x_2544);
        let x_2546 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2546 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2548 : vec4<f32> = u_xlat10;
        let x_2549 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2548 / x_2549);
        let x_2551 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2551 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2553 : vec4<f32> = u_xlat8;
        let x_2556 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2553.w, x_2553.x, x_2553.y, x_2553.z) * vec4<f32>(x_2556.x, x_2556.x, x_2556.x, x_2556.x));
        let x_2559 : vec4<f32> = u_xlat10;
        let x_2562 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2559.x, x_2559.w, x_2559.y, x_2559.z) * vec4<f32>(x_2562.y, x_2562.y, x_2562.y, x_2562.y));
        let x_2565 : vec4<f32> = u_xlat8;
        let x_2566 : vec3<f32> = vec3<f32>(x_2565.y, x_2565.z, x_2565.w);
        let x_2567 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2566.x, x_2567.y, x_2566.y, x_2566.z);
        let x_2570 : f32 = u_xlat10.x;
        u_xlat11.y = x_2570;
        let x_2572 : vec2<f32> = u_xlat48;
        let x_2575 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2578 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2572.x, x_2572.y, x_2572.x, x_2572.y) * vec4<f32>(x_2575.x, x_2575.y, x_2575.x, x_2575.y)) + vec4<f32>(x_2578.x, x_2578.y, x_2578.z, x_2578.y));
        let x_2581 : vec2<f32> = u_xlat48;
        let x_2583 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2586 : vec4<f32> = u_xlat11;
        let x_2588 : vec2<f32> = ((x_2581 * vec2<f32>(x_2583.x, x_2583.y)) + vec2<f32>(x_2586.w, x_2586.y));
        let x_2589 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2588.x, x_2588.y, x_2589.z, x_2589.w);
        let x_2592 : f32 = u_xlat11.y;
        u_xlat8.y = x_2592;
        let x_2595 : f32 = u_xlat10.z;
        u_xlat11.y = x_2595;
        let x_2597 : vec2<f32> = u_xlat48;
        let x_2600 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2603 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2597.x, x_2597.y, x_2597.x, x_2597.y) * vec4<f32>(x_2600.x, x_2600.y, x_2600.x, x_2600.y)) + vec4<f32>(x_2603.x, x_2603.y, x_2603.z, x_2603.y));
        let x_2607 : vec2<f32> = u_xlat48;
        let x_2609 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2612 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2607 * vec2<f32>(x_2609.x, x_2609.y)) + vec2<f32>(x_2612.w, x_2612.y));
        let x_2616 : f32 = u_xlat11.y;
        u_xlat8.z = x_2616;
        let x_2618 : vec2<f32> = u_xlat48;
        let x_2621 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2624 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2618.x, x_2618.y, x_2618.x, x_2618.y) * vec4<f32>(x_2621.x, x_2621.y, x_2621.x, x_2621.y)) + vec4<f32>(x_2624.x, x_2624.y, x_2624.x, x_2624.z));
        let x_2628 : f32 = u_xlat10.w;
        u_xlat11.y = x_2628;
        let x_2630 : vec2<f32> = u_xlat48;
        let x_2633 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2636 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2630.x, x_2630.y, x_2630.x, x_2630.y) * vec4<f32>(x_2633.x, x_2633.y, x_2633.x, x_2633.y)) + vec4<f32>(x_2636.x, x_2636.y, x_2636.z, x_2636.y));
        let x_2639 : vec2<f32> = u_xlat48;
        let x_2641 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2644 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_2639 * vec2<f32>(x_2641.x, x_2641.y)) + vec2<f32>(x_2644.w, x_2644.y));
        let x_2648 : f32 = u_xlat11.y;
        u_xlat8.w = x_2648;
        let x_2650 : vec2<f32> = u_xlat48;
        let x_2652 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2655 : vec4<f32> = u_xlat8;
        let x_2657 : vec2<f32> = ((x_2650 * vec2<f32>(x_2652.x, x_2652.y)) + vec2<f32>(x_2655.x, x_2655.w));
        let x_2658 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2657.x, x_2657.y, x_2658.z, x_2658.w);
        let x_2660 : vec4<f32> = u_xlat11;
        let x_2661 : vec3<f32> = vec3<f32>(x_2660.x, x_2660.z, x_2660.w);
        let x_2662 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2661.x, x_2662.y, x_2661.y, x_2661.z);
        let x_2664 : vec2<f32> = u_xlat48;
        let x_2667 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2670 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2664.x, x_2664.y, x_2664.x, x_2664.y) * vec4<f32>(x_2667.x, x_2667.y, x_2667.x, x_2667.y)) + vec4<f32>(x_2670.x, x_2670.y, x_2670.z, x_2670.y));
        let x_2674 : vec2<f32> = u_xlat48;
        let x_2676 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2679 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2674 * vec2<f32>(x_2676.x, x_2676.y)) + vec2<f32>(x_2679.w, x_2679.y));
        let x_2683 : f32 = u_xlat8.x;
        u_xlat10.x = x_2683;
        let x_2685 : vec2<f32> = u_xlat48;
        let x_2687 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2690 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2685 * vec2<f32>(x_2687.x, x_2687.y)) + vec2<f32>(x_2690.x, x_2690.y));
        let x_2693 : vec4<f32> = u_xlat7;
        let x_2695 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2693.x, x_2693.x, x_2693.x, x_2693.x) * x_2695);
        let x_2697 : vec4<f32> = u_xlat7;
        let x_2699 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2697.y, x_2697.y, x_2697.y, x_2697.y) * x_2699);
        let x_2702 : vec4<f32> = u_xlat7;
        let x_2704 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2702.z, x_2702.z, x_2702.z, x_2702.z) * x_2704);
        let x_2706 : vec4<f32> = u_xlat7;
        let x_2708 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2706.w, x_2706.w, x_2706.w, x_2706.w) * x_2708);
        let x_2711 : vec4<f32> = u_xlat12;
        let x_2712 : vec2<f32> = vec2<f32>(x_2711.x, x_2711.y);
        let x_2714 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2712.x, x_2712.y, x_2714);
        let x_2721 : vec3<f32> = txVec43;
        let x_2723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2721.xy, x_2721.z);
        u_xlat8.x = x_2723;
        let x_2726 : vec4<f32> = u_xlat12;
        let x_2727 : vec2<f32> = vec2<f32>(x_2726.z, x_2726.w);
        let x_2729 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2727.x, x_2727.y, x_2729);
        let x_2737 : vec3<f32> = txVec44;
        let x_2739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2737.xy, x_2737.z);
        u_xlat71 = x_2739;
        let x_2740 : f32 = u_xlat71;
        let x_2742 : f32 = u_xlat18.y;
        u_xlat71 = (x_2740 * x_2742);
        let x_2745 : f32 = u_xlat18.x;
        let x_2747 : f32 = u_xlat8.x;
        let x_2749 : f32 = u_xlat71;
        u_xlat8.x = ((x_2745 * x_2747) + x_2749);
        let x_2753 : vec4<f32> = u_xlat13;
        let x_2754 : vec2<f32> = vec2<f32>(x_2753.x, x_2753.y);
        let x_2756 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2754.x, x_2754.y, x_2756);
        let x_2763 : vec3<f32> = txVec45;
        let x_2765 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2763.xy, x_2763.z);
        u_xlat71 = x_2765;
        let x_2767 : f32 = u_xlat18.z;
        let x_2768 : f32 = u_xlat71;
        let x_2771 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2767 * x_2768) + x_2771);
        let x_2775 : vec4<f32> = u_xlat15;
        let x_2776 : vec2<f32> = vec2<f32>(x_2775.x, x_2775.y);
        let x_2778 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2776.x, x_2776.y, x_2778);
        let x_2785 : vec3<f32> = txVec46;
        let x_2787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2785.xy, x_2785.z);
        u_xlat71 = x_2787;
        let x_2789 : f32 = u_xlat18.w;
        let x_2790 : f32 = u_xlat71;
        let x_2793 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2789 * x_2790) + x_2793);
        let x_2797 : vec4<f32> = u_xlat14;
        let x_2798 : vec2<f32> = vec2<f32>(x_2797.x, x_2797.y);
        let x_2800 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2798.x, x_2798.y, x_2800);
        let x_2807 : vec3<f32> = txVec47;
        let x_2809 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2807.xy, x_2807.z);
        u_xlat71 = x_2809;
        let x_2811 : f32 = u_xlat19.x;
        let x_2812 : f32 = u_xlat71;
        let x_2815 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2811 * x_2812) + x_2815);
        let x_2819 : vec4<f32> = u_xlat14;
        let x_2820 : vec2<f32> = vec2<f32>(x_2819.z, x_2819.w);
        let x_2822 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2820.x, x_2820.y, x_2822);
        let x_2829 : vec3<f32> = txVec48;
        let x_2831 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2829.xy, x_2829.z);
        u_xlat71 = x_2831;
        let x_2833 : f32 = u_xlat19.y;
        let x_2834 : f32 = u_xlat71;
        let x_2837 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2833 * x_2834) + x_2837);
        let x_2841 : vec2<f32> = u_xlat55;
        let x_2843 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2841.x, x_2841.y, x_2843);
        let x_2850 : vec3<f32> = txVec49;
        let x_2852 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2850.xy, x_2850.z);
        u_xlat71 = x_2852;
        let x_2854 : f32 = u_xlat19.z;
        let x_2855 : f32 = u_xlat71;
        let x_2858 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2854 * x_2855) + x_2858);
        let x_2862 : vec4<f32> = u_xlat15;
        let x_2863 : vec2<f32> = vec2<f32>(x_2862.z, x_2862.w);
        let x_2865 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2863.x, x_2863.y, x_2865);
        let x_2872 : vec3<f32> = txVec50;
        let x_2874 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2872.xy, x_2872.z);
        u_xlat71 = x_2874;
        let x_2876 : f32 = u_xlat19.w;
        let x_2877 : f32 = u_xlat71;
        let x_2880 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2876 * x_2877) + x_2880);
        let x_2884 : vec4<f32> = u_xlat16;
        let x_2885 : vec2<f32> = vec2<f32>(x_2884.x, x_2884.y);
        let x_2887 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2885.x, x_2885.y, x_2887);
        let x_2894 : vec3<f32> = txVec51;
        let x_2896 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2894.xy, x_2894.z);
        u_xlat71 = x_2896;
        let x_2898 : f32 = u_xlat20.x;
        let x_2899 : f32 = u_xlat71;
        let x_2902 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2898 * x_2899) + x_2902);
        let x_2906 : vec4<f32> = u_xlat16;
        let x_2907 : vec2<f32> = vec2<f32>(x_2906.z, x_2906.w);
        let x_2909 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2907.x, x_2907.y, x_2909);
        let x_2916 : vec3<f32> = txVec52;
        let x_2918 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2916.xy, x_2916.z);
        u_xlat71 = x_2918;
        let x_2920 : f32 = u_xlat20.y;
        let x_2921 : f32 = u_xlat71;
        let x_2924 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2920 * x_2921) + x_2924);
        let x_2928 : vec2<f32> = u_xlat29;
        let x_2930 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2928.x, x_2928.y, x_2930);
        let x_2937 : vec3<f32> = txVec53;
        let x_2939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2937.xy, x_2937.z);
        u_xlat29.x = x_2939;
        let x_2942 : f32 = u_xlat20.z;
        let x_2944 : f32 = u_xlat29.x;
        let x_2947 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2942 * x_2944) + x_2947);
        let x_2951 : vec4<f32> = u_xlat17;
        let x_2952 : vec2<f32> = vec2<f32>(x_2951.x, x_2951.y);
        let x_2954 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2952.x, x_2952.y, x_2954);
        let x_2961 : vec3<f32> = txVec54;
        let x_2963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2961.xy, x_2961.z);
        u_xlat29.x = x_2963;
        let x_2966 : f32 = u_xlat20.w;
        let x_2968 : f32 = u_xlat29.x;
        let x_2971 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2966 * x_2968) + x_2971);
        let x_2975 : vec4<f32> = u_xlat11;
        let x_2976 : vec2<f32> = vec2<f32>(x_2975.x, x_2975.y);
        let x_2978 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2976.x, x_2976.y, x_2978);
        let x_2985 : vec3<f32> = txVec55;
        let x_2987 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2985.xy, x_2985.z);
        u_xlat29.x = x_2987;
        let x_2990 : f32 = u_xlat7.x;
        let x_2992 : f32 = u_xlat29.x;
        let x_2995 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_2990 * x_2992) + x_2995);
        let x_2999 : vec4<f32> = u_xlat11;
        let x_3000 : vec2<f32> = vec2<f32>(x_2999.z, x_2999.w);
        let x_3002 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3000.x, x_3000.y, x_3002);
        let x_3009 : vec3<f32> = txVec56;
        let x_3011 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3009.xy, x_3009.z);
        u_xlat8.x = x_3011;
        let x_3014 : f32 = u_xlat7.y;
        let x_3016 : f32 = u_xlat8.x;
        let x_3019 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3014 * x_3016) + x_3019);
        let x_3023 : vec2<f32> = u_xlat52;
        let x_3025 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3023.x, x_3023.y, x_3025);
        let x_3032 : vec3<f32> = txVec57;
        let x_3034 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3032.xy, x_3032.z);
        u_xlat28.x = x_3034;
        let x_3037 : f32 = u_xlat7.z;
        let x_3039 : f32 = u_xlat28.x;
        let x_3042 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3037 * x_3039) + x_3042);
        let x_3046 : vec2<f32> = u_xlat48;
        let x_3048 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3046.x, x_3046.y, x_3048);
        let x_3055 : vec3<f32> = txVec58;
        let x_3057 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3055.xy, x_3055.z);
        u_xlat48.x = x_3057;
        let x_3060 : f32 = u_xlat7.w;
        let x_3062 : f32 = u_xlat48.x;
        let x_3065 : f32 = u_xlat7.x;
        u_xlat0.x = ((x_3060 * x_3062) + x_3065);
      }
    }
  } else {
    let x_3070 : vec4<f32> = vs_INTERP9;
    let x_3071 : vec2<f32> = vec2<f32>(x_3070.x, x_3070.y);
    let x_3073 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3071.x, x_3071.y, x_3073);
    let x_3080 : vec3<f32> = txVec59;
    let x_3082 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3080.xy, x_3080.z);
    u_xlat0.x = x_3082;
  }
  let x_3085 : f32 = u_xlat0.x;
  let x_3087 : f32 = x_248.x_MainLightShadowParams.x;
  let x_3090 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3085 * x_3087) + x_3090);
  let x_3095 : f32 = vs_INTERP9.z;
  u_xlatb2 = (0.0f >= x_3095);
  let x_3098 : f32 = vs_INTERP9.z;
  u_xlatb48 = (x_3098 >= 1.0f);
  let x_3100 : bool = u_xlatb2;
  let x_3101 : bool = u_xlatb48;
  u_xlatb2 = (x_3100 | x_3101);
  let x_3103 : bool = u_xlatb2;
  if (x_3103) {
    x_3104 = 1.0f;
  } else {
    let x_3109 : f32 = u_xlat0.x;
    x_3104 = x_3109;
  }
  let x_3110 : f32 = x_3104;
  u_xlat0.x = x_3110;
  let x_3112 : vec3<f32> = vs_INTERP0;
  let x_3114 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_3116 : vec3<f32> = (x_3112 + -(x_3114));
  let x_3117 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3116.x, x_3116.y, x_3116.z, x_3117.w);
  let x_3119 : vec4<f32> = u_xlat7;
  let x_3121 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3119.x, x_3119.y, x_3119.z), vec3<f32>(x_3121.x, x_3121.y, x_3121.z));
  let x_3126 : f32 = u_xlat2.x;
  let x_3128 : f32 = x_248.x_MainLightShadowParams.z;
  let x_3131 : f32 = x_248.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3126 * x_3128) + x_3131);
  let x_3135 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3135, 0.0f, 1.0f);
  let x_3139 : f32 = u_xlat0.x;
  u_xlat48.x = (-(x_3139) + 1.0f);
  let x_3144 : f32 = u_xlat2.x;
  let x_3146 : f32 = u_xlat48.x;
  let x_3149 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3144 * x_3146) + x_3149);
  let x_3152 : vec3<f32> = u_xlat27;
  let x_3155 : vec4<f32> = x_137.x_MainLightColor;
  let x_3157 : vec3<f32> = (vec3<f32>(x_3152.x, x_3152.x, x_3152.x) * vec3<f32>(x_3155.x, x_3155.y, x_3155.z));
  let x_3158 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3157.x, x_3157.y, x_3157.z, x_3158.w);
  let x_3160 : vec4<f32> = u_xlat4;
  let x_3163 : vec3<f32> = u_xlat21;
  u_xlat2.x = dot(-(vec3<f32>(x_3160.x, x_3160.y, x_3160.z)), x_3163);
  let x_3167 : f32 = u_xlat2.x;
  let x_3169 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3167 + x_3169);
  let x_3172 : vec3<f32> = u_xlat21;
  let x_3173 : vec3<f32> = u_xlat2;
  let x_3177 : vec4<f32> = u_xlat4;
  let x_3180 : vec3<f32> = ((x_3172 * -(vec3<f32>(x_3173.x, x_3173.x, x_3173.x))) + -(vec3<f32>(x_3177.x, x_3177.y, x_3177.z)));
  let x_3181 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3180.x, x_3180.y, x_3180.z, x_3181.w);
  let x_3183 : vec3<f32> = u_xlat21;
  let x_3184 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(x_3183, vec3<f32>(x_3184.x, x_3184.y, x_3184.z));
  let x_3189 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3189, 0.0f, 1.0f);
  let x_3193 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3193) + 1.0f);
  let x_3198 : f32 = u_xlat2.x;
  let x_3200 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3198 * x_3200);
  let x_3204 : f32 = u_xlat2.x;
  let x_3206 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3204 * x_3206);
  let x_3210 : f32 = u_xlat23.x;
  u_xlat48.x = ((-(x_3210) * 0.699999988f) + 1.700000048f);
  let x_3218 : f32 = u_xlat23.x;
  let x_3220 : f32 = u_xlat48.x;
  u_xlat23.x = (x_3218 * x_3220);
  let x_3224 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3224 * 6.0f);
  let x_3236 : vec4<f32> = u_xlat8;
  let x_3239 : f32 = u_xlat23.x;
  let x_3240 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3236.x, x_3236.y, x_3236.z), x_3239);
  u_xlat8 = x_3240;
  let x_3242 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3242 + -1.0f);
  let x_3246 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3248 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3246 * x_3248) + 1.0f);
  let x_3253 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3253, 0.0f);
  let x_3257 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3257);
  let x_3261 : f32 = u_xlat23.x;
  let x_3263 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3261 * x_3263);
  let x_3267 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3267);
  let x_3271 : f32 = u_xlat23.x;
  let x_3273 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3271 * x_3273);
  let x_3276 : vec4<f32> = u_xlat8;
  let x_3278 : vec3<f32> = u_xlat23;
  let x_3280 : vec3<f32> = (vec3<f32>(x_3276.x, x_3276.y, x_3276.z) * vec3<f32>(x_3278.x, x_3278.x, x_3278.x));
  let x_3281 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3280.x, x_3280.y, x_3280.z, x_3281.w);
  let x_3283 : f32 = u_xlat65;
  let x_3285 : f32 = u_xlat65;
  let x_3289 : vec2<f32> = ((vec2<f32>(x_3283, x_3283) * vec2<f32>(x_3285, x_3285)) + vec2<f32>(-1.0f, 1.0f));
  let x_3290 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3289.x, x_3290.y, x_3289.y);
  let x_3293 : f32 = u_xlat23.z;
  u_xlat65 = (1.0f / x_3293);
  let x_3295 : f32 = u_xlat67;
  u_xlat67 = (x_3295 + -0.039999999f);
  let x_3299 : f32 = u_xlat2.x;
  let x_3300 : f32 = u_xlat67;
  u_xlat2.x = ((x_3299 * x_3300) + 0.039999999f);
  let x_3306 : f32 = u_xlat2.x;
  let x_3307 : f32 = u_xlat65;
  u_xlat2.x = (x_3306 * x_3307);
  let x_3310 : vec3<f32> = u_xlat2;
  let x_3312 : vec4<f32> = u_xlat8;
  let x_3314 : vec3<f32> = (vec3<f32>(x_3310.x, x_3310.x, x_3310.x) * vec3<f32>(x_3312.x, x_3312.y, x_3312.z));
  let x_3315 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3314.x, x_3314.y, x_3314.z, x_3315.w);
  let x_3317 : vec4<f32> = u_xlat3;
  let x_3319 : vec3<f32> = u_xlat5;
  let x_3321 : vec4<f32> = u_xlat8;
  let x_3323 : vec3<f32> = ((vec3<f32>(x_3317.x, x_3317.y, x_3317.z) * x_3319) + vec3<f32>(x_3321.x, x_3321.y, x_3321.z));
  let x_3324 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3323.x, x_3323.y, x_3323.z, x_3324.w);
  let x_3327 : f32 = u_xlat0.x;
  let x_3329 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3327 * x_3329);
  let x_3332 : vec3<f32> = u_xlat21;
  let x_3334 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat2.x = dot(x_3332, vec3<f32>(x_3334.x, x_3334.y, x_3334.z));
  let x_3339 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3339, 0.0f, 1.0f);
  let x_3343 : f32 = u_xlat0.x;
  let x_3345 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3343 * x_3345);
  let x_3348 : vec3<f32> = u_xlat0;
  let x_3350 : vec4<f32> = u_xlat7;
  let x_3352 : vec3<f32> = (vec3<f32>(x_3348.x, x_3348.x, x_3348.x) * vec3<f32>(x_3350.x, x_3350.y, x_3350.z));
  let x_3353 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3352.x, x_3352.y, x_3352.z, x_3353.w);
  let x_3355 : vec4<f32> = u_xlat4;
  let x_3358 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3360 : vec3<f32> = (vec3<f32>(x_3355.x, x_3355.y, x_3355.z) + vec3<f32>(x_3358.x, x_3358.y, x_3358.z));
  let x_3361 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3360.x, x_3360.y, x_3360.z, x_3361.w);
  let x_3363 : vec4<f32> = u_xlat8;
  let x_3365 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3363.x, x_3363.y, x_3363.z), vec3<f32>(x_3365.x, x_3365.y, x_3365.z));
  let x_3370 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3370, 1.17549435e-37f);
  let x_3374 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3374);
  let x_3377 : vec3<f32> = u_xlat0;
  let x_3379 : vec4<f32> = u_xlat8;
  let x_3381 : vec3<f32> = (vec3<f32>(x_3377.x, x_3377.x, x_3377.x) * vec3<f32>(x_3379.x, x_3379.y, x_3379.z));
  let x_3382 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3381.x, x_3381.y, x_3381.z, x_3382.w);
  let x_3384 : vec3<f32> = u_xlat21;
  let x_3385 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3384, vec3<f32>(x_3385.x, x_3385.y, x_3385.z));
  let x_3390 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3390, 0.0f, 1.0f);
  let x_3394 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3396 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3394.x, x_3394.y, x_3394.z), vec3<f32>(x_3396.x, x_3396.y, x_3396.z));
  let x_3401 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3401, 0.0f, 1.0f);
  let x_3405 : f32 = u_xlat0.x;
  let x_3407 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3405 * x_3407);
  let x_3411 : f32 = u_xlat0.x;
  let x_3413 : f32 = u_xlat23.x;
  u_xlat0.x = ((x_3411 * x_3413) + 1.000010014f);
  let x_3419 : f32 = u_xlat2.x;
  let x_3421 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3419 * x_3421);
  let x_3425 : f32 = u_xlat0.x;
  let x_3427 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3425 * x_3427);
  let x_3431 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3431, 0.100000001f);
  let x_3436 : f32 = u_xlat0.x;
  let x_3438 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3436 * x_3438);
  let x_3441 : f32 = u_xlat68;
  let x_3443 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3441 * x_3443);
  let x_3446 : f32 = u_xlat66;
  let x_3448 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3446 / x_3448);
  let x_3451 : vec3<f32> = u_xlat0;
  let x_3455 : vec3<f32> = u_xlat5;
  let x_3456 : vec3<f32> = ((vec3<f32>(x_3451.x, x_3451.x, x_3451.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3455);
  let x_3457 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3456.x, x_3456.y, x_3456.z, x_3457.w);
  let x_3459 : vec4<f32> = u_xlat7;
  let x_3461 : vec4<f32> = u_xlat8;
  let x_3463 : vec3<f32> = (vec3<f32>(x_3459.x, x_3459.y, x_3459.z) * vec3<f32>(x_3461.x, x_3461.y, x_3461.z));
  let x_3464 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3463.x, x_3463.y, x_3463.z, x_3464.w);
  let x_3467 : f32 = x_137.x_AdditionalLightsCount.x;
  let x_3469 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3467, x_3469);
  let x_3475 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3475));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3487 : u32 = u_xlatu_loop_1;
    let x_3488 : u32 = u_xlatu0;
    if ((x_3487 < x_3488)) {
    } else {
      break;
    }
    let x_3491 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3491 >> 2u);
    let x_3495 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3495 & 3u));
    let x_3498 : u32 = u_xlatu65;
    let x_3501 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3498)];
    let x_3511 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3516 : vec4<u32> = indexable[x_3511];
    u_xlat65 = dot(x_3501, bitcast<vec4<f32>>(x_3516));
    let x_3520 : f32 = u_xlat65;
    u_xlati65 = i32(x_3520);
    let x_3522 : vec3<f32> = vs_INTERP0;
    let x_3534 : i32 = u_xlati65;
    let x_3536 : vec4<f32> = x_3533.x_AdditionalLightsPosition[x_3534];
    let x_3539 : i32 = u_xlati65;
    let x_3541 : vec4<f32> = x_3533.x_AdditionalLightsPosition[x_3539];
    let x_3543 : vec3<f32> = ((-(x_3522) * vec3<f32>(x_3536.w, x_3536.w, x_3536.w)) + vec3<f32>(x_3541.x, x_3541.y, x_3541.z));
    let x_3544 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3543.x, x_3543.y, x_3543.z, x_3544.w);
    let x_3546 : vec4<f32> = u_xlat9;
    let x_3548 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3546.x, x_3546.y, x_3546.z), vec3<f32>(x_3548.x, x_3548.y, x_3548.z));
    let x_3551 : f32 = u_xlat67;
    u_xlat67 = max(x_3551, 6.10351562e-05f);
    let x_3554 : f32 = u_xlat67;
    u_xlat48.x = inverseSqrt(x_3554);
    let x_3557 : vec2<f32> = u_xlat48;
    let x_3559 : vec4<f32> = u_xlat9;
    let x_3561 : vec3<f32> = (vec3<f32>(x_3557.x, x_3557.x, x_3557.x) * vec3<f32>(x_3559.x, x_3559.y, x_3559.z));
    let x_3562 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3561.x, x_3561.y, x_3561.z, x_3562.w);
    let x_3564 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_3564);
    let x_3566 : f32 = u_xlat67;
    let x_3567 : i32 = u_xlati65;
    let x_3569 : f32 = x_3533.x_AdditionalLightsAttenuation[x_3567].x;
    u_xlat67 = (x_3566 * x_3569);
    let x_3571 : f32 = u_xlat67;
    let x_3573 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3571) * x_3573) + 1.0f);
    let x_3576 : f32 = u_xlat67;
    u_xlat67 = max(x_3576, 0.0f);
    let x_3578 : f32 = u_xlat67;
    let x_3579 : f32 = u_xlat67;
    u_xlat67 = (x_3578 * x_3579);
    let x_3581 : f32 = u_xlat67;
    let x_3582 : f32 = u_xlat69;
    u_xlat67 = (x_3581 * x_3582);
    let x_3584 : i32 = u_xlati65;
    let x_3586 : vec4<f32> = x_3533.x_AdditionalLightsSpotDir[x_3584];
    let x_3588 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3586.x, x_3586.y, x_3586.z), vec3<f32>(x_3588.x, x_3588.y, x_3588.z));
    let x_3591 : f32 = u_xlat69;
    let x_3592 : i32 = u_xlati65;
    let x_3594 : f32 = x_3533.x_AdditionalLightsAttenuation[x_3592].z;
    let x_3596 : i32 = u_xlati65;
    let x_3598 : f32 = x_3533.x_AdditionalLightsAttenuation[x_3596].w;
    u_xlat69 = ((x_3591 * x_3594) + x_3598);
    let x_3600 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3600, 0.0f, 1.0f);
    let x_3602 : f32 = u_xlat69;
    let x_3603 : f32 = u_xlat69;
    u_xlat69 = (x_3602 * x_3603);
    let x_3605 : f32 = u_xlat67;
    let x_3606 : f32 = u_xlat69;
    u_xlat67 = (x_3605 * x_3606);
    let x_3608 : vec3<f32> = u_xlat27;
    let x_3610 : i32 = u_xlati65;
    let x_3612 : vec4<f32> = x_3533.x_AdditionalLightsColor[x_3610];
    let x_3614 : vec3<f32> = (vec3<f32>(x_3608.x, x_3608.x, x_3608.x) * vec3<f32>(x_3612.x, x_3612.y, x_3612.z));
    let x_3615 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3614.x, x_3614.y, x_3614.z, x_3615.w);
    let x_3617 : vec3<f32> = u_xlat21;
    let x_3618 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(x_3617, vec3<f32>(x_3618.x, x_3618.y, x_3618.z));
    let x_3621 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3621, 0.0f, 1.0f);
    let x_3623 : f32 = u_xlat65;
    let x_3624 : f32 = u_xlat67;
    u_xlat65 = (x_3623 * x_3624);
    let x_3626 : f32 = u_xlat65;
    let x_3628 : vec4<f32> = u_xlat11;
    let x_3630 : vec3<f32> = (vec3<f32>(x_3626, x_3626, x_3626) * vec3<f32>(x_3628.x, x_3628.y, x_3628.z));
    let x_3631 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3630.x, x_3630.y, x_3630.z, x_3631.w);
    let x_3633 : vec4<f32> = u_xlat9;
    let x_3635 : vec2<f32> = u_xlat48;
    let x_3638 : vec4<f32> = u_xlat4;
    let x_3640 : vec3<f32> = ((vec3<f32>(x_3633.x, x_3633.y, x_3633.z) * vec3<f32>(x_3635.x, x_3635.x, x_3635.x)) + vec3<f32>(x_3638.x, x_3638.y, x_3638.z));
    let x_3641 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3640.x, x_3640.y, x_3640.z, x_3641.w);
    let x_3643 : vec4<f32> = u_xlat9;
    let x_3645 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3643.x, x_3643.y, x_3643.z), vec3<f32>(x_3645.x, x_3645.y, x_3645.z));
    let x_3648 : f32 = u_xlat65;
    u_xlat65 = max(x_3648, 1.17549435e-37f);
    let x_3650 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3650);
    let x_3652 : f32 = u_xlat65;
    let x_3654 : vec4<f32> = u_xlat9;
    let x_3656 : vec3<f32> = (vec3<f32>(x_3652, x_3652, x_3652) * vec3<f32>(x_3654.x, x_3654.y, x_3654.z));
    let x_3657 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3656.x, x_3656.y, x_3656.z, x_3657.w);
    let x_3659 : vec3<f32> = u_xlat21;
    let x_3660 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(x_3659, vec3<f32>(x_3660.x, x_3660.y, x_3660.z));
    let x_3663 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3663, 0.0f, 1.0f);
    let x_3665 : vec4<f32> = u_xlat10;
    let x_3667 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3665.x, x_3665.y, x_3665.z), vec3<f32>(x_3667.x, x_3667.y, x_3667.z));
    let x_3670 : f32 = u_xlat67;
    u_xlat67 = clamp(x_3670, 0.0f, 1.0f);
    let x_3672 : f32 = u_xlat65;
    let x_3673 : f32 = u_xlat65;
    u_xlat65 = (x_3672 * x_3673);
    let x_3675 : f32 = u_xlat65;
    let x_3677 : f32 = u_xlat23.x;
    u_xlat65 = ((x_3675 * x_3677) + 1.000010014f);
    let x_3680 : f32 = u_xlat67;
    let x_3681 : f32 = u_xlat67;
    u_xlat67 = (x_3680 * x_3681);
    let x_3683 : f32 = u_xlat65;
    let x_3684 : f32 = u_xlat65;
    u_xlat65 = (x_3683 * x_3684);
    let x_3686 : f32 = u_xlat67;
    u_xlat67 = max(x_3686, 0.100000001f);
    let x_3688 : f32 = u_xlat65;
    let x_3689 : f32 = u_xlat67;
    u_xlat65 = (x_3688 * x_3689);
    let x_3691 : f32 = u_xlat68;
    let x_3692 : f32 = u_xlat65;
    u_xlat65 = (x_3691 * x_3692);
    let x_3694 : f32 = u_xlat66;
    let x_3695 : f32 = u_xlat65;
    u_xlat65 = (x_3694 / x_3695);
    let x_3697 : f32 = u_xlat65;
    let x_3700 : vec3<f32> = u_xlat5;
    let x_3701 : vec3<f32> = ((vec3<f32>(x_3697, x_3697, x_3697) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3700);
    let x_3702 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3701.x, x_3701.y, x_3701.z, x_3702.w);
    let x_3704 : vec4<f32> = u_xlat9;
    let x_3706 : vec4<f32> = u_xlat11;
    let x_3709 : vec4<f32> = u_xlat8;
    let x_3711 : vec3<f32> = ((vec3<f32>(x_3704.x, x_3704.y, x_3704.z) * vec3<f32>(x_3706.x, x_3706.y, x_3706.z)) + vec3<f32>(x_3709.x, x_3709.y, x_3709.z));
    let x_3712 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3711.x, x_3711.y, x_3711.z, x_3712.w);

    continuing {
      let x_3714 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3714 + bitcast<u32>(1i));
    }
  }
  let x_3716 : vec4<f32> = u_xlat3;
  let x_3718 : vec4<f32> = u_xlat6;
  let x_3721 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_3716.x, x_3716.y, x_3716.z) * vec3<f32>(x_3718.x, x_3718.x, x_3718.x)) + vec3<f32>(x_3721.x, x_3721.y, x_3721.z));
  let x_3724 : vec4<f32> = u_xlat8;
  let x_3726 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3724.x, x_3724.y, x_3724.z) + x_3726);
  let x_3730 : vec4<f32> = vs_INTERP4;
  let x_3732 : vec3<f32> = u_xlat1;
  let x_3734 : vec3<f32> = u_xlat0;
  let x_3735 : vec3<f32> = ((vec3<f32>(x_3730.w, x_3730.w, x_3730.w) * x_3732) + x_3734);
  let x_3736 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3735.x, x_3735.y, x_3735.z, x_3736.w);
  let x_3738 : bool = u_xlatb44;
  let x_3739 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_3739, x_3738);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

