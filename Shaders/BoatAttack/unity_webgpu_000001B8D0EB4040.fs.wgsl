struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_271 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3770 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1727 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu45 : u32;
  var u_xlatu25 : u32;
  var u_xlati45 : i32;
  var u_xlati23 : i32;
  var u_xlatu23 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat23 : f32;
  var x_1860 : f32;
  var u_xlatb45 : vec2<bool>;
  var u_xlat45 : vec2<f32>;
  var u_xlatb23 : bool;
  var x_1932 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : bool;
  var u_xlat52 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat71 : f32;
  var x_3988 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb66;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb66;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb66;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat66 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat66;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat66;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat66;
  u_xlat66 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat66;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_273 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres0;
  let x_276 : vec3<f32> = (x_266 + -(vec3<f32>(x_273.x, x_273.y, x_273.z)));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres1;
  let x_285 : vec3<f32> = (x_280 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_289 : vec3<f32> = vs_INTERP0;
  let x_292 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres2;
  let x_295 : vec3<f32> = (x_289 + -(vec3<f32>(x_292.x, x_292.y, x_292.z)));
  let x_296 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_295.x, x_295.y, x_295.z, x_296.w);
  let x_299 : vec3<f32> = vs_INTERP0;
  let x_302 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres3;
  let x_305 : vec3<f32> = (x_299 + -(vec3<f32>(x_302.x, x_302.y, x_302.z)));
  let x_306 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_305.x, x_305.y, x_305.z, x_306.w);
  let x_308 : vec4<f32> = u_xlat6;
  let x_310 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_308.x, x_308.y, x_308.z), vec3<f32>(x_310.x, x_310.y, x_310.z));
  let x_314 : vec4<f32> = u_xlat7;
  let x_316 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_314.x, x_314.y, x_314.z), vec3<f32>(x_316.x, x_316.y, x_316.z));
  let x_320 : vec4<f32> = u_xlat8;
  let x_322 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_320.x, x_320.y, x_320.z), vec3<f32>(x_322.x, x_322.y, x_322.z));
  let x_326 : vec4<f32> = u_xlat9;
  let x_328 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_326.x, x_326.y, x_326.z), vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_335 : vec4<f32> = u_xlat6;
  let x_338 : vec4<f32> = x_271.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_335 < x_338);
  let x_341 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_341);
  let x_345 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_345);
  let x_349 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_349);
  let x_353 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_353);
  let x_357 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_357);
  let x_362 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_362);
  let x_366 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_366);
  let x_369 : vec4<f32> = u_xlat6;
  let x_371 : vec4<f32> = u_xlat7;
  let x_373 : vec3<f32> = (vec3<f32>(x_369.x, x_369.y, x_369.z) + vec3<f32>(x_371.y, x_371.z, x_371.w));
  let x_374 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_373.x, x_373.y, x_373.z, x_374.w);
  let x_376 : vec4<f32> = u_xlat6;
  let x_379 : vec3<f32> = max(vec3<f32>(x_376.x, x_376.y, x_376.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_380 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_380.x, x_379.x, x_379.y, x_379.z);
  let x_382 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_382, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_387 : f32 = u_xlat66;
  u_xlat66 = (-(x_387) + 4.0f);
  let x_391 : f32 = u_xlat66;
  u_xlatu66 = u32(x_391);
  let x_394 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_394) << bitcast<u32>(2i));
  let x_397 : vec3<f32> = vs_INTERP0;
  let x_399 : i32 = u_xlati66;
  let x_402 : i32 = u_xlati66;
  let x_406 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_399 + 1i) / 4i)][((x_402 + 1i) % 4i)];
  let x_408 : vec3<f32> = (vec3<f32>(x_397.y, x_397.y, x_397.y) * vec3<f32>(x_406.x, x_406.y, x_406.z));
  let x_409 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_408.x, x_408.y, x_408.z, x_409.w);
  let x_411 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_416 : vec4<f32> = x_271.x_MainLightWorldToShadow[(x_411 / 4i)][(x_413 % 4i)];
  let x_418 : vec3<f32> = vs_INTERP0;
  let x_421 : vec4<f32> = u_xlat6;
  let x_423 : vec3<f32> = ((vec3<f32>(x_416.x, x_416.y, x_416.z) * vec3<f32>(x_418.x, x_418.x, x_418.x)) + vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_424 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_423.x, x_423.y, x_423.z, x_424.w);
  let x_426 : i32 = u_xlati66;
  let x_429 : i32 = u_xlati66;
  let x_433 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_426 + 2i) / 4i)][((x_429 + 2i) % 4i)];
  let x_435 : vec3<f32> = vs_INTERP0;
  let x_438 : vec4<f32> = u_xlat6;
  let x_440 : vec3<f32> = ((vec3<f32>(x_433.x, x_433.y, x_433.z) * vec3<f32>(x_435.z, x_435.z, x_435.z)) + vec3<f32>(x_438.x, x_438.y, x_438.z));
  let x_441 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
  let x_443 : vec4<f32> = u_xlat6;
  let x_445 : i32 = u_xlati66;
  let x_448 : i32 = u_xlati66;
  let x_452 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_445 + 3i) / 4i)][((x_448 + 3i) % 4i)];
  let x_454 : vec3<f32> = (vec3<f32>(x_443.x, x_443.y, x_443.z) + vec3<f32>(x_452.x, x_452.y, x_452.z));
  let x_455 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_454.x, x_454.y, x_454.z, x_455.w);
  let x_459 : f32 = x_271.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_459);
  let x_461 : bool = u_xlatb66;
  if (x_461) {
    let x_466 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb67 = (x_466 == 1.0f);
    let x_468 : bool = u_xlatb67;
    if (x_468) {
      let x_471 : vec4<f32> = u_xlat6;
      let x_475 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_471.x, x_471.y, x_471.x, x_471.y) + x_475);
      let x_478 : vec4<f32> = u_xlat7;
      let x_479 : vec2<f32> = vec2<f32>(x_478.x, x_478.y);
      let x_481 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_479.x, x_479.y, x_481);
      let x_493 : vec3<f32> = txVec0;
      let x_495 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_493.xy, x_493.z);
      u_xlat8.x = x_495;
      let x_498 : vec4<f32> = u_xlat7;
      let x_499 : vec2<f32> = vec2<f32>(x_498.z, x_498.w);
      let x_501 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_499.x, x_499.y, x_501);
      let x_508 : vec3<f32> = txVec1;
      let x_510 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_508.xy, x_508.z);
      u_xlat8.y = x_510;
      let x_512 : vec4<f32> = u_xlat6;
      let x_516 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_512.x, x_512.y, x_512.x, x_512.y) + x_516);
      let x_519 : vec4<f32> = u_xlat7;
      let x_520 : vec2<f32> = vec2<f32>(x_519.x, x_519.y);
      let x_522 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_520.x, x_520.y, x_522);
      let x_529 : vec3<f32> = txVec2;
      let x_531 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_529.xy, x_529.z);
      u_xlat8.z = x_531;
      let x_534 : vec4<f32> = u_xlat7;
      let x_535 : vec2<f32> = vec2<f32>(x_534.z, x_534.w);
      let x_537 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_535.x, x_535.y, x_537);
      let x_544 : vec3<f32> = txVec3;
      let x_546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_544.xy, x_544.z);
      u_xlat8.w = x_546;
      let x_548 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_548, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_555 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb68 = (x_555 == 2.0f);
      let x_557 : bool = u_xlatb68;
      if (x_557) {
        let x_560 : vec4<f32> = u_xlat6;
        let x_563 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_568 : vec2<f32> = ((vec2<f32>(x_560.x, x_560.y) * vec2<f32>(x_563.z, x_563.w)) + vec2<f32>(0.5f, 0.5f));
        let x_569 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_568.x, x_568.y, x_569.z, x_569.w);
        let x_571 : vec4<f32> = u_xlat7;
        let x_573 : vec2<f32> = floor(vec2<f32>(x_571.x, x_571.y));
        let x_574 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_573.x, x_573.y, x_574.z, x_574.w);
        let x_578 : vec4<f32> = u_xlat6;
        let x_581 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_584 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_578.x, x_578.y) * vec2<f32>(x_581.z, x_581.w)) + -(vec2<f32>(x_584.x, x_584.y)));
        let x_588 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_588.x, x_588.x, x_588.y, x_588.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_592 : vec4<f32> = u_xlat8;
        let x_594 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_592.x, x_592.x, x_592.z, x_592.z) * vec4<f32>(x_594.x, x_594.x, x_594.z, x_594.z));
        let x_597 : vec4<f32> = u_xlat9;
        let x_601 : vec2<f32> = (vec2<f32>(x_597.y, x_597.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_602 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_601.x, x_602.y, x_601.y, x_602.w);
        let x_604 : vec4<f32> = u_xlat9;
        let x_607 : vec2<f32> = u_xlat51;
        let x_609 : vec2<f32> = ((vec2<f32>(x_604.x, x_604.z) * vec2<f32>(0.5f, 0.5f)) + -(x_607));
        let x_610 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_609.x, x_609.y, x_610.z, x_610.w);
        let x_613 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_613) + vec2<f32>(1.0f, 1.0f));
        let x_618 : vec2<f32> = u_xlat51;
        let x_620 : vec2<f32> = min(x_618, vec2<f32>(0.0f, 0.0f));
        let x_621 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
        let x_623 : vec4<f32> = u_xlat10;
        let x_626 : vec4<f32> = u_xlat10;
        let x_629 : vec2<f32> = u_xlat53;
        let x_630 : vec2<f32> = ((-(vec2<f32>(x_623.x, x_623.y)) * vec2<f32>(x_626.x, x_626.y)) + x_629);
        let x_631 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_630.x, x_630.y, x_631.z, x_631.w);
        let x_633 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_633, vec2<f32>(0.0f, 0.0f));
        let x_635 : vec2<f32> = u_xlat51;
        let x_637 : vec2<f32> = u_xlat51;
        let x_639 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_635) * x_637) + vec2<f32>(x_639.y, x_639.w));
        let x_642 : vec4<f32> = u_xlat10;
        let x_644 : vec2<f32> = (vec2<f32>(x_642.x, x_642.y) + vec2<f32>(1.0f, 1.0f));
        let x_645 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_644.x, x_644.y, x_645.z, x_645.w);
        let x_647 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_647 + vec2<f32>(1.0f, 1.0f));
        let x_650 : vec4<f32> = u_xlat9;
        let x_654 : vec2<f32> = (vec2<f32>(x_650.x, x_650.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_655 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_654.x, x_654.y, x_655.z, x_655.w);
        let x_657 : vec2<f32> = u_xlat53;
        let x_658 : vec2<f32> = (x_657 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_658.x, x_658.y, x_659.z, x_659.w);
        let x_661 : vec4<f32> = u_xlat10;
        let x_663 : vec2<f32> = (vec2<f32>(x_661.x, x_661.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_664 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_663.x, x_663.y, x_664.z, x_664.w);
        let x_667 : vec2<f32> = u_xlat51;
        let x_668 : vec2<f32> = (x_667 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_669 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_668.x, x_668.y, x_669.z, x_669.w);
        let x_671 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_671.y, x_671.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_675 : f32 = u_xlat10.x;
        u_xlat11.z = x_675;
        let x_678 : f32 = u_xlat51.x;
        u_xlat11.w = x_678;
        let x_681 : f32 = u_xlat12.x;
        u_xlat9.z = x_681;
        let x_684 : f32 = u_xlat8.x;
        u_xlat9.w = x_684;
        let x_687 : vec4<f32> = u_xlat9;
        let x_689 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_687.z, x_687.w, x_687.x, x_687.z) + vec4<f32>(x_689.z, x_689.w, x_689.x, x_689.z));
        let x_693 : f32 = u_xlat11.y;
        u_xlat10.z = x_693;
        let x_696 : f32 = u_xlat51.y;
        u_xlat10.w = x_696;
        let x_699 : f32 = u_xlat9.y;
        u_xlat12.z = x_699;
        let x_702 : f32 = u_xlat8.z;
        u_xlat12.w = x_702;
        let x_704 : vec4<f32> = u_xlat10;
        let x_706 : vec4<f32> = u_xlat12;
        let x_708 : vec3<f32> = (vec3<f32>(x_704.z, x_704.y, x_704.w) + vec3<f32>(x_706.z, x_706.y, x_706.w));
        let x_709 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_708.x, x_708.y, x_708.z, x_709.w);
        let x_711 : vec4<f32> = u_xlat9;
        let x_713 : vec4<f32> = u_xlat13;
        let x_715 : vec3<f32> = (vec3<f32>(x_711.x, x_711.z, x_711.w) / vec3<f32>(x_713.z, x_713.w, x_713.y));
        let x_716 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat9;
        let x_724 : vec3<f32> = (vec3<f32>(x_718.x, x_718.y, x_718.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_725 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_724.x, x_724.y, x_724.z, x_725.w);
        let x_727 : vec4<f32> = u_xlat12;
        let x_729 : vec4<f32> = u_xlat8;
        let x_731 : vec3<f32> = (vec3<f32>(x_727.z, x_727.y, x_727.w) / vec3<f32>(x_729.x, x_729.y, x_729.z));
        let x_732 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_731.x, x_731.y, x_731.z, x_732.w);
        let x_734 : vec4<f32> = u_xlat10;
        let x_736 : vec3<f32> = (vec3<f32>(x_734.x, x_734.y, x_734.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_736.x, x_736.y, x_736.z, x_737.w);
        let x_739 : vec4<f32> = u_xlat9;
        let x_742 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_744 : vec3<f32> = (vec3<f32>(x_739.y, x_739.x, x_739.z) * vec3<f32>(x_742.x, x_742.x, x_742.x));
        let x_745 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_744.x, x_744.y, x_744.z, x_745.w);
        let x_747 : vec4<f32> = u_xlat10;
        let x_750 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_752 : vec3<f32> = (vec3<f32>(x_747.x, x_747.y, x_747.z) * vec3<f32>(x_750.y, x_750.y, x_750.y));
        let x_753 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_752.x, x_752.y, x_752.z, x_753.w);
        let x_756 : f32 = u_xlat10.x;
        u_xlat9.w = x_756;
        let x_758 : vec4<f32> = u_xlat7;
        let x_761 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_764 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_758.x, x_758.y, x_758.x, x_758.y) * vec4<f32>(x_761.x, x_761.y, x_761.x, x_761.y)) + vec4<f32>(x_764.y, x_764.w, x_764.x, x_764.w));
        let x_767 : vec4<f32> = u_xlat7;
        let x_770 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.x, x_770.y)) + vec2<f32>(x_773.z, x_773.w));
        let x_777 : f32 = u_xlat9.y;
        u_xlat10.w = x_777;
        let x_779 : vec4<f32> = u_xlat10;
        let x_780 : vec2<f32> = vec2<f32>(x_779.y, x_779.z);
        let x_781 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_781.x, x_780.x, x_781.z, x_780.y);
        let x_783 : vec4<f32> = u_xlat7;
        let x_786 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_789 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_783.x, x_783.y, x_783.x, x_783.y) * vec4<f32>(x_786.x, x_786.y, x_786.x, x_786.y)) + vec4<f32>(x_789.x, x_789.y, x_789.z, x_789.y));
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_798 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_792.x, x_792.y, x_792.x, x_792.y) * vec4<f32>(x_795.x, x_795.y, x_795.x, x_795.y)) + vec4<f32>(x_798.w, x_798.y, x_798.w, x_798.z));
        let x_801 : vec4<f32> = u_xlat7;
        let x_804 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_807 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_801.x, x_801.y, x_801.x, x_801.y) * vec4<f32>(x_804.x, x_804.y, x_804.x, x_804.y)) + vec4<f32>(x_807.x, x_807.w, x_807.z, x_807.w));
        let x_811 : vec4<f32> = u_xlat8;
        let x_813 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_811.x, x_811.x, x_811.x, x_811.y) * vec4<f32>(x_813.z, x_813.w, x_813.y, x_813.z));
        let x_817 : vec4<f32> = u_xlat8;
        let x_819 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_817.y, x_817.y, x_817.z, x_817.z) * x_819);
        let x_823 : f32 = u_xlat8.z;
        let x_825 : f32 = u_xlat13.y;
        u_xlat68 = (x_823 * x_825);
        let x_828 : vec4<f32> = u_xlat11;
        let x_829 : vec2<f32> = vec2<f32>(x_828.x, x_828.y);
        let x_831 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_829.x, x_829.y, x_831);
        let x_839 : vec3<f32> = txVec4;
        let x_841 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_839.xy, x_839.z);
        u_xlat70 = x_841;
        let x_843 : vec4<f32> = u_xlat11;
        let x_844 : vec2<f32> = vec2<f32>(x_843.z, x_843.w);
        let x_846 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_844.x, x_844.y, x_846);
        let x_854 : vec3<f32> = txVec5;
        let x_856 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_854.xy, x_854.z);
        u_xlat72 = x_856;
        let x_857 : f32 = u_xlat72;
        let x_859 : f32 = u_xlat14.y;
        u_xlat72 = (x_857 * x_859);
        let x_862 : f32 = u_xlat14.x;
        let x_863 : f32 = u_xlat70;
        let x_865 : f32 = u_xlat72;
        u_xlat70 = ((x_862 * x_863) + x_865);
        let x_868 : vec2<f32> = u_xlat51;
        let x_870 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_868.x, x_868.y, x_870);
        let x_877 : vec3<f32> = txVec6;
        let x_879 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_877.xy, x_877.z);
        u_xlat72 = x_879;
        let x_881 : f32 = u_xlat14.z;
        let x_882 : f32 = u_xlat72;
        let x_884 : f32 = u_xlat70;
        u_xlat70 = ((x_881 * x_882) + x_884);
        let x_887 : vec4<f32> = u_xlat10;
        let x_888 : vec2<f32> = vec2<f32>(x_887.x, x_887.y);
        let x_890 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_888.x, x_888.y, x_890);
        let x_897 : vec3<f32> = txVec7;
        let x_899 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_897.xy, x_897.z);
        u_xlat72 = x_899;
        let x_901 : f32 = u_xlat14.w;
        let x_902 : f32 = u_xlat72;
        let x_904 : f32 = u_xlat70;
        u_xlat70 = ((x_901 * x_902) + x_904);
        let x_907 : vec4<f32> = u_xlat12;
        let x_908 : vec2<f32> = vec2<f32>(x_907.x, x_907.y);
        let x_910 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_908.x, x_908.y, x_910);
        let x_917 : vec3<f32> = txVec8;
        let x_919 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_917.xy, x_917.z);
        u_xlat72 = x_919;
        let x_921 : f32 = u_xlat15.x;
        let x_922 : f32 = u_xlat72;
        let x_924 : f32 = u_xlat70;
        u_xlat70 = ((x_921 * x_922) + x_924);
        let x_927 : vec4<f32> = u_xlat12;
        let x_928 : vec2<f32> = vec2<f32>(x_927.z, x_927.w);
        let x_930 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_928.x, x_928.y, x_930);
        let x_937 : vec3<f32> = txVec9;
        let x_939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_937.xy, x_937.z);
        u_xlat72 = x_939;
        let x_941 : f32 = u_xlat15.y;
        let x_942 : f32 = u_xlat72;
        let x_944 : f32 = u_xlat70;
        u_xlat70 = ((x_941 * x_942) + x_944);
        let x_947 : vec4<f32> = u_xlat10;
        let x_948 : vec2<f32> = vec2<f32>(x_947.z, x_947.w);
        let x_950 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_948.x, x_948.y, x_950);
        let x_957 : vec3<f32> = txVec10;
        let x_959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_957.xy, x_957.z);
        u_xlat72 = x_959;
        let x_961 : f32 = u_xlat15.z;
        let x_962 : f32 = u_xlat72;
        let x_964 : f32 = u_xlat70;
        u_xlat70 = ((x_961 * x_962) + x_964);
        let x_967 : vec4<f32> = u_xlat9;
        let x_968 : vec2<f32> = vec2<f32>(x_967.x, x_967.y);
        let x_970 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_968.x, x_968.y, x_970);
        let x_977 : vec3<f32> = txVec11;
        let x_979 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_977.xy, x_977.z);
        u_xlat72 = x_979;
        let x_981 : f32 = u_xlat15.w;
        let x_982 : f32 = u_xlat72;
        let x_984 : f32 = u_xlat70;
        u_xlat70 = ((x_981 * x_982) + x_984);
        let x_987 : vec4<f32> = u_xlat9;
        let x_988 : vec2<f32> = vec2<f32>(x_987.z, x_987.w);
        let x_990 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_988.x, x_988.y, x_990);
        let x_997 : vec3<f32> = txVec12;
        let x_999 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_997.xy, x_997.z);
        u_xlat72 = x_999;
        let x_1000 : f32 = u_xlat68;
        let x_1001 : f32 = u_xlat72;
        let x_1003 : f32 = u_xlat70;
        u_xlat67 = ((x_1000 * x_1001) + x_1003);
      } else {
        let x_1006 : vec4<f32> = u_xlat6;
        let x_1009 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1012 : vec2<f32> = ((vec2<f32>(x_1006.x, x_1006.y) * vec2<f32>(x_1009.z, x_1009.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1013 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1012.x, x_1012.y, x_1013.z, x_1013.w);
        let x_1015 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = floor(vec2<f32>(x_1015.x, x_1015.y));
        let x_1018 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1020 : vec4<f32> = u_xlat6;
        let x_1023 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.z, x_1023.w)) + -(vec2<f32>(x_1026.x, x_1026.y)));
        let x_1030 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1030.x, x_1030.x, x_1030.y, x_1030.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1033 : vec4<f32> = u_xlat8;
        let x_1035 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1033.x, x_1033.x, x_1033.z, x_1033.z) * vec4<f32>(x_1035.x, x_1035.x, x_1035.z, x_1035.z));
        let x_1038 : vec4<f32> = u_xlat9;
        let x_1042 : vec2<f32> = (vec2<f32>(x_1038.y, x_1038.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1043 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1043.x, x_1042.x, x_1043.z, x_1042.y);
        let x_1045 : vec4<f32> = u_xlat9;
        let x_1048 : vec2<f32> = u_xlat51;
        let x_1050 : vec2<f32> = ((vec2<f32>(x_1045.x, x_1045.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1048));
        let x_1051 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1050.x, x_1051.y, x_1050.y, x_1051.w);
        let x_1053 : vec2<f32> = u_xlat51;
        let x_1055 : vec2<f32> = (-(x_1053) + vec2<f32>(1.0f, 1.0f));
        let x_1056 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1055.x, x_1055.y, x_1056.z, x_1056.w);
        let x_1058 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1058, vec2<f32>(0.0f, 0.0f));
        let x_1060 : vec2<f32> = u_xlat53;
        let x_1062 : vec2<f32> = u_xlat53;
        let x_1064 : vec4<f32> = u_xlat9;
        let x_1066 : vec2<f32> = ((-(x_1060) * x_1062) + vec2<f32>(x_1064.x, x_1064.y));
        let x_1067 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1066.x, x_1066.y, x_1067.z, x_1067.w);
        let x_1069 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1069, vec2<f32>(0.0f, 0.0f));
        let x_1072 : vec2<f32> = u_xlat53;
        let x_1074 : vec2<f32> = u_xlat53;
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1078 : vec2<f32> = ((-(x_1072) * x_1074) + vec2<f32>(x_1076.y, x_1076.w));
        let x_1079 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1078.x, x_1079.y, x_1078.y);
        let x_1081 : vec4<f32> = u_xlat9;
        let x_1084 : vec2<f32> = (vec2<f32>(x_1081.x, x_1081.y) + vec2<f32>(2.0f, 2.0f));
        let x_1085 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1084.x, x_1084.y, x_1085.z, x_1085.w);
        let x_1087 : vec3<f32> = u_xlat30;
        let x_1089 : vec2<f32> = (vec2<f32>(x_1087.x, x_1087.z) + vec2<f32>(2.0f, 2.0f));
        let x_1090 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1090.x, x_1089.x, x_1090.z, x_1089.y);
        let x_1093 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1093 * 0.081632003f);
        let x_1097 : vec4<f32> = u_xlat8;
        let x_1100 : vec3<f32> = (vec3<f32>(x_1097.z, x_1097.x, x_1097.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1101 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1100.x, x_1100.y, x_1100.z, x_1101.w);
        let x_1103 : vec4<f32> = u_xlat9;
        let x_1106 : vec2<f32> = (vec2<f32>(x_1103.x, x_1103.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1107 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1106.x, x_1106.y, x_1107.z, x_1107.w);
        let x_1110 : f32 = u_xlat12.y;
        u_xlat11.x = x_1110;
        let x_1112 : vec2<f32> = u_xlat51;
        let x_1119 : vec2<f32> = ((vec2<f32>(x_1112.x, x_1112.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1120 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1120.x, x_1119.x, x_1120.z, x_1119.y);
        let x_1122 : vec2<f32> = u_xlat51;
        let x_1126 : vec2<f32> = ((vec2<f32>(x_1122.x, x_1122.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1127 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1126.x, x_1127.y, x_1126.y, x_1127.w);
        let x_1130 : f32 = u_xlat8.x;
        u_xlat9.y = x_1130;
        let x_1133 : f32 = u_xlat10.y;
        u_xlat9.w = x_1133;
        let x_1135 : vec4<f32> = u_xlat9;
        let x_1136 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1135 + x_1136);
        let x_1138 : vec2<f32> = u_xlat51;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1138.y, x_1138.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1142 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1142.x, x_1141.x, x_1142.z, x_1141.y);
        let x_1144 : vec2<f32> = u_xlat51;
        let x_1147 : vec2<f32> = ((vec2<f32>(x_1144.y, x_1144.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1148 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1147.x, x_1148.y, x_1147.y, x_1148.w);
        let x_1151 : f32 = u_xlat8.y;
        u_xlat10.y = x_1151;
        let x_1153 : vec4<f32> = u_xlat10;
        let x_1154 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1153 + x_1154);
        let x_1156 : vec4<f32> = u_xlat9;
        let x_1157 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1156 / x_1157);
        let x_1159 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1159 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1165 : vec4<f32> = u_xlat10;
        let x_1166 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1165 / x_1166);
        let x_1168 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1168 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1170 : vec4<f32> = u_xlat9;
        let x_1173 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1170.w, x_1170.x, x_1170.y, x_1170.z) * vec4<f32>(x_1173.x, x_1173.x, x_1173.x, x_1173.x));
        let x_1176 : vec4<f32> = u_xlat10;
        let x_1179 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1176.x, x_1176.w, x_1176.y, x_1176.z) * vec4<f32>(x_1179.y, x_1179.y, x_1179.y, x_1179.y));
        let x_1182 : vec4<f32> = u_xlat9;
        let x_1183 : vec3<f32> = vec3<f32>(x_1182.y, x_1182.z, x_1182.w);
        let x_1184 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1183.x, x_1184.y, x_1183.y, x_1183.z);
        let x_1187 : f32 = u_xlat10.x;
        u_xlat12.y = x_1187;
        let x_1189 : vec4<f32> = u_xlat7;
        let x_1192 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1195 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1189.x, x_1189.y, x_1189.x, x_1189.y) * vec4<f32>(x_1192.x, x_1192.y, x_1192.x, x_1192.y)) + vec4<f32>(x_1195.x, x_1195.y, x_1195.z, x_1195.y));
        let x_1198 : vec4<f32> = u_xlat7;
        let x_1201 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1204 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1198.x, x_1198.y) * vec2<f32>(x_1201.x, x_1201.y)) + vec2<f32>(x_1204.w, x_1204.y));
        let x_1208 : f32 = u_xlat12.y;
        u_xlat9.y = x_1208;
        let x_1211 : f32 = u_xlat10.z;
        u_xlat12.y = x_1211;
        let x_1213 : vec4<f32> = u_xlat7;
        let x_1216 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1219 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1213.x, x_1213.y, x_1213.x, x_1213.y) * vec4<f32>(x_1216.x, x_1216.y, x_1216.x, x_1216.y)) + vec4<f32>(x_1219.x, x_1219.y, x_1219.z, x_1219.y));
        let x_1222 : vec4<f32> = u_xlat7;
        let x_1225 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1228 : vec4<f32> = u_xlat12;
        let x_1230 : vec2<f32> = ((vec2<f32>(x_1222.x, x_1222.y) * vec2<f32>(x_1225.x, x_1225.y)) + vec2<f32>(x_1228.w, x_1228.y));
        let x_1231 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1230.x, x_1230.y, x_1231.z, x_1231.w);
        let x_1234 : f32 = u_xlat12.y;
        u_xlat9.z = x_1234;
        let x_1237 : vec4<f32> = u_xlat7;
        let x_1240 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1237.x, x_1237.y, x_1237.x, x_1237.y) * vec4<f32>(x_1240.x, x_1240.y, x_1240.x, x_1240.y)) + vec4<f32>(x_1243.x, x_1243.y, x_1243.x, x_1243.z));
        let x_1247 : f32 = u_xlat10.w;
        u_xlat12.y = x_1247;
        let x_1250 : vec4<f32> = u_xlat7;
        let x_1253 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1256 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1250.x, x_1250.y, x_1250.x, x_1250.y) * vec4<f32>(x_1253.x, x_1253.y, x_1253.x, x_1253.y)) + vec4<f32>(x_1256.x, x_1256.y, x_1256.z, x_1256.y));
        let x_1260 : vec4<f32> = u_xlat7;
        let x_1263 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1266 : vec4<f32> = u_xlat12;
        u_xlat31 = ((vec2<f32>(x_1260.x, x_1260.y) * vec2<f32>(x_1263.x, x_1263.y)) + vec2<f32>(x_1266.w, x_1266.y));
        let x_1270 : f32 = u_xlat12.y;
        u_xlat9.w = x_1270;
        let x_1273 : vec4<f32> = u_xlat7;
        let x_1276 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1279 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1273.x, x_1273.y) * vec2<f32>(x_1276.x, x_1276.y)) + vec2<f32>(x_1279.x, x_1279.w));
        let x_1282 : vec4<f32> = u_xlat12;
        let x_1283 : vec3<f32> = vec3<f32>(x_1282.x, x_1282.z, x_1282.w);
        let x_1284 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1283.x, x_1284.y, x_1283.y, x_1283.z);
        let x_1286 : vec4<f32> = u_xlat7;
        let x_1289 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1292 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1286.x, x_1286.y, x_1286.x, x_1286.y) * vec4<f32>(x_1289.x, x_1289.y, x_1289.x, x_1289.y)) + vec4<f32>(x_1292.x, x_1292.y, x_1292.z, x_1292.y));
        let x_1296 : vec4<f32> = u_xlat7;
        let x_1299 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1302 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1296.x, x_1296.y) * vec2<f32>(x_1299.x, x_1299.y)) + vec2<f32>(x_1302.w, x_1302.y));
        let x_1306 : f32 = u_xlat9.x;
        u_xlat10.x = x_1306;
        let x_1308 : vec4<f32> = u_xlat7;
        let x_1311 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1314 : vec4<f32> = u_xlat10;
        let x_1316 : vec2<f32> = ((vec2<f32>(x_1308.x, x_1308.y) * vec2<f32>(x_1311.x, x_1311.y)) + vec2<f32>(x_1314.x, x_1314.y));
        let x_1317 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1316.x, x_1316.y, x_1317.z, x_1317.w);
        let x_1320 : vec4<f32> = u_xlat8;
        let x_1322 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1320.x, x_1320.x, x_1320.x, x_1320.x) * x_1322);
        let x_1325 : vec4<f32> = u_xlat8;
        let x_1327 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1325.y, x_1325.y, x_1325.y, x_1325.y) * x_1327);
        let x_1330 : vec4<f32> = u_xlat8;
        let x_1332 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1330.z, x_1330.z, x_1330.z, x_1330.z) * x_1332);
        let x_1334 : vec4<f32> = u_xlat8;
        let x_1336 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1334.w, x_1334.w, x_1334.w, x_1334.w) * x_1336);
        let x_1339 : vec4<f32> = u_xlat13;
        let x_1340 : vec2<f32> = vec2<f32>(x_1339.x, x_1339.y);
        let x_1342 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec13;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat68 = x_1351;
        let x_1353 : vec4<f32> = u_xlat13;
        let x_1354 : vec2<f32> = vec2<f32>(x_1353.z, x_1353.w);
        let x_1356 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1354.x, x_1354.y, x_1356);
        let x_1363 : vec3<f32> = txVec14;
        let x_1365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1363.xy, x_1363.z);
        u_xlat70 = x_1365;
        let x_1366 : f32 = u_xlat70;
        let x_1368 : f32 = u_xlat18.y;
        u_xlat70 = (x_1366 * x_1368);
        let x_1371 : f32 = u_xlat18.x;
        let x_1372 : f32 = u_xlat68;
        let x_1374 : f32 = u_xlat70;
        u_xlat68 = ((x_1371 * x_1372) + x_1374);
        let x_1377 : vec2<f32> = u_xlat51;
        let x_1379 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1377.x, x_1377.y, x_1379);
        let x_1386 : vec3<f32> = txVec15;
        let x_1388 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1386.xy, x_1386.z);
        u_xlat70 = x_1388;
        let x_1390 : f32 = u_xlat18.z;
        let x_1391 : f32 = u_xlat70;
        let x_1393 : f32 = u_xlat68;
        u_xlat68 = ((x_1390 * x_1391) + x_1393);
        let x_1396 : vec4<f32> = u_xlat16;
        let x_1397 : vec2<f32> = vec2<f32>(x_1396.x, x_1396.y);
        let x_1399 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1397.x, x_1397.y, x_1399);
        let x_1406 : vec3<f32> = txVec16;
        let x_1408 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1406.xy, x_1406.z);
        u_xlat70 = x_1408;
        let x_1410 : f32 = u_xlat18.w;
        let x_1411 : f32 = u_xlat70;
        let x_1413 : f32 = u_xlat68;
        u_xlat68 = ((x_1410 * x_1411) + x_1413);
        let x_1416 : vec4<f32> = u_xlat14;
        let x_1417 : vec2<f32> = vec2<f32>(x_1416.x, x_1416.y);
        let x_1419 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1417.x, x_1417.y, x_1419);
        let x_1426 : vec3<f32> = txVec17;
        let x_1428 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1426.xy, x_1426.z);
        u_xlat70 = x_1428;
        let x_1430 : f32 = u_xlat19.x;
        let x_1431 : f32 = u_xlat70;
        let x_1433 : f32 = u_xlat68;
        u_xlat68 = ((x_1430 * x_1431) + x_1433);
        let x_1436 : vec4<f32> = u_xlat14;
        let x_1437 : vec2<f32> = vec2<f32>(x_1436.z, x_1436.w);
        let x_1439 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1437.x, x_1437.y, x_1439);
        let x_1446 : vec3<f32> = txVec18;
        let x_1448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1446.xy, x_1446.z);
        u_xlat70 = x_1448;
        let x_1450 : f32 = u_xlat19.y;
        let x_1451 : f32 = u_xlat70;
        let x_1453 : f32 = u_xlat68;
        u_xlat68 = ((x_1450 * x_1451) + x_1453);
        let x_1456 : vec4<f32> = u_xlat15;
        let x_1457 : vec2<f32> = vec2<f32>(x_1456.x, x_1456.y);
        let x_1459 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1457.x, x_1457.y, x_1459);
        let x_1466 : vec3<f32> = txVec19;
        let x_1468 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1466.xy, x_1466.z);
        u_xlat70 = x_1468;
        let x_1470 : f32 = u_xlat19.z;
        let x_1471 : f32 = u_xlat70;
        let x_1473 : f32 = u_xlat68;
        u_xlat68 = ((x_1470 * x_1471) + x_1473);
        let x_1476 : vec4<f32> = u_xlat16;
        let x_1477 : vec2<f32> = vec2<f32>(x_1476.z, x_1476.w);
        let x_1479 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1477.x, x_1477.y, x_1479);
        let x_1486 : vec3<f32> = txVec20;
        let x_1488 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1486.xy, x_1486.z);
        u_xlat70 = x_1488;
        let x_1490 : f32 = u_xlat19.w;
        let x_1491 : f32 = u_xlat70;
        let x_1493 : f32 = u_xlat68;
        u_xlat68 = ((x_1490 * x_1491) + x_1493);
        let x_1496 : vec4<f32> = u_xlat17;
        let x_1497 : vec2<f32> = vec2<f32>(x_1496.x, x_1496.y);
        let x_1499 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1497.x, x_1497.y, x_1499);
        let x_1506 : vec3<f32> = txVec21;
        let x_1508 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1506.xy, x_1506.z);
        u_xlat70 = x_1508;
        let x_1510 : f32 = u_xlat20.x;
        let x_1511 : f32 = u_xlat70;
        let x_1513 : f32 = u_xlat68;
        u_xlat68 = ((x_1510 * x_1511) + x_1513);
        let x_1516 : vec4<f32> = u_xlat17;
        let x_1517 : vec2<f32> = vec2<f32>(x_1516.z, x_1516.w);
        let x_1519 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1517.x, x_1517.y, x_1519);
        let x_1526 : vec3<f32> = txVec22;
        let x_1528 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1526.xy, x_1526.z);
        u_xlat70 = x_1528;
        let x_1530 : f32 = u_xlat20.y;
        let x_1531 : f32 = u_xlat70;
        let x_1533 : f32 = u_xlat68;
        u_xlat68 = ((x_1530 * x_1531) + x_1533);
        let x_1536 : vec2<f32> = u_xlat31;
        let x_1538 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1536.x, x_1536.y, x_1538);
        let x_1545 : vec3<f32> = txVec23;
        let x_1547 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1545.xy, x_1545.z);
        u_xlat70 = x_1547;
        let x_1549 : f32 = u_xlat20.z;
        let x_1550 : f32 = u_xlat70;
        let x_1552 : f32 = u_xlat68;
        u_xlat68 = ((x_1549 * x_1550) + x_1552);
        let x_1555 : vec2<f32> = u_xlat59;
        let x_1557 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1555.x, x_1555.y, x_1557);
        let x_1564 : vec3<f32> = txVec24;
        let x_1566 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1564.xy, x_1564.z);
        u_xlat70 = x_1566;
        let x_1568 : f32 = u_xlat20.w;
        let x_1569 : f32 = u_xlat70;
        let x_1571 : f32 = u_xlat68;
        u_xlat68 = ((x_1568 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat12;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec25;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat70 = x_1586;
        let x_1588 : f32 = u_xlat8.x;
        let x_1589 : f32 = u_xlat70;
        let x_1591 : f32 = u_xlat68;
        u_xlat68 = ((x_1588 * x_1589) + x_1591);
        let x_1594 : vec4<f32> = u_xlat12;
        let x_1595 : vec2<f32> = vec2<f32>(x_1594.z, x_1594.w);
        let x_1597 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1595.x, x_1595.y, x_1597);
        let x_1604 : vec3<f32> = txVec26;
        let x_1606 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1604.xy, x_1604.z);
        u_xlat70 = x_1606;
        let x_1608 : f32 = u_xlat8.y;
        let x_1609 : f32 = u_xlat70;
        let x_1611 : f32 = u_xlat68;
        u_xlat68 = ((x_1608 * x_1609) + x_1611);
        let x_1614 : vec2<f32> = u_xlat54;
        let x_1616 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1614.x, x_1614.y, x_1616);
        let x_1623 : vec3<f32> = txVec27;
        let x_1625 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1623.xy, x_1623.z);
        u_xlat70 = x_1625;
        let x_1627 : f32 = u_xlat8.z;
        let x_1628 : f32 = u_xlat70;
        let x_1630 : f32 = u_xlat68;
        u_xlat68 = ((x_1627 * x_1628) + x_1630);
        let x_1633 : vec4<f32> = u_xlat7;
        let x_1634 : vec2<f32> = vec2<f32>(x_1633.x, x_1633.y);
        let x_1636 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1634.x, x_1634.y, x_1636);
        let x_1643 : vec3<f32> = txVec28;
        let x_1645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1643.xy, x_1643.z);
        u_xlat70 = x_1645;
        let x_1647 : f32 = u_xlat8.w;
        let x_1648 : f32 = u_xlat70;
        let x_1650 : f32 = u_xlat68;
        u_xlat67 = ((x_1647 * x_1648) + x_1650);
      }
    }
  } else {
    let x_1654 : vec4<f32> = u_xlat6;
    let x_1655 : vec2<f32> = vec2<f32>(x_1654.x, x_1654.y);
    let x_1657 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1655.x, x_1655.y, x_1657);
    let x_1664 : vec3<f32> = txVec29;
    let x_1666 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1664.xy, x_1664.z);
    u_xlat67 = x_1666;
  }
  let x_1668 : f32 = x_271.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1668) + 1.0f);
  let x_1671 : f32 = u_xlat67;
  let x_1673 : f32 = x_271.x_MainLightShadowParams.x;
  let x_1675 : f32 = u_xlat68;
  u_xlat67 = ((x_1671 * x_1673) + x_1675);
  let x_1679 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1679);
  let x_1683 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1683 >= 1.0f);
  let x_1685 : bool = u_xlatb70;
  let x_1686 : bool = u_xlatb72;
  u_xlatb70 = (x_1685 | x_1686);
  let x_1688 : bool = u_xlatb70;
  let x_1689 : f32 = u_xlat67;
  u_xlat67 = select(x_1689, 1.0f, x_1688);
  let x_1691 : vec3<f32> = u_xlat0;
  let x_1693 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1691, -(vec3<f32>(x_1693.x, x_1693.y, x_1693.z)));
  let x_1699 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1699, 0.0f, 1.0f);
  let x_1702 : f32 = u_xlat67;
  let x_1705 : vec4<f32> = x_90.x_MainLightColor;
  let x_1707 : vec3<f32> = (vec3<f32>(x_1702, x_1702, x_1702) * vec3<f32>(x_1705.x, x_1705.y, x_1705.z));
  let x_1708 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1707.x, x_1707.y, x_1707.z, x_1708.w);
  let x_1710 : vec3<f32> = u_xlat0;
  let x_1712 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1710.x, x_1710.x, x_1710.x) * vec3<f32>(x_1712.x, x_1712.y, x_1712.z));
  let x_1715 : vec3<f32> = u_xlat0;
  let x_1716 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1715 * vec3<f32>(x_1716.x, x_1716.y, x_1716.z));
  let x_1720 : f32 = x_161.unity_LODFade.x;
  u_xlatb67 = (x_1720 < 0.0f);
  let x_1723 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1723 + 1.0f);
  let x_1726 : bool = u_xlatb67;
  if (x_1726) {
    let x_1731 : f32 = u_xlat3.x;
    x_1727 = x_1731;
  } else {
    let x_1734 : f32 = x_161.unity_LODFade.x;
    x_1727 = x_1734;
  }
  let x_1735 : f32 = x_1727;
  u_xlat67 = x_1735;
  let x_1737 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1737);
  let x_1739 : vec3<f32> = u_xlat1;
  let x_1743 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1739) * vec3<f32>(x_1743.x, x_1743.y, x_1743.x));
  let x_1749 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1749);
  let x_1753 : u32 = u_xlatu1.z;
  u_xlatu45 = (x_1753 * 1025u);
  let x_1757 : u32 = u_xlatu45;
  u_xlatu25 = (x_1757 >> 6u);
  let x_1761 : u32 = u_xlatu45;
  let x_1762 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1761 ^ x_1762));
  let x_1765 : i32 = u_xlati45;
  u_xlatu45 = (bitcast<u32>(x_1765) * 9u);
  let x_1769 : u32 = u_xlatu45;
  u_xlatu25 = (x_1769 >> 11u);
  let x_1772 : u32 = u_xlatu45;
  let x_1773 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1772 ^ x_1773));
  let x_1776 : i32 = u_xlati45;
  u_xlati45 = (x_1776 * 32769i);
  let x_1780 : i32 = u_xlati45;
  let x_1783 : u32 = u_xlatu1.y;
  u_xlati23 = bitcast<i32>((bitcast<u32>(x_1780) ^ x_1783));
  let x_1787 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1787) * 1025u);
  let x_1790 : u32 = u_xlatu23;
  u_xlatu45 = (x_1790 >> 6u);
  let x_1792 : u32 = u_xlatu45;
  let x_1793 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1792 ^ x_1793));
  let x_1796 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1796) * 9u);
  let x_1799 : u32 = u_xlatu23;
  u_xlatu45 = (x_1799 >> 11u);
  let x_1801 : u32 = u_xlatu45;
  let x_1802 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1801 ^ x_1802));
  let x_1805 : i32 = u_xlati23;
  u_xlati23 = (x_1805 * 32769i);
  let x_1808 : i32 = u_xlati23;
  let x_1811 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1808) ^ x_1811));
  let x_1814 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1814) * 1025u);
  let x_1819 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1819 >> 6u);
  let x_1821 : u32 = u_xlatu23;
  let x_1823 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1821 ^ x_1823));
  let x_1826 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1826) * 9u);
  let x_1831 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1831 >> 11u);
  let x_1833 : u32 = u_xlatu23;
  let x_1835 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1833 ^ x_1835));
  let x_1838 : i32 = u_xlati1;
  u_xlati1 = (x_1838 * 32769i);
  param = 1065353216i;
  let x_1844 : i32 = u_xlati1;
  param_1 = x_1844;
  param_2 = 0i;
  param_3 = 23i;
  let x_1847 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1847);
  let x_1851 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1851 + -1.0f);
  let x_1856 : f32 = u_xlat1.x;
  u_xlat23 = (-(x_1856) + 1.0f);
  let x_1859 : bool = u_xlatb3;
  if (x_1859) {
    let x_1864 : f32 = u_xlat1.x;
    x_1860 = x_1864;
  } else {
    let x_1866 : f32 = u_xlat23;
    x_1860 = x_1866;
  }
  let x_1867 : f32 = x_1860;
  u_xlat1.x = x_1867;
  let x_1869 : f32 = u_xlat67;
  let x_1872 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1869 * 2.0f) + -(x_1872));
  let x_1877 : f32 = u_xlat1.x;
  let x_1879 : f32 = u_xlat3.w;
  u_xlat23 = (x_1877 * x_1879);
  let x_1884 : f32 = u_xlat23;
  u_xlatb45.x = (x_1884 >= 0.400000006f);
  let x_1890 : bool = u_xlatb45.x;
  let x_1891 : f32 = u_xlat23;
  u_xlat45.x = select(0.0f, x_1891, x_1890);
  let x_1895 : f32 = u_xlat3.w;
  let x_1897 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1895 * x_1897) + -0.400000006f);
  let x_1902 : f32 = u_xlat23;
  u_xlat67 = dpdxCoarse(x_1902);
  let x_1904 : f32 = u_xlat23;
  u_xlat23 = dpdyCoarse(x_1904);
  let x_1906 : f32 = u_xlat23;
  let x_1908 : f32 = u_xlat67;
  u_xlat23 = (abs(x_1906) + abs(x_1908));
  let x_1911 : f32 = u_xlat23;
  u_xlat23 = max(x_1911, 0.0001f);
  let x_1915 : f32 = u_xlat1.x;
  let x_1916 : f32 = u_xlat23;
  u_xlat1.x = (x_1915 / x_1916);
  let x_1920 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1920 + 0.5f);
  let x_1924 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1924, 0.0f, 1.0f);
  let x_1929 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb23 = !((x_1929 == 0.0f));
  let x_1931 : bool = u_xlatb23;
  if (x_1931) {
    let x_1936 : f32 = u_xlat1.x;
    x_1932 = x_1936;
  } else {
    let x_1939 : f32 = u_xlat45.x;
    x_1932 = x_1939;
  }
  let x_1940 : f32 = x_1932;
  u_xlat1.x = x_1940;
  let x_1943 : f32 = u_xlat1.x;
  u_xlat45.x = (x_1943 + -0.0001f);
  let x_1948 : f32 = u_xlat45.x;
  u_xlatb45.x = (x_1948 < 0.0f);
  let x_1952 : bool = u_xlatb45.x;
  if (((select(0i, 1i, x_1952) * -1i) != 0i)) {
    discard;
  }
  let x_1962 : f32 = vs_INTERP2.w;
  u_xlatb45.x = (0.0f < x_1962);
  let x_1966 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb45.y = (x_1966 >= 0.0f);
  let x_1970 : bool = u_xlatb45.x;
  u_xlat45.x = select(-1.0f, 1.0f, x_1970);
  let x_1974 : bool = u_xlatb45.y;
  u_xlat45.y = select(-1.0f, 1.0f, x_1974);
  let x_1978 : f32 = u_xlat45.y;
  let x_1980 : f32 = u_xlat45.x;
  u_xlat45.x = (x_1978 * x_1980);
  let x_1983 : vec3<f32> = vs_INTERP1;
  let x_1985 : vec4<f32> = vs_INTERP2;
  let x_1987 : vec3<f32> = (vec3<f32>(x_1983.z, x_1983.x, x_1983.y) * vec3<f32>(x_1985.y, x_1985.z, x_1985.x));
  let x_1988 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1987.x, x_1987.y, x_1987.z, x_1988.w);
  let x_1990 : vec3<f32> = vs_INTERP1;
  let x_1992 : vec4<f32> = vs_INTERP2;
  let x_1995 : vec4<f32> = u_xlat3;
  let x_1998 : vec3<f32> = ((vec3<f32>(x_1990.y, x_1990.z, x_1990.x) * vec3<f32>(x_1992.z, x_1992.x, x_1992.y)) + -(vec3<f32>(x_1995.x, x_1995.y, x_1995.z)));
  let x_1999 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1998.x, x_1998.y, x_1998.z, x_1999.w);
  let x_2001 : vec2<f32> = u_xlat45;
  let x_2003 : vec4<f32> = u_xlat3;
  let x_2005 : vec3<f32> = (vec3<f32>(x_2001.x, x_2001.x, x_2001.x) * vec3<f32>(x_2003.x, x_2003.y, x_2003.z));
  let x_2006 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2005.x, x_2005.y, x_2005.z, x_2006.w);
  let x_2008 : vec4<f32> = u_xlat3;
  let x_2010 : vec3<f32> = u_xlat27;
  let x_2012 : vec3<f32> = (vec3<f32>(x_2008.x, x_2008.y, x_2008.z) * vec3<f32>(x_2010.y, x_2010.y, x_2010.y));
  let x_2013 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2012.x, x_2012.y, x_2012.z, x_2013.w);
  let x_2015 : vec3<f32> = u_xlat27;
  let x_2017 : vec4<f32> = vs_INTERP2;
  let x_2020 : vec4<f32> = u_xlat3;
  let x_2022 : vec3<f32> = ((vec3<f32>(x_2015.x, x_2015.x, x_2015.x) * vec3<f32>(x_2017.x, x_2017.y, x_2017.z)) + vec3<f32>(x_2020.x, x_2020.y, x_2020.z));
  let x_2023 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2022.x, x_2022.y, x_2022.z, x_2023.w);
  let x_2025 : vec3<f32> = u_xlat27;
  let x_2027 : vec3<f32> = vs_INTERP1;
  let x_2029 : vec4<f32> = u_xlat3;
  let x_2031 : vec3<f32> = ((vec3<f32>(x_2025.z, x_2025.z, x_2025.z) * x_2027) + vec3<f32>(x_2029.x, x_2029.y, x_2029.z));
  let x_2032 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2031.x, x_2031.y, x_2031.z, x_2032.w);
  let x_2034 : vec4<f32> = u_xlat3;
  let x_2036 : vec4<f32> = u_xlat3;
  u_xlat45.x = dot(vec3<f32>(x_2034.x, x_2034.y, x_2034.z), vec3<f32>(x_2036.x, x_2036.y, x_2036.z));
  let x_2041 : f32 = u_xlat45.x;
  u_xlat45.x = inverseSqrt(x_2041);
  let x_2044 : vec2<f32> = u_xlat45;
  let x_2046 : vec4<f32> = u_xlat3;
  let x_2048 : vec3<f32> = (vec3<f32>(x_2044.x, x_2044.x, x_2044.x) * vec3<f32>(x_2046.x, x_2046.y, x_2046.z));
  let x_2049 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2048.x, x_2048.y, x_2048.z, x_2049.w);
  let x_2058 : vec2<f32> = vs_INTERP5;
  let x_2060 : f32 = x_90.x_GlobalMipBias.x;
  let x_2061 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_2058, x_2060);
  u_xlat7 = x_2061;
  let x_2066 : vec2<f32> = vs_INTERP5;
  let x_2068 : f32 = x_90.x_GlobalMipBias.x;
  let x_2069 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2066, x_2068);
  u_xlat27 = vec3<f32>(x_2069.x, x_2069.y, x_2069.z);
  let x_2071 : vec4<f32> = u_xlat7;
  let x_2074 : vec3<f32> = (vec3<f32>(x_2071.x, x_2071.y, x_2071.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_2075 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2074.x, x_2074.y, x_2074.z, x_2075.w);
  let x_2077 : vec4<f32> = u_xlat3;
  let x_2079 : vec4<f32> = u_xlat7;
  u_xlat45.x = dot(vec3<f32>(x_2077.x, x_2077.y, x_2077.z), vec3<f32>(x_2079.x, x_2079.y, x_2079.z));
  let x_2084 : f32 = u_xlat45.x;
  u_xlat45.x = (x_2084 + 0.5f);
  let x_2087 : vec2<f32> = u_xlat45;
  let x_2089 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_2087.x, x_2087.x, x_2087.x) * x_2089);
  let x_2092 : f32 = u_xlat7.w;
  u_xlat45.x = max(x_2092, 0.0001f);
  let x_2095 : vec3<f32> = u_xlat27;
  let x_2096 : vec2<f32> = u_xlat45;
  u_xlat27 = (x_2095 / vec3<f32>(x_2096.x, x_2096.x, x_2096.x));
  let x_2100 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2101 : vec2<f32> = vec2<f32>(x_2100.x, x_2100.y);
  u_xlat45 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2101.x, x_2101.y));
  let x_2106 : vec2<f32> = u_xlat45;
  let x_2107 : vec4<f32> = hlslcc_FragCoord;
  let x_2109 : vec2<f32> = (x_2106 * vec2<f32>(x_2107.x, x_2107.y));
  let x_2110 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2109.x, x_2109.y, x_2110.z, x_2110.w);
  let x_2113 : f32 = u_xlat7.y;
  let x_2116 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2119 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat45.x = ((x_2113 * x_2116) + x_2119);
  let x_2123 : f32 = u_xlat45.x;
  u_xlat7.z = (-(x_2123) + 1.0f);
  let x_2128 : f32 = u_xlat5.x;
  u_xlat5.x = x_2128;
  let x_2131 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2131, 0.0f, 1.0f);
  let x_2135 : f32 = u_xlat1.x;
  u_xlat1.x = x_2135;
  let x_2138 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2138, 0.0f, 1.0f);
  let x_2141 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2141 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2146 : f32 = u_xlat5.x;
  u_xlat45.x = (-(x_2146) + 1.0f);
  let x_2151 : f32 = u_xlat45.x;
  let x_2153 : f32 = u_xlat45.x;
  u_xlat67 = (x_2151 * x_2153);
  let x_2155 : f32 = u_xlat67;
  u_xlat67 = max(x_2155, 0.0078125f);
  let x_2159 : f32 = u_xlat67;
  let x_2160 : f32 = u_xlat67;
  u_xlat69 = (x_2159 * x_2160);
  let x_2163 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2163 + 0.040000021f);
  let x_2168 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2168, 1.0f);
  let x_2171 : f32 = u_xlat67;
  u_xlat72 = ((x_2171 * 4.0f) + 2.0f);
  let x_2179 : vec4<f32> = u_xlat7;
  let x_2182 : f32 = x_90.x_GlobalMipBias.x;
  let x_2183 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2179.x, x_2179.z), x_2182);
  u_xlat7.x = x_2183.x;
  let x_2188 : f32 = u_xlat7.x;
  u_xlat29 = (x_2188 + -1.0f);
  let x_2191 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2192 : f32 = u_xlat29;
  u_xlat29 = ((x_2191 * x_2192) + 1.0f);
  let x_2196 : f32 = u_xlat7.x;
  let x_2198 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2196, x_2198);
  let x_2201 : bool = u_xlatb66;
  if (x_2201) {
    let x_2205 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2205 == 1.0f);
    let x_2207 : bool = u_xlatb66;
    if (x_2207) {
      let x_2210 : vec4<f32> = u_xlat6;
      let x_2213 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2210.x, x_2210.y, x_2210.x, x_2210.y) + x_2213);
      let x_2216 : vec4<f32> = u_xlat8;
      let x_2217 : vec2<f32> = vec2<f32>(x_2216.x, x_2216.y);
      let x_2219 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2217.x, x_2217.y, x_2219);
      let x_2226 : vec3<f32> = txVec30;
      let x_2228 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2226.xy, x_2226.z);
      u_xlat9.x = x_2228;
      let x_2231 : vec4<f32> = u_xlat8;
      let x_2232 : vec2<f32> = vec2<f32>(x_2231.z, x_2231.w);
      let x_2234 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2232.x, x_2232.y, x_2234);
      let x_2241 : vec3<f32> = txVec31;
      let x_2243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2241.xy, x_2241.z);
      u_xlat9.y = x_2243;
      let x_2245 : vec4<f32> = u_xlat6;
      let x_2248 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2245.x, x_2245.y, x_2245.x, x_2245.y) + x_2248);
      let x_2251 : vec4<f32> = u_xlat8;
      let x_2252 : vec2<f32> = vec2<f32>(x_2251.x, x_2251.y);
      let x_2254 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2252.x, x_2252.y, x_2254);
      let x_2261 : vec3<f32> = txVec32;
      let x_2263 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2261.xy, x_2261.z);
      u_xlat9.z = x_2263;
      let x_2266 : vec4<f32> = u_xlat8;
      let x_2267 : vec2<f32> = vec2<f32>(x_2266.z, x_2266.w);
      let x_2269 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2267.x, x_2267.y, x_2269);
      let x_2276 : vec3<f32> = txVec33;
      let x_2278 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2276.xy, x_2276.z);
      u_xlat9.w = x_2278;
      let x_2280 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2280, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2285 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb51 = (x_2285 == 2.0f);
      let x_2287 : bool = u_xlatb51;
      if (x_2287) {
        let x_2290 : vec4<f32> = u_xlat6;
        let x_2293 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2290.x, x_2290.y) * vec2<f32>(x_2293.z, x_2293.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2297 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2297);
        let x_2299 : vec4<f32> = u_xlat6;
        let x_2302 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2305 : vec2<f32> = u_xlat51;
        let x_2307 : vec2<f32> = ((vec2<f32>(x_2299.x, x_2299.y) * vec2<f32>(x_2302.z, x_2302.w)) + -(x_2305));
        let x_2308 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2307.x, x_2307.y, x_2308.z, x_2308.w);
        let x_2310 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2310.x, x_2310.x, x_2310.y, x_2310.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2313 : vec4<f32> = u_xlat9;
        let x_2315 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2313.x, x_2313.x, x_2313.z, x_2313.z) * vec4<f32>(x_2315.x, x_2315.x, x_2315.z, x_2315.z));
        let x_2319 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2319.y, x_2319.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2322 : vec4<f32> = u_xlat10;
        let x_2325 : vec4<f32> = u_xlat8;
        let x_2328 : vec2<f32> = ((vec2<f32>(x_2322.x, x_2322.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2325.x, x_2325.y)));
        let x_2329 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2328.x, x_2329.y, x_2328.y, x_2329.w);
        let x_2331 : vec4<f32> = u_xlat8;
        let x_2334 : vec2<f32> = (-(vec2<f32>(x_2331.x, x_2331.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2335 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2334.x, x_2334.y, x_2335.z, x_2335.w);
        let x_2337 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2337.x, x_2337.y), vec2<f32>(0.0f, 0.0f));
        let x_2340 : vec2<f32> = u_xlat54;
        let x_2342 : vec2<f32> = u_xlat54;
        let x_2344 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2340) * x_2342) + vec2<f32>(x_2344.x, x_2344.y));
        let x_2347 : vec4<f32> = u_xlat8;
        let x_2349 : vec2<f32> = max(vec2<f32>(x_2347.x, x_2347.y), vec2<f32>(0.0f, 0.0f));
        let x_2350 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2349.x, x_2349.y, x_2350.z, x_2350.w);
        let x_2352 : vec4<f32> = u_xlat8;
        let x_2355 : vec4<f32> = u_xlat8;
        let x_2358 : vec4<f32> = u_xlat9;
        let x_2360 : vec2<f32> = ((-(vec2<f32>(x_2352.x, x_2352.y)) * vec2<f32>(x_2355.x, x_2355.y)) + vec2<f32>(x_2358.y, x_2358.w));
        let x_2361 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2360.x, x_2360.y, x_2361.z, x_2361.w);
        let x_2363 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2363 + vec2<f32>(1.0f, 1.0f));
        let x_2365 : vec4<f32> = u_xlat8;
        let x_2367 : vec2<f32> = (vec2<f32>(x_2365.x, x_2365.y) + vec2<f32>(1.0f, 1.0f));
        let x_2368 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2367.x, x_2367.y, x_2368.z, x_2368.w);
        let x_2370 : vec4<f32> = u_xlat9;
        let x_2372 : vec2<f32> = (vec2<f32>(x_2370.x, x_2370.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2373 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2372.x, x_2372.y, x_2373.z, x_2373.w);
        let x_2375 : vec4<f32> = u_xlat10;
        let x_2377 : vec2<f32> = (vec2<f32>(x_2375.x, x_2375.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2378 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2377.x, x_2377.y, x_2378.z, x_2378.w);
        let x_2380 : vec2<f32> = u_xlat54;
        let x_2381 : vec2<f32> = (x_2380 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2382 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2381.x, x_2381.y, x_2382.z, x_2382.w);
        let x_2384 : vec4<f32> = u_xlat8;
        let x_2386 : vec2<f32> = (vec2<f32>(x_2384.x, x_2384.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2387 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2386.x, x_2386.y, x_2387.z, x_2387.w);
        let x_2389 : vec4<f32> = u_xlat9;
        let x_2391 : vec2<f32> = (vec2<f32>(x_2389.y, x_2389.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2392 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2391.x, x_2391.y, x_2392.z, x_2392.w);
        let x_2395 : f32 = u_xlat10.x;
        u_xlat11.z = x_2395;
        let x_2398 : f32 = u_xlat8.x;
        u_xlat11.w = x_2398;
        let x_2401 : f32 = u_xlat13.x;
        u_xlat12.z = x_2401;
        let x_2404 : f32 = u_xlat52.x;
        u_xlat12.w = x_2404;
        let x_2406 : vec4<f32> = u_xlat11;
        let x_2408 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2406.z, x_2406.w, x_2406.x, x_2406.z) + vec4<f32>(x_2408.z, x_2408.w, x_2408.x, x_2408.z));
        let x_2412 : f32 = u_xlat11.y;
        u_xlat10.z = x_2412;
        let x_2415 : f32 = u_xlat8.y;
        u_xlat10.w = x_2415;
        let x_2418 : f32 = u_xlat12.y;
        u_xlat13.z = x_2418;
        let x_2421 : f32 = u_xlat52.y;
        u_xlat13.w = x_2421;
        let x_2423 : vec4<f32> = u_xlat10;
        let x_2425 : vec4<f32> = u_xlat13;
        let x_2427 : vec3<f32> = (vec3<f32>(x_2423.z, x_2423.y, x_2423.w) + vec3<f32>(x_2425.z, x_2425.y, x_2425.w));
        let x_2428 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2427.x, x_2427.y, x_2427.z, x_2428.w);
        let x_2430 : vec4<f32> = u_xlat12;
        let x_2432 : vec4<f32> = u_xlat9;
        let x_2434 : vec3<f32> = (vec3<f32>(x_2430.x, x_2430.z, x_2430.w) / vec3<f32>(x_2432.z, x_2432.w, x_2432.y));
        let x_2435 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2434.x, x_2434.y, x_2434.z, x_2435.w);
        let x_2437 : vec4<f32> = u_xlat10;
        let x_2439 : vec3<f32> = (vec3<f32>(x_2437.x, x_2437.y, x_2437.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2440 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2439.x, x_2439.y, x_2439.z, x_2440.w);
        let x_2442 : vec4<f32> = u_xlat13;
        let x_2444 : vec4<f32> = u_xlat8;
        let x_2446 : vec3<f32> = (vec3<f32>(x_2442.z, x_2442.y, x_2442.w) / vec3<f32>(x_2444.x, x_2444.y, x_2444.z));
        let x_2447 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2446.x, x_2446.y, x_2446.z, x_2447.w);
        let x_2449 : vec4<f32> = u_xlat11;
        let x_2451 : vec3<f32> = (vec3<f32>(x_2449.x, x_2449.y, x_2449.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2452 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2451.x, x_2451.y, x_2451.z, x_2452.w);
        let x_2454 : vec4<f32> = u_xlat10;
        let x_2457 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2459 : vec3<f32> = (vec3<f32>(x_2454.y, x_2454.x, x_2454.z) * vec3<f32>(x_2457.x, x_2457.x, x_2457.x));
        let x_2460 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2459.x, x_2459.y, x_2459.z, x_2460.w);
        let x_2462 : vec4<f32> = u_xlat11;
        let x_2465 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2467 : vec3<f32> = (vec3<f32>(x_2462.x, x_2462.y, x_2462.z) * vec3<f32>(x_2465.y, x_2465.y, x_2465.y));
        let x_2468 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2467.x, x_2467.y, x_2467.z, x_2468.w);
        let x_2471 : f32 = u_xlat11.x;
        u_xlat10.w = x_2471;
        let x_2473 : vec2<f32> = u_xlat51;
        let x_2476 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2479 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2473.x, x_2473.y, x_2473.x, x_2473.y) * vec4<f32>(x_2476.x, x_2476.y, x_2476.x, x_2476.y)) + vec4<f32>(x_2479.y, x_2479.w, x_2479.x, x_2479.w));
        let x_2482 : vec2<f32> = u_xlat51;
        let x_2484 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2487 : vec4<f32> = u_xlat10;
        let x_2489 : vec2<f32> = ((x_2482 * vec2<f32>(x_2484.x, x_2484.y)) + vec2<f32>(x_2487.z, x_2487.w));
        let x_2490 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2489.x, x_2489.y, x_2490.z, x_2490.w);
        let x_2493 : f32 = u_xlat10.y;
        u_xlat11.w = x_2493;
        let x_2495 : vec4<f32> = u_xlat11;
        let x_2496 : vec2<f32> = vec2<f32>(x_2495.y, x_2495.z);
        let x_2497 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2497.x, x_2496.x, x_2497.z, x_2496.y);
        let x_2499 : vec2<f32> = u_xlat51;
        let x_2502 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2505 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2499.x, x_2499.y, x_2499.x, x_2499.y) * vec4<f32>(x_2502.x, x_2502.y, x_2502.x, x_2502.y)) + vec4<f32>(x_2505.x, x_2505.y, x_2505.z, x_2505.y));
        let x_2508 : vec2<f32> = u_xlat51;
        let x_2511 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2514 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2508.x, x_2508.y, x_2508.x, x_2508.y) * vec4<f32>(x_2511.x, x_2511.y, x_2511.x, x_2511.y)) + vec4<f32>(x_2514.w, x_2514.y, x_2514.w, x_2514.z));
        let x_2517 : vec2<f32> = u_xlat51;
        let x_2520 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2523 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2517.x, x_2517.y, x_2517.x, x_2517.y) * vec4<f32>(x_2520.x, x_2520.y, x_2520.x, x_2520.y)) + vec4<f32>(x_2523.x, x_2523.w, x_2523.z, x_2523.w));
        let x_2526 : vec4<f32> = u_xlat8;
        let x_2528 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2526.x, x_2526.x, x_2526.x, x_2526.y) * vec4<f32>(x_2528.z, x_2528.w, x_2528.y, x_2528.z));
        let x_2531 : vec4<f32> = u_xlat8;
        let x_2533 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2531.y, x_2531.y, x_2531.z, x_2531.z) * x_2533);
        let x_2536 : f32 = u_xlat8.z;
        let x_2538 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2536 * x_2538);
        let x_2542 : vec4<f32> = u_xlat12;
        let x_2543 : vec2<f32> = vec2<f32>(x_2542.x, x_2542.y);
        let x_2545 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2543.x, x_2543.y, x_2545);
        let x_2553 : vec3<f32> = txVec34;
        let x_2555 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2553.xy, x_2553.z);
        u_xlat73 = x_2555;
        let x_2557 : vec4<f32> = u_xlat12;
        let x_2558 : vec2<f32> = vec2<f32>(x_2557.z, x_2557.w);
        let x_2560 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2558.x, x_2558.y, x_2560);
        let x_2567 : vec3<f32> = txVec35;
        let x_2569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2567.xy, x_2567.z);
        u_xlat8.x = x_2569;
        let x_2572 : f32 = u_xlat8.x;
        let x_2574 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2572 * x_2574);
        let x_2578 : f32 = u_xlat15.x;
        let x_2579 : f32 = u_xlat73;
        let x_2582 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2578 * x_2579) + x_2582);
        let x_2585 : vec4<f32> = u_xlat13;
        let x_2586 : vec2<f32> = vec2<f32>(x_2585.x, x_2585.y);
        let x_2588 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2586.x, x_2586.y, x_2588);
        let x_2595 : vec3<f32> = txVec36;
        let x_2597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2595.xy, x_2595.z);
        u_xlat8.x = x_2597;
        let x_2600 : f32 = u_xlat15.z;
        let x_2602 : f32 = u_xlat8.x;
        let x_2604 : f32 = u_xlat73;
        u_xlat73 = ((x_2600 * x_2602) + x_2604);
        let x_2607 : vec4<f32> = u_xlat11;
        let x_2608 : vec2<f32> = vec2<f32>(x_2607.x, x_2607.y);
        let x_2610 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2608.x, x_2608.y, x_2610);
        let x_2617 : vec3<f32> = txVec37;
        let x_2619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2617.xy, x_2617.z);
        u_xlat8.x = x_2619;
        let x_2622 : f32 = u_xlat15.w;
        let x_2624 : f32 = u_xlat8.x;
        let x_2626 : f32 = u_xlat73;
        u_xlat73 = ((x_2622 * x_2624) + x_2626);
        let x_2629 : vec4<f32> = u_xlat14;
        let x_2630 : vec2<f32> = vec2<f32>(x_2629.x, x_2629.y);
        let x_2632 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2630.x, x_2630.y, x_2632);
        let x_2639 : vec3<f32> = txVec38;
        let x_2641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2639.xy, x_2639.z);
        u_xlat8.x = x_2641;
        let x_2644 : f32 = u_xlat16.x;
        let x_2646 : f32 = u_xlat8.x;
        let x_2648 : f32 = u_xlat73;
        u_xlat73 = ((x_2644 * x_2646) + x_2648);
        let x_2651 : vec4<f32> = u_xlat14;
        let x_2652 : vec2<f32> = vec2<f32>(x_2651.z, x_2651.w);
        let x_2654 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2652.x, x_2652.y, x_2654);
        let x_2661 : vec3<f32> = txVec39;
        let x_2663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2661.xy, x_2661.z);
        u_xlat8.x = x_2663;
        let x_2666 : f32 = u_xlat16.y;
        let x_2668 : f32 = u_xlat8.x;
        let x_2670 : f32 = u_xlat73;
        u_xlat73 = ((x_2666 * x_2668) + x_2670);
        let x_2673 : vec4<f32> = u_xlat11;
        let x_2674 : vec2<f32> = vec2<f32>(x_2673.z, x_2673.w);
        let x_2676 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2674.x, x_2674.y, x_2676);
        let x_2683 : vec3<f32> = txVec40;
        let x_2685 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2683.xy, x_2683.z);
        u_xlat8.x = x_2685;
        let x_2688 : f32 = u_xlat16.z;
        let x_2690 : f32 = u_xlat8.x;
        let x_2692 : f32 = u_xlat73;
        u_xlat73 = ((x_2688 * x_2690) + x_2692);
        let x_2695 : vec4<f32> = u_xlat10;
        let x_2696 : vec2<f32> = vec2<f32>(x_2695.x, x_2695.y);
        let x_2698 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2696.x, x_2696.y, x_2698);
        let x_2705 : vec3<f32> = txVec41;
        let x_2707 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2705.xy, x_2705.z);
        u_xlat8.x = x_2707;
        let x_2710 : f32 = u_xlat16.w;
        let x_2712 : f32 = u_xlat8.x;
        let x_2714 : f32 = u_xlat73;
        u_xlat73 = ((x_2710 * x_2712) + x_2714);
        let x_2717 : vec4<f32> = u_xlat10;
        let x_2718 : vec2<f32> = vec2<f32>(x_2717.z, x_2717.w);
        let x_2720 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2718.x, x_2718.y, x_2720);
        let x_2727 : vec3<f32> = txVec42;
        let x_2729 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2727.xy, x_2727.z);
        u_xlat8.x = x_2729;
        let x_2732 : f32 = u_xlat51.x;
        let x_2734 : f32 = u_xlat8.x;
        let x_2736 : f32 = u_xlat73;
        u_xlat66 = ((x_2732 * x_2734) + x_2736);
      } else {
        let x_2739 : vec4<f32> = u_xlat6;
        let x_2742 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2739.x, x_2739.y) * vec2<f32>(x_2742.z, x_2742.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2746 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2746);
        let x_2748 : vec4<f32> = u_xlat6;
        let x_2751 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2754 : vec2<f32> = u_xlat51;
        let x_2756 : vec2<f32> = ((vec2<f32>(x_2748.x, x_2748.y) * vec2<f32>(x_2751.z, x_2751.w)) + -(x_2754));
        let x_2757 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2756.x, x_2756.y, x_2757.z, x_2757.w);
        let x_2759 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2759.x, x_2759.x, x_2759.y, x_2759.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2762 : vec4<f32> = u_xlat9;
        let x_2764 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2762.x, x_2762.x, x_2762.z, x_2762.z) * vec4<f32>(x_2764.x, x_2764.x, x_2764.z, x_2764.z));
        let x_2767 : vec4<f32> = u_xlat10;
        let x_2769 : vec2<f32> = (vec2<f32>(x_2767.y, x_2767.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2770 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2770.x, x_2769.x, x_2770.z, x_2769.y);
        let x_2772 : vec4<f32> = u_xlat10;
        let x_2775 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2772.x, x_2772.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2775.x, x_2775.y)));
        let x_2779 : vec4<f32> = u_xlat8;
        let x_2782 : vec2<f32> = (-(vec2<f32>(x_2779.x, x_2779.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2783 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2782.x, x_2783.y, x_2782.y, x_2783.w);
        let x_2785 : vec4<f32> = u_xlat8;
        let x_2787 : vec2<f32> = min(vec2<f32>(x_2785.x, x_2785.y), vec2<f32>(0.0f, 0.0f));
        let x_2788 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2787.x, x_2787.y, x_2788.z, x_2788.w);
        let x_2790 : vec4<f32> = u_xlat10;
        let x_2793 : vec4<f32> = u_xlat10;
        let x_2796 : vec4<f32> = u_xlat9;
        let x_2798 : vec2<f32> = ((-(vec2<f32>(x_2790.x, x_2790.y)) * vec2<f32>(x_2793.x, x_2793.y)) + vec2<f32>(x_2796.x, x_2796.z));
        let x_2799 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2798.x, x_2799.y, x_2798.y, x_2799.w);
        let x_2801 : vec4<f32> = u_xlat8;
        let x_2803 : vec2<f32> = max(vec2<f32>(x_2801.x, x_2801.y), vec2<f32>(0.0f, 0.0f));
        let x_2804 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2803.x, x_2803.y, x_2804.z, x_2804.w);
        let x_2806 : vec4<f32> = u_xlat10;
        let x_2809 : vec4<f32> = u_xlat10;
        let x_2812 : vec4<f32> = u_xlat9;
        let x_2814 : vec2<f32> = ((-(vec2<f32>(x_2806.x, x_2806.y)) * vec2<f32>(x_2809.x, x_2809.y)) + vec2<f32>(x_2812.y, x_2812.w));
        let x_2815 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2815.x, x_2814.x, x_2815.z, x_2814.y);
        let x_2817 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2817 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2820 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2820 * 0.081632003f);
        let x_2823 : vec2<f32> = u_xlat52;
        let x_2825 : vec2<f32> = (vec2<f32>(x_2823.y, x_2823.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2826 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2825.x, x_2825.y, x_2826.z, x_2826.w);
        let x_2828 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2828.x, x_2828.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2832 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2832 * 0.081632003f);
        let x_2836 : f32 = u_xlat12.y;
        u_xlat10.x = x_2836;
        let x_2838 : vec4<f32> = u_xlat8;
        let x_2841 : vec2<f32> = ((vec2<f32>(x_2838.x, x_2838.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2842 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2842.x, x_2841.x, x_2842.z, x_2841.y);
        let x_2844 : vec4<f32> = u_xlat8;
        let x_2847 : vec2<f32> = ((vec2<f32>(x_2844.x, x_2844.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2848 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2847.x, x_2848.y, x_2847.y, x_2848.w);
        let x_2851 : f32 = u_xlat52.x;
        u_xlat9.y = x_2851;
        let x_2854 : f32 = u_xlat11.y;
        u_xlat9.w = x_2854;
        let x_2856 : vec4<f32> = u_xlat9;
        let x_2857 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2856 + x_2857);
        let x_2859 : vec4<f32> = u_xlat8;
        let x_2862 : vec2<f32> = ((vec2<f32>(x_2859.y, x_2859.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2863 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2863.x, x_2862.x, x_2863.z, x_2862.y);
        let x_2865 : vec4<f32> = u_xlat8;
        let x_2868 : vec2<f32> = ((vec2<f32>(x_2865.y, x_2865.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2869 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2868.x, x_2869.y, x_2868.y, x_2869.w);
        let x_2872 : f32 = u_xlat52.y;
        u_xlat11.y = x_2872;
        let x_2874 : vec4<f32> = u_xlat11;
        let x_2875 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2874 + x_2875);
        let x_2877 : vec4<f32> = u_xlat9;
        let x_2878 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2877 / x_2878);
        let x_2880 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2880 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2882 : vec4<f32> = u_xlat11;
        let x_2883 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2882 / x_2883);
        let x_2885 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2885 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2887 : vec4<f32> = u_xlat9;
        let x_2890 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2887.w, x_2887.x, x_2887.y, x_2887.z) * vec4<f32>(x_2890.x, x_2890.x, x_2890.x, x_2890.x));
        let x_2893 : vec4<f32> = u_xlat11;
        let x_2896 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2893.x, x_2893.w, x_2893.y, x_2893.z) * vec4<f32>(x_2896.y, x_2896.y, x_2896.y, x_2896.y));
        let x_2899 : vec4<f32> = u_xlat9;
        let x_2900 : vec3<f32> = vec3<f32>(x_2899.y, x_2899.z, x_2899.w);
        let x_2901 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2900.x, x_2901.y, x_2900.y, x_2900.z);
        let x_2904 : f32 = u_xlat11.x;
        u_xlat12.y = x_2904;
        let x_2906 : vec2<f32> = u_xlat51;
        let x_2909 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2912 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2906.x, x_2906.y, x_2906.x, x_2906.y) * vec4<f32>(x_2909.x, x_2909.y, x_2909.x, x_2909.y)) + vec4<f32>(x_2912.x, x_2912.y, x_2912.z, x_2912.y));
        let x_2915 : vec2<f32> = u_xlat51;
        let x_2917 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2920 : vec4<f32> = u_xlat12;
        let x_2922 : vec2<f32> = ((x_2915 * vec2<f32>(x_2917.x, x_2917.y)) + vec2<f32>(x_2920.w, x_2920.y));
        let x_2923 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2922.x, x_2922.y, x_2923.z, x_2923.w);
        let x_2926 : f32 = u_xlat12.y;
        u_xlat9.y = x_2926;
        let x_2929 : f32 = u_xlat11.z;
        u_xlat12.y = x_2929;
        let x_2931 : vec2<f32> = u_xlat51;
        let x_2934 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2937 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2931.x, x_2931.y, x_2931.x, x_2931.y) * vec4<f32>(x_2934.x, x_2934.y, x_2934.x, x_2934.y)) + vec4<f32>(x_2937.x, x_2937.y, x_2937.z, x_2937.y));
        let x_2941 : vec2<f32> = u_xlat51;
        let x_2943 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2946 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2941 * vec2<f32>(x_2943.x, x_2943.y)) + vec2<f32>(x_2946.w, x_2946.y));
        let x_2950 : f32 = u_xlat12.y;
        u_xlat9.z = x_2950;
        let x_2952 : vec2<f32> = u_xlat51;
        let x_2955 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2958 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2952.x, x_2952.y, x_2952.x, x_2952.y) * vec4<f32>(x_2955.x, x_2955.y, x_2955.x, x_2955.y)) + vec4<f32>(x_2958.x, x_2958.y, x_2958.x, x_2958.z));
        let x_2962 : f32 = u_xlat11.w;
        u_xlat12.y = x_2962;
        let x_2964 : vec2<f32> = u_xlat51;
        let x_2967 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2970 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2964.x, x_2964.y, x_2964.x, x_2964.y) * vec4<f32>(x_2967.x, x_2967.y, x_2967.x, x_2967.y)) + vec4<f32>(x_2970.x, x_2970.y, x_2970.z, x_2970.y));
        let x_2973 : vec2<f32> = u_xlat51;
        let x_2975 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2978 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_2973 * vec2<f32>(x_2975.x, x_2975.y)) + vec2<f32>(x_2978.w, x_2978.y));
        let x_2982 : f32 = u_xlat12.y;
        u_xlat9.w = x_2982;
        let x_2984 : vec2<f32> = u_xlat51;
        let x_2986 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2989 : vec4<f32> = u_xlat9;
        let x_2991 : vec2<f32> = ((x_2984 * vec2<f32>(x_2986.x, x_2986.y)) + vec2<f32>(x_2989.x, x_2989.w));
        let x_2992 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2991.x, x_2991.y, x_2992.z, x_2992.w);
        let x_2994 : vec4<f32> = u_xlat12;
        let x_2995 : vec3<f32> = vec3<f32>(x_2994.x, x_2994.z, x_2994.w);
        let x_2996 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2995.x, x_2996.y, x_2995.y, x_2995.z);
        let x_2998 : vec2<f32> = u_xlat51;
        let x_3001 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3004 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2998.x, x_2998.y, x_2998.x, x_2998.y) * vec4<f32>(x_3001.x, x_3001.y, x_3001.x, x_3001.y)) + vec4<f32>(x_3004.x, x_3004.y, x_3004.z, x_3004.y));
        let x_3008 : vec2<f32> = u_xlat51;
        let x_3010 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3013 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_3008 * vec2<f32>(x_3010.x, x_3010.y)) + vec2<f32>(x_3013.w, x_3013.y));
        let x_3017 : f32 = u_xlat9.x;
        u_xlat11.x = x_3017;
        let x_3019 : vec2<f32> = u_xlat51;
        let x_3021 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3024 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_3019 * vec2<f32>(x_3021.x, x_3021.y)) + vec2<f32>(x_3024.x, x_3024.y));
        let x_3027 : vec4<f32> = u_xlat8;
        let x_3029 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_3027.x, x_3027.x, x_3027.x, x_3027.x) * x_3029);
        let x_3031 : vec4<f32> = u_xlat8;
        let x_3033 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_3031.y, x_3031.y, x_3031.y, x_3031.y) * x_3033);
        let x_3036 : vec4<f32> = u_xlat8;
        let x_3038 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_3036.z, x_3036.z, x_3036.z, x_3036.z) * x_3038);
        let x_3040 : vec4<f32> = u_xlat8;
        let x_3042 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_3040.w, x_3040.w, x_3040.w, x_3040.w) * x_3042);
        let x_3045 : vec4<f32> = u_xlat13;
        let x_3046 : vec2<f32> = vec2<f32>(x_3045.x, x_3045.y);
        let x_3048 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3046.x, x_3046.y, x_3048);
        let x_3055 : vec3<f32> = txVec43;
        let x_3057 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3055.xy, x_3055.z);
        u_xlat9.x = x_3057;
        let x_3060 : vec4<f32> = u_xlat13;
        let x_3061 : vec2<f32> = vec2<f32>(x_3060.z, x_3060.w);
        let x_3063 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3061.x, x_3061.y, x_3063);
        let x_3071 : vec3<f32> = txVec44;
        let x_3073 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3071.xy, x_3071.z);
        u_xlat75 = x_3073;
        let x_3074 : f32 = u_xlat75;
        let x_3076 : f32 = u_xlat19.y;
        u_xlat75 = (x_3074 * x_3076);
        let x_3079 : f32 = u_xlat19.x;
        let x_3081 : f32 = u_xlat9.x;
        let x_3083 : f32 = u_xlat75;
        u_xlat9.x = ((x_3079 * x_3081) + x_3083);
        let x_3087 : vec4<f32> = u_xlat14;
        let x_3088 : vec2<f32> = vec2<f32>(x_3087.x, x_3087.y);
        let x_3090 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3088.x, x_3088.y, x_3090);
        let x_3097 : vec3<f32> = txVec45;
        let x_3099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3097.xy, x_3097.z);
        u_xlat75 = x_3099;
        let x_3101 : f32 = u_xlat19.z;
        let x_3102 : f32 = u_xlat75;
        let x_3105 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3101 * x_3102) + x_3105);
        let x_3109 : vec4<f32> = u_xlat16;
        let x_3110 : vec2<f32> = vec2<f32>(x_3109.x, x_3109.y);
        let x_3112 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3110.x, x_3110.y, x_3112);
        let x_3119 : vec3<f32> = txVec46;
        let x_3121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3119.xy, x_3119.z);
        u_xlat75 = x_3121;
        let x_3123 : f32 = u_xlat19.w;
        let x_3124 : f32 = u_xlat75;
        let x_3127 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3123 * x_3124) + x_3127);
        let x_3131 : vec4<f32> = u_xlat15;
        let x_3132 : vec2<f32> = vec2<f32>(x_3131.x, x_3131.y);
        let x_3134 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3132.x, x_3132.y, x_3134);
        let x_3141 : vec3<f32> = txVec47;
        let x_3143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3141.xy, x_3141.z);
        u_xlat75 = x_3143;
        let x_3145 : f32 = u_xlat20.x;
        let x_3146 : f32 = u_xlat75;
        let x_3149 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3145 * x_3146) + x_3149);
        let x_3153 : vec4<f32> = u_xlat15;
        let x_3154 : vec2<f32> = vec2<f32>(x_3153.z, x_3153.w);
        let x_3156 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3154.x, x_3154.y, x_3156);
        let x_3163 : vec3<f32> = txVec48;
        let x_3165 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3163.xy, x_3163.z);
        u_xlat75 = x_3165;
        let x_3167 : f32 = u_xlat20.y;
        let x_3168 : f32 = u_xlat75;
        let x_3171 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3167 * x_3168) + x_3171);
        let x_3175 : vec2<f32> = u_xlat58;
        let x_3177 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3175.x, x_3175.y, x_3177);
        let x_3184 : vec3<f32> = txVec49;
        let x_3186 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3184.xy, x_3184.z);
        u_xlat75 = x_3186;
        let x_3188 : f32 = u_xlat20.z;
        let x_3189 : f32 = u_xlat75;
        let x_3192 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3188 * x_3189) + x_3192);
        let x_3196 : vec4<f32> = u_xlat16;
        let x_3197 : vec2<f32> = vec2<f32>(x_3196.z, x_3196.w);
        let x_3199 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3197.x, x_3197.y, x_3199);
        let x_3206 : vec3<f32> = txVec50;
        let x_3208 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3206.xy, x_3206.z);
        u_xlat75 = x_3208;
        let x_3210 : f32 = u_xlat20.w;
        let x_3211 : f32 = u_xlat75;
        let x_3214 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3210 * x_3211) + x_3214);
        let x_3218 : vec4<f32> = u_xlat17;
        let x_3219 : vec2<f32> = vec2<f32>(x_3218.x, x_3218.y);
        let x_3221 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3219.x, x_3219.y, x_3221);
        let x_3228 : vec3<f32> = txVec51;
        let x_3230 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3228.xy, x_3228.z);
        u_xlat75 = x_3230;
        let x_3232 : f32 = u_xlat21.x;
        let x_3233 : f32 = u_xlat75;
        let x_3236 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3232 * x_3233) + x_3236);
        let x_3240 : vec4<f32> = u_xlat17;
        let x_3241 : vec2<f32> = vec2<f32>(x_3240.z, x_3240.w);
        let x_3243 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3241.x, x_3241.y, x_3243);
        let x_3250 : vec3<f32> = txVec52;
        let x_3252 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3250.xy, x_3250.z);
        u_xlat75 = x_3252;
        let x_3254 : f32 = u_xlat21.y;
        let x_3255 : f32 = u_xlat75;
        let x_3258 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3254 * x_3255) + x_3258);
        let x_3262 : vec2<f32> = u_xlat31;
        let x_3264 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3262.x, x_3262.y, x_3264);
        let x_3271 : vec3<f32> = txVec53;
        let x_3273 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3271.xy, x_3271.z);
        u_xlat31.x = x_3273;
        let x_3276 : f32 = u_xlat21.z;
        let x_3278 : f32 = u_xlat31.x;
        let x_3281 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3276 * x_3278) + x_3281);
        let x_3285 : vec4<f32> = u_xlat18;
        let x_3286 : vec2<f32> = vec2<f32>(x_3285.x, x_3285.y);
        let x_3288 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3286.x, x_3286.y, x_3288);
        let x_3295 : vec3<f32> = txVec54;
        let x_3297 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3295.xy, x_3295.z);
        u_xlat31.x = x_3297;
        let x_3300 : f32 = u_xlat21.w;
        let x_3302 : f32 = u_xlat31.x;
        let x_3305 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3300 * x_3302) + x_3305);
        let x_3309 : vec4<f32> = u_xlat12;
        let x_3310 : vec2<f32> = vec2<f32>(x_3309.x, x_3309.y);
        let x_3312 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3310.x, x_3310.y, x_3312);
        let x_3319 : vec3<f32> = txVec55;
        let x_3321 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3319.xy, x_3319.z);
        u_xlat31.x = x_3321;
        let x_3324 : f32 = u_xlat8.x;
        let x_3326 : f32 = u_xlat31.x;
        let x_3329 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3324 * x_3326) + x_3329);
        let x_3333 : vec4<f32> = u_xlat12;
        let x_3334 : vec2<f32> = vec2<f32>(x_3333.z, x_3333.w);
        let x_3336 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3334.x, x_3334.y, x_3336);
        let x_3343 : vec3<f32> = txVec56;
        let x_3345 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3343.xy, x_3343.z);
        u_xlat9.x = x_3345;
        let x_3348 : f32 = u_xlat8.y;
        let x_3350 : f32 = u_xlat9.x;
        let x_3353 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3348 * x_3350) + x_3353);
        let x_3357 : vec2<f32> = u_xlat55;
        let x_3359 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3357.x, x_3357.y, x_3359);
        let x_3366 : vec3<f32> = txVec57;
        let x_3368 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3366.xy, x_3366.z);
        u_xlat30.x = x_3368;
        let x_3371 : f32 = u_xlat8.z;
        let x_3373 : f32 = u_xlat30.x;
        let x_3376 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3371 * x_3373) + x_3376);
        let x_3380 : vec2<f32> = u_xlat51;
        let x_3382 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3380.x, x_3380.y, x_3382);
        let x_3389 : vec3<f32> = txVec58;
        let x_3391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3389.xy, x_3389.z);
        u_xlat51.x = x_3391;
        let x_3394 : f32 = u_xlat8.w;
        let x_3396 : f32 = u_xlat51.x;
        let x_3399 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3394 * x_3396) + x_3399);
      }
    }
  } else {
    let x_3403 : vec4<f32> = u_xlat6;
    let x_3404 : vec2<f32> = vec2<f32>(x_3403.x, x_3403.y);
    let x_3406 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3404.x, x_3404.y, x_3406);
    let x_3413 : vec3<f32> = txVec59;
    let x_3415 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3413.xy, x_3413.z);
    u_xlat66 = x_3415;
  }
  let x_3416 : f32 = u_xlat66;
  let x_3418 : f32 = x_271.x_MainLightShadowParams.x;
  let x_3420 : f32 = u_xlat68;
  u_xlat66 = ((x_3416 * x_3418) + x_3420);
  let x_3422 : bool = u_xlatb70;
  let x_3423 : f32 = u_xlat66;
  u_xlat66 = select(x_3423, 1.0f, x_3422);
  let x_3425 : vec3<f32> = vs_INTERP0;
  let x_3427 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3429 : vec3<f32> = (x_3425 + -(x_3427));
  let x_3430 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3429.x, x_3429.y, x_3429.z, x_3430.w);
  let x_3432 : vec4<f32> = u_xlat6;
  let x_3434 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3432.x, x_3432.y, x_3432.z), vec3<f32>(x_3434.x, x_3434.y, x_3434.z));
  let x_3437 : f32 = u_xlat68;
  let x_3439 : f32 = x_271.x_MainLightShadowParams.z;
  let x_3442 : f32 = x_271.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3437 * x_3439) + x_3442);
  let x_3444 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3444, 0.0f, 1.0f);
  let x_3446 : f32 = u_xlat66;
  u_xlat70 = (-(x_3446) + 1.0f);
  let x_3449 : f32 = u_xlat68;
  let x_3450 : f32 = u_xlat70;
  let x_3452 : f32 = u_xlat66;
  u_xlat66 = ((x_3449 * x_3450) + x_3452);
  let x_3454 : f32 = u_xlat29;
  let x_3457 : vec4<f32> = x_90.x_MainLightColor;
  let x_3459 : vec3<f32> = (vec3<f32>(x_3454, x_3454, x_3454) * vec3<f32>(x_3457.x, x_3457.y, x_3457.z));
  let x_3460 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3459.x, x_3459.y, x_3459.z, x_3460.w);
  let x_3462 : vec3<f32> = u_xlat2;
  let x_3464 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3462), vec3<f32>(x_3464.x, x_3464.y, x_3464.z));
  let x_3467 : f32 = u_xlat68;
  let x_3468 : f32 = u_xlat68;
  u_xlat68 = (x_3467 + x_3468);
  let x_3470 : vec4<f32> = u_xlat3;
  let x_3472 : f32 = u_xlat68;
  let x_3476 : vec3<f32> = u_xlat2;
  let x_3478 : vec3<f32> = ((vec3<f32>(x_3470.x, x_3470.y, x_3470.z) * -(vec3<f32>(x_3472, x_3472, x_3472))) + -(x_3476));
  let x_3479 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3478.x, x_3478.y, x_3478.z, x_3479.w);
  let x_3481 : vec4<f32> = u_xlat3;
  let x_3483 : vec3<f32> = u_xlat2;
  u_xlat68 = dot(vec3<f32>(x_3481.x, x_3481.y, x_3481.z), x_3483);
  let x_3485 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3485, 0.0f, 1.0f);
  let x_3487 : f32 = u_xlat68;
  u_xlat68 = (-(x_3487) + 1.0f);
  let x_3490 : f32 = u_xlat68;
  let x_3491 : f32 = u_xlat68;
  u_xlat68 = (x_3490 * x_3491);
  let x_3493 : f32 = u_xlat68;
  let x_3494 : f32 = u_xlat68;
  u_xlat68 = (x_3493 * x_3494);
  let x_3497 : f32 = u_xlat45.x;
  u_xlat70 = ((-(x_3497) * 0.699999988f) + 1.700000048f);
  let x_3504 : f32 = u_xlat45.x;
  let x_3505 : f32 = u_xlat70;
  u_xlat45.x = (x_3504 * x_3505);
  let x_3509 : f32 = u_xlat45.x;
  u_xlat45.x = (x_3509 * 6.0f);
  let x_3521 : vec4<f32> = u_xlat8;
  let x_3524 : f32 = u_xlat45.x;
  let x_3525 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3521.x, x_3521.y, x_3521.z), x_3524);
  u_xlat8 = x_3525;
  let x_3527 : f32 = u_xlat8.w;
  u_xlat45.x = (x_3527 + -1.0f);
  let x_3531 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3533 : f32 = u_xlat45.x;
  u_xlat45.x = ((x_3531 * x_3533) + 1.0f);
  let x_3538 : f32 = u_xlat45.x;
  u_xlat45.x = max(x_3538, 0.0f);
  let x_3542 : f32 = u_xlat45.x;
  u_xlat45.x = log2(x_3542);
  let x_3546 : f32 = u_xlat45.x;
  let x_3548 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat45.x = (x_3546 * x_3548);
  let x_3552 : f32 = u_xlat45.x;
  u_xlat45.x = exp2(x_3552);
  let x_3556 : f32 = u_xlat45.x;
  let x_3558 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat45.x = (x_3556 * x_3558);
  let x_3561 : vec4<f32> = u_xlat8;
  let x_3563 : vec2<f32> = u_xlat45;
  let x_3565 : vec3<f32> = (vec3<f32>(x_3561.x, x_3561.y, x_3561.z) * vec3<f32>(x_3563.x, x_3563.x, x_3563.x));
  let x_3566 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3565.x, x_3565.y, x_3565.z, x_3566.w);
  let x_3568 : f32 = u_xlat67;
  let x_3570 : f32 = u_xlat67;
  u_xlat45 = ((vec2<f32>(x_3568, x_3568) * vec2<f32>(x_3570, x_3570)) + vec2<f32>(-1.0f, 1.0f));
  let x_3576 : f32 = u_xlat45.y;
  u_xlat67 = (1.0f / x_3576);
  let x_3579 : f32 = u_xlat5.x;
  u_xlat70 = (x_3579 + -0.039999999f);
  let x_3582 : f32 = u_xlat68;
  let x_3583 : f32 = u_xlat70;
  u_xlat68 = ((x_3582 * x_3583) + 0.039999999f);
  let x_3587 : f32 = u_xlat67;
  let x_3588 : f32 = u_xlat68;
  u_xlat67 = (x_3587 * x_3588);
  let x_3590 : f32 = u_xlat67;
  let x_3592 : vec4<f32> = u_xlat8;
  let x_3594 : vec3<f32> = (vec3<f32>(x_3590, x_3590, x_3590) * vec3<f32>(x_3592.x, x_3592.y, x_3592.z));
  let x_3595 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3594.x, x_3594.y, x_3594.z, x_3595.w);
  let x_3597 : vec3<f32> = u_xlat27;
  let x_3598 : vec3<f32> = u_xlat4;
  let x_3600 : vec4<f32> = u_xlat8;
  let x_3602 : vec3<f32> = ((x_3597 * x_3598) + vec3<f32>(x_3600.x, x_3600.y, x_3600.z));
  let x_3603 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3602.x, x_3602.y, x_3602.z, x_3603.w);
  let x_3605 : f32 = u_xlat66;
  let x_3607 : f32 = x_161.unity_LightData.z;
  u_xlat66 = (x_3605 * x_3607);
  let x_3609 : vec4<f32> = u_xlat3;
  let x_3612 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat67 = dot(vec3<f32>(x_3609.x, x_3609.y, x_3609.z), vec3<f32>(x_3612.x, x_3612.y, x_3612.z));
  let x_3615 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3615, 0.0f, 1.0f);
  let x_3617 : f32 = u_xlat66;
  let x_3618 : f32 = u_xlat67;
  u_xlat66 = (x_3617 * x_3618);
  let x_3620 : f32 = u_xlat66;
  let x_3622 : vec4<f32> = u_xlat6;
  let x_3624 : vec3<f32> = (vec3<f32>(x_3620, x_3620, x_3620) * vec3<f32>(x_3622.x, x_3622.y, x_3622.z));
  let x_3625 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3624.x, x_3624.y, x_3624.z, x_3625.w);
  let x_3627 : vec3<f32> = u_xlat2;
  let x_3629 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3631 : vec3<f32> = (x_3627 + vec3<f32>(x_3629.x, x_3629.y, x_3629.z));
  let x_3632 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3631.x, x_3631.y, x_3631.z, x_3632.w);
  let x_3634 : vec4<f32> = u_xlat8;
  let x_3636 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3634.x, x_3634.y, x_3634.z), vec3<f32>(x_3636.x, x_3636.y, x_3636.z));
  let x_3639 : f32 = u_xlat66;
  u_xlat66 = max(x_3639, 1.17549435e-37f);
  let x_3642 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3642);
  let x_3644 : f32 = u_xlat66;
  let x_3646 : vec4<f32> = u_xlat8;
  let x_3648 : vec3<f32> = (vec3<f32>(x_3644, x_3644, x_3644) * vec3<f32>(x_3646.x, x_3646.y, x_3646.z));
  let x_3649 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3648.x, x_3648.y, x_3648.z, x_3649.w);
  let x_3651 : vec4<f32> = u_xlat3;
  let x_3653 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3651.x, x_3651.y, x_3651.z), vec3<f32>(x_3653.x, x_3653.y, x_3653.z));
  let x_3656 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3656, 0.0f, 1.0f);
  let x_3659 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3661 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3659.x, x_3659.y, x_3659.z), vec3<f32>(x_3661.x, x_3661.y, x_3661.z));
  let x_3664 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3664, 0.0f, 1.0f);
  let x_3666 : f32 = u_xlat66;
  let x_3667 : f32 = u_xlat66;
  u_xlat66 = (x_3666 * x_3667);
  let x_3669 : f32 = u_xlat66;
  let x_3671 : f32 = u_xlat45.x;
  u_xlat66 = ((x_3669 * x_3671) + 1.000010014f);
  let x_3675 : f32 = u_xlat67;
  let x_3676 : f32 = u_xlat67;
  u_xlat67 = (x_3675 * x_3676);
  let x_3678 : f32 = u_xlat66;
  let x_3679 : f32 = u_xlat66;
  u_xlat66 = (x_3678 * x_3679);
  let x_3681 : f32 = u_xlat67;
  u_xlat67 = max(x_3681, 0.100000001f);
  let x_3684 : f32 = u_xlat66;
  let x_3685 : f32 = u_xlat67;
  u_xlat66 = (x_3684 * x_3685);
  let x_3687 : f32 = u_xlat72;
  let x_3688 : f32 = u_xlat66;
  u_xlat66 = (x_3687 * x_3688);
  let x_3690 : f32 = u_xlat69;
  let x_3691 : f32 = u_xlat66;
  u_xlat66 = (x_3690 / x_3691);
  let x_3693 : f32 = u_xlat66;
  let x_3697 : vec3<f32> = u_xlat4;
  let x_3698 : vec3<f32> = ((vec3<f32>(x_3693, x_3693, x_3693) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3697);
  let x_3699 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3698.x, x_3698.y, x_3698.z, x_3699.w);
  let x_3701 : vec4<f32> = u_xlat6;
  let x_3703 : vec4<f32> = u_xlat8;
  let x_3705 : vec3<f32> = (vec3<f32>(x_3701.x, x_3701.y, x_3701.z) * vec3<f32>(x_3703.x, x_3703.y, x_3703.z));
  let x_3706 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3705.x, x_3705.y, x_3705.z, x_3706.w);
  let x_3709 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3711 : f32 = x_161.unity_LightData.y;
  u_xlat66 = min(x_3709, x_3711);
  let x_3713 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3713));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3725 : u32 = u_xlatu_loop_1;
    let x_3726 : u32 = u_xlatu66;
    if ((x_3725 < x_3726)) {
    } else {
      break;
    }
    let x_3729 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3729 >> 2u);
    let x_3732 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3732 & 3u));
    let x_3735 : u32 = u_xlatu68;
    let x_3738 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3735)];
    let x_3748 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3753 : vec4<u32> = indexable[x_3748];
    u_xlat68 = dot(x_3738, bitcast<vec4<f32>>(x_3753));
    let x_3757 : f32 = u_xlat68;
    u_xlati68 = i32(x_3757);
    let x_3759 : vec3<f32> = vs_INTERP0;
    let x_3771 : i32 = u_xlati68;
    let x_3773 : vec4<f32> = x_3770.x_AdditionalLightsPosition[x_3771];
    let x_3776 : i32 = u_xlati68;
    let x_3778 : vec4<f32> = x_3770.x_AdditionalLightsPosition[x_3776];
    let x_3780 : vec3<f32> = ((-(x_3759) * vec3<f32>(x_3773.w, x_3773.w, x_3773.w)) + vec3<f32>(x_3778.x, x_3778.y, x_3778.z));
    let x_3781 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3780.x, x_3780.y, x_3780.z, x_3781.w);
    let x_3783 : vec4<f32> = u_xlat9;
    let x_3785 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3783.x, x_3783.y, x_3783.z), vec3<f32>(x_3785.x, x_3785.y, x_3785.z));
    let x_3788 : f32 = u_xlat70;
    u_xlat70 = max(x_3788, 6.10351562e-05f);
    let x_3792 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3792);
    let x_3794 : f32 = u_xlat71;
    let x_3796 : vec4<f32> = u_xlat9;
    let x_3798 : vec3<f32> = (vec3<f32>(x_3794, x_3794, x_3794) * vec3<f32>(x_3796.x, x_3796.y, x_3796.z));
    let x_3799 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3798.x, x_3798.y, x_3798.z, x_3799.w);
    let x_3801 : f32 = u_xlat70;
    u_xlat51.x = (1.0f / x_3801);
    let x_3804 : f32 = u_xlat70;
    let x_3805 : i32 = u_xlati68;
    let x_3807 : f32 = x_3770.x_AdditionalLightsAttenuation[x_3805].x;
    u_xlat70 = (x_3804 * x_3807);
    let x_3809 : f32 = u_xlat70;
    let x_3811 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3809) * x_3811) + 1.0f);
    let x_3814 : f32 = u_xlat70;
    u_xlat70 = max(x_3814, 0.0f);
    let x_3816 : f32 = u_xlat70;
    let x_3817 : f32 = u_xlat70;
    u_xlat70 = (x_3816 * x_3817);
    let x_3819 : f32 = u_xlat70;
    let x_3821 : f32 = u_xlat51.x;
    u_xlat70 = (x_3819 * x_3821);
    let x_3823 : i32 = u_xlati68;
    let x_3825 : vec4<f32> = x_3770.x_AdditionalLightsSpotDir[x_3823];
    let x_3827 : vec4<f32> = u_xlat10;
    u_xlat51.x = dot(vec3<f32>(x_3825.x, x_3825.y, x_3825.z), vec3<f32>(x_3827.x, x_3827.y, x_3827.z));
    let x_3832 : f32 = u_xlat51.x;
    let x_3833 : i32 = u_xlati68;
    let x_3835 : f32 = x_3770.x_AdditionalLightsAttenuation[x_3833].z;
    let x_3837 : i32 = u_xlati68;
    let x_3839 : f32 = x_3770.x_AdditionalLightsAttenuation[x_3837].w;
    u_xlat51.x = ((x_3832 * x_3835) + x_3839);
    let x_3843 : f32 = u_xlat51.x;
    u_xlat51.x = clamp(x_3843, 0.0f, 1.0f);
    let x_3847 : f32 = u_xlat51.x;
    let x_3849 : f32 = u_xlat51.x;
    u_xlat51.x = (x_3847 * x_3849);
    let x_3852 : f32 = u_xlat70;
    let x_3854 : f32 = u_xlat51.x;
    u_xlat70 = (x_3852 * x_3854);
    let x_3856 : f32 = u_xlat29;
    let x_3858 : i32 = u_xlati68;
    let x_3860 : vec4<f32> = x_3770.x_AdditionalLightsColor[x_3858];
    let x_3862 : vec3<f32> = (vec3<f32>(x_3856, x_3856, x_3856) * vec3<f32>(x_3860.x, x_3860.y, x_3860.z));
    let x_3863 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3862.x, x_3862.y, x_3862.z, x_3863.w);
    let x_3865 : vec4<f32> = u_xlat3;
    let x_3867 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_3865.x, x_3865.y, x_3865.z), vec3<f32>(x_3867.x, x_3867.y, x_3867.z));
    let x_3870 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3870, 0.0f, 1.0f);
    let x_3872 : f32 = u_xlat68;
    let x_3873 : f32 = u_xlat70;
    u_xlat68 = (x_3872 * x_3873);
    let x_3875 : f32 = u_xlat68;
    let x_3877 : vec4<f32> = u_xlat11;
    let x_3879 : vec3<f32> = (vec3<f32>(x_3875, x_3875, x_3875) * vec3<f32>(x_3877.x, x_3877.y, x_3877.z));
    let x_3880 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3879.x, x_3879.y, x_3879.z, x_3880.w);
    let x_3882 : vec4<f32> = u_xlat9;
    let x_3884 : f32 = u_xlat71;
    let x_3887 : vec3<f32> = u_xlat2;
    let x_3888 : vec3<f32> = ((vec3<f32>(x_3882.x, x_3882.y, x_3882.z) * vec3<f32>(x_3884, x_3884, x_3884)) + x_3887);
    let x_3889 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3888.x, x_3888.y, x_3888.z, x_3889.w);
    let x_3891 : vec4<f32> = u_xlat9;
    let x_3893 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_3891.x, x_3891.y, x_3891.z), vec3<f32>(x_3893.x, x_3893.y, x_3893.z));
    let x_3896 : f32 = u_xlat68;
    u_xlat68 = max(x_3896, 1.17549435e-37f);
    let x_3898 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3898);
    let x_3900 : f32 = u_xlat68;
    let x_3902 : vec4<f32> = u_xlat9;
    let x_3904 : vec3<f32> = (vec3<f32>(x_3900, x_3900, x_3900) * vec3<f32>(x_3902.x, x_3902.y, x_3902.z));
    let x_3905 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3904.x, x_3904.y, x_3904.z, x_3905.w);
    let x_3907 : vec4<f32> = u_xlat3;
    let x_3909 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_3907.x, x_3907.y, x_3907.z), vec3<f32>(x_3909.x, x_3909.y, x_3909.z));
    let x_3912 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3912, 0.0f, 1.0f);
    let x_3914 : vec4<f32> = u_xlat10;
    let x_3916 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3914.x, x_3914.y, x_3914.z), vec3<f32>(x_3916.x, x_3916.y, x_3916.z));
    let x_3919 : f32 = u_xlat70;
    u_xlat70 = clamp(x_3919, 0.0f, 1.0f);
    let x_3921 : f32 = u_xlat68;
    let x_3922 : f32 = u_xlat68;
    u_xlat68 = (x_3921 * x_3922);
    let x_3924 : f32 = u_xlat68;
    let x_3926 : f32 = u_xlat45.x;
    u_xlat68 = ((x_3924 * x_3926) + 1.000010014f);
    let x_3929 : f32 = u_xlat70;
    let x_3930 : f32 = u_xlat70;
    u_xlat70 = (x_3929 * x_3930);
    let x_3932 : f32 = u_xlat68;
    let x_3933 : f32 = u_xlat68;
    u_xlat68 = (x_3932 * x_3933);
    let x_3935 : f32 = u_xlat70;
    u_xlat70 = max(x_3935, 0.100000001f);
    let x_3937 : f32 = u_xlat68;
    let x_3938 : f32 = u_xlat70;
    u_xlat68 = (x_3937 * x_3938);
    let x_3940 : f32 = u_xlat72;
    let x_3941 : f32 = u_xlat68;
    u_xlat68 = (x_3940 * x_3941);
    let x_3943 : f32 = u_xlat69;
    let x_3944 : f32 = u_xlat68;
    u_xlat68 = (x_3943 / x_3944);
    let x_3946 : f32 = u_xlat68;
    let x_3949 : vec3<f32> = u_xlat4;
    let x_3950 : vec3<f32> = ((vec3<f32>(x_3946, x_3946, x_3946) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3949);
    let x_3951 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3950.x, x_3950.y, x_3950.z, x_3951.w);
    let x_3953 : vec4<f32> = u_xlat9;
    let x_3955 : vec4<f32> = u_xlat11;
    let x_3958 : vec4<f32> = u_xlat8;
    let x_3960 : vec3<f32> = ((vec3<f32>(x_3953.x, x_3953.y, x_3953.z) * vec3<f32>(x_3955.x, x_3955.y, x_3955.z)) + vec3<f32>(x_3958.x, x_3958.y, x_3958.z));
    let x_3961 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3960.x, x_3960.y, x_3960.z, x_3961.w);

    continuing {
      let x_3963 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3963 + bitcast<u32>(1i));
    }
  }
  let x_3965 : vec4<f32> = u_xlat5;
  let x_3967 : vec4<f32> = u_xlat7;
  let x_3970 : vec4<f32> = u_xlat6;
  u_xlat2 = ((vec3<f32>(x_3965.x, x_3965.y, x_3965.z) * vec3<f32>(x_3967.x, x_3967.x, x_3967.x)) + vec3<f32>(x_3970.x, x_3970.y, x_3970.z));
  let x_3973 : vec4<f32> = u_xlat8;
  let x_3975 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3973.x, x_3973.y, x_3973.z) + x_3975);
  let x_3979 : vec4<f32> = vs_INTERP4;
  let x_3981 : vec3<f32> = u_xlat0;
  let x_3983 : vec3<f32> = u_xlat2;
  let x_3984 : vec3<f32> = ((vec3<f32>(x_3979.w, x_3979.w, x_3979.w) * x_3981) + x_3983);
  let x_3985 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3984.x, x_3984.y, x_3984.z, x_3985.w);
  let x_3987 : bool = u_xlatb23;
  if (x_3987) {
    let x_3992 : f32 = u_xlat1.x;
    x_3988 = x_3992;
  } else {
    x_3988 = 1.0f;
  }
  let x_3994 : f32 = x_3988;
  SV_Target0.w = x_3994;
  let x_4000 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_4002 : f32 = x_161.unity_RenderingLayer.x;
  u_xlatu0 = (x_4000 & bitcast<u32>(x_4002));
  let x_4005 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4005);
  let x_4010 : f32 = u_xlat0.x;
  let x_4012 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4010 * x_4012);
  let x_4016 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4016, 0.0f, 1.0f);
  let x_4019 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4019.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

