type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb26 : bool;
  var u_xlat5 : vec3<f32>;
  var x_285 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var x_294 : vec3<f32>;
  var x_305 : vec3<f32>;
  var x_316 : vec3<f32>;
  var x_327 : vec2<f32>;
  var u_xlat17 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat10 : vec2<f32>;
  var u_xlat25 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlatb25 : bool;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlatb2 : vec4<bool>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_99 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_101 : vec2<f32> = vs_TEXCOORD0;
  let x_106 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_108 : vec3<f32> = ((vec3<f32>(x_99.x, x_99.y, x_99.z) * vec3<f32>(x_101.x, x_101.x, x_101.x)) + vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_113 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_115 : vec3<f32> = u_xlat8;
  let x_118 : vec4<f32> = u_xlat1;
  let x_120 : vec3<f32> = ((vec3<f32>(x_113.x, x_113.y, x_113.z) * vec3<f32>(x_115.x, x_115.x, x_115.x)) + vec3<f32>(x_118.x, x_118.y, x_118.z));
  let x_121 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_120.x, x_120.y, x_120.z, x_121.w);
  let x_123 : f32 = u_xlat16;
  let x_125 : vec4<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_123, x_123, x_123) * vec3<f32>(x_125.x, x_125.y, x_125.z));
  let x_131 : f32 = x_33.x_SourceSize.z;
  u_xlat9.x = (x_131 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_136 : vec3<f32> = u_xlat9;
  let x_138 : vec2<f32> = vs_TEXCOORD0;
  let x_139 : vec2<f32> = (vec2<f32>(x_136.x, x_136.y) + x_138);
  let x_140 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_139.x, x_139.y, x_140.z);
  let x_145 : vec3<f32> = u_xlat9;
  let x_148 : f32 = x_33.x_GlobalMipBias.x;
  let x_149 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_145.x, x_145.y), x_148);
  u_xlat1.x = x_149.x;
  let x_153 : f32 = x_33.x_ZBufferParams.z;
  let x_155 : f32 = u_xlat1.x;
  let x_158 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_153 * x_155) + x_158);
  let x_162 : f32 = u_xlat1.x;
  u_xlat9.z = (1.0f / x_162);
  let x_167 : f32 = x_33.x_SourceSize.z;
  u_xlat2.x = (x_167 * 2.0f);
  u_xlat2.y = 0.0f;
  let x_172 : vec4<f32> = u_xlat2;
  let x_174 : vec2<f32> = vs_TEXCOORD0;
  let x_175 : vec2<f32> = (vec2<f32>(x_172.x, x_172.y) + x_174);
  let x_176 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_175.x, x_175.y, x_176.z, x_176.w);
  let x_181 : vec4<f32> = u_xlat2;
  let x_184 : f32 = x_33.x_GlobalMipBias.x;
  let x_185 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_181.x, x_181.y), x_184);
  u_xlat1.x = x_185.x;
  let x_189 : f32 = x_33.x_ZBufferParams.z;
  let x_191 : f32 = u_xlat1.x;
  let x_194 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_189 * x_191) + x_194);
  let x_198 : f32 = u_xlat1.x;
  u_xlat2.z = (1.0f / x_198);
  u_xlat11.x = 0.0f;
  let x_204 : f32 = x_33.x_SourceSize.w;
  u_xlat11.y = (x_204 * 2.0f);
  let x_207 : vec3<f32> = u_xlat11;
  let x_209 : vec2<f32> = vs_TEXCOORD0;
  let x_210 : vec2<f32> = (vec2<f32>(x_207.x, x_207.y) + x_209);
  let x_211 : vec3<f32> = u_xlat11;
  u_xlat11 = vec3<f32>(x_210.x, x_210.y, x_211.z);
  let x_216 : vec3<f32> = u_xlat11;
  let x_219 : f32 = x_33.x_GlobalMipBias.x;
  let x_220 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_216.x, x_216.y), x_219);
  u_xlat1.x = x_220.x;
  let x_224 : f32 = x_33.x_ZBufferParams.z;
  let x_226 : f32 = u_xlat1.x;
  let x_229 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_224 * x_226) + x_229);
  let x_233 : f32 = u_xlat1.x;
  u_xlat11.z = (1.0f / x_233);
  u_xlat12.x = 0.0f;
  let x_239 : f32 = x_33.x_SourceSize.w;
  u_xlat12.y = (x_239 * -2.0f);
  let x_242 : vec3<f32> = u_xlat12;
  let x_244 : vec2<f32> = vs_TEXCOORD0;
  let x_245 : vec2<f32> = (vec2<f32>(x_242.x, x_242.y) + x_244);
  let x_246 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_245.x, x_245.y, x_246.z);
  let x_251 : vec3<f32> = u_xlat12;
  let x_254 : f32 = x_33.x_GlobalMipBias.x;
  let x_255 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_251.x, x_251.y), x_254);
  u_xlat1.x = x_255.x;
  let x_259 : f32 = x_33.x_ZBufferParams.z;
  let x_261 : f32 = u_xlat1.x;
  let x_264 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_259 * x_261) + x_264);
  let x_268 : f32 = u_xlat1.x;
  u_xlat12.z = (1.0f / x_268);
  let x_273 : f32 = u_xlat2.z;
  let x_275 : f32 = u_xlat9.z;
  u_xlatb1 = (x_273 < x_275);
  let x_279 : f32 = u_xlat11.z;
  let x_281 : f32 = u_xlat12.z;
  u_xlatb26 = (x_279 < x_281);
  let x_284 : bool = u_xlatb1;
  if (x_284) {
    let x_288 : vec3<f32> = u_xlat9;
    x_285 = x_288;
  } else {
    let x_290 : vec3<f32> = u_xlat12;
    x_285 = x_290;
  }
  let x_291 : vec3<f32> = x_285;
  u_xlat5 = x_291;
  let x_293 : bool = u_xlatb1;
  if (x_293) {
    let x_297 : vec3<f32> = u_xlat12;
    x_294 = x_297;
  } else {
    let x_299 : vec4<f32> = u_xlat2;
    x_294 = vec3<f32>(x_299.x, x_299.y, x_299.z);
  }
  let x_301 : vec3<f32> = x_294;
  let x_302 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_302.x, x_301.x, x_301.y, x_301.z);
  let x_304 : bool = u_xlatb1;
  if (x_304) {
    let x_308 : vec3<f32> = u_xlat11;
    x_305 = x_308;
  } else {
    let x_310 : vec4<f32> = u_xlat2;
    x_305 = vec3<f32>(x_310.x, x_310.y, x_310.z);
  }
  let x_312 : vec3<f32> = x_305;
  let x_313 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_312.x, x_312.y, x_312.z, x_313.w);
  let x_315 : bool = u_xlatb1;
  if (x_315) {
    let x_319 : vec3<f32> = u_xlat9;
    x_316 = x_319;
  } else {
    let x_321 : vec3<f32> = u_xlat11;
    x_316 = x_321;
  }
  let x_322 : vec3<f32> = x_316;
  let x_323 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_323.x, x_322.x, x_322.y, x_322.z);
  let x_325 : bool = u_xlatb26;
  if (x_325) {
    let x_330 : vec3<f32> = u_xlat5;
    x_327 = vec2<f32>(x_330.x, x_330.y);
  } else {
    let x_333 : vec4<f32> = u_xlat2;
    x_327 = vec2<f32>(x_333.x, x_333.y);
  }
  let x_335 : vec2<f32> = x_327;
  let x_336 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_335.x, x_335.y, x_336.z, x_336.w);
  let x_339 : f32 = u_xlat5.z;
  u_xlat4.x = x_339;
  let x_342 : f32 = u_xlat2.z;
  u_xlat1.x = x_342;
  let x_344 : bool = u_xlatb26;
  let x_345 : vec4<f32> = u_xlat4;
  let x_346 : vec4<f32> = u_xlat1;
  u_xlat1 = select(x_346, x_345, vec4<bool>(x_344, x_344, x_344, x_344));
  let x_352 : f32 = u_xlat1.z;
  u_xlat17 = (-(x_352) + 1.0f);
  let x_355 : vec4<f32> = u_xlat1;
  let x_358 : vec4<f32> = x_33.x_ProjectionParams2;
  let x_360 : vec2<f32> = (vec2<f32>(x_355.w, x_355.x) * vec2<f32>(x_358.x, x_358.x));
  let x_361 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_360.x, x_361.y, x_361.z, x_360.y);
  let x_365 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_367 : vec4<f32> = u_xlat1;
  let x_371 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_373 : vec3<f32> = ((vec3<f32>(x_365.z, x_365.x, x_365.y) * vec3<f32>(x_367.y, x_367.y, x_367.y)) + vec3<f32>(x_371.z, x_371.x, x_371.y));
  let x_374 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_373.x, x_373.y, x_373.z, x_374.w);
  let x_377 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_379 : f32 = u_xlat17;
  let x_382 : vec4<f32> = u_xlat3;
  let x_384 : vec3<f32> = ((vec3<f32>(x_377.z, x_377.x, x_377.y) * vec3<f32>(x_379, x_379, x_379)) + vec3<f32>(x_382.x, x_382.y, x_382.z));
  let x_385 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_384.x, x_384.y, x_384.z, x_385.w);
  let x_387 : vec4<f32> = u_xlat3;
  let x_389 : vec4<f32> = u_xlat1;
  let x_392 : vec3<f32> = u_xlat8;
  let x_395 : vec3<f32> = ((vec3<f32>(x_387.x, x_387.y, x_387.z) * vec3<f32>(x_389.x, x_389.x, x_389.x)) + -(vec3<f32>(x_392.z, x_392.x, x_392.y)));
  let x_396 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_400 : f32 = u_xlat2.y;
  u_xlat10.x = (-(x_400) + 1.0f);
  let x_405 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_407 : vec4<f32> = u_xlat2;
  let x_411 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_413 : vec3<f32> = ((vec3<f32>(x_405.y, x_405.z, x_405.x) * vec3<f32>(x_407.x, x_407.x, x_407.x)) + vec3<f32>(x_411.y, x_411.z, x_411.x));
  let x_414 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_413.x, x_414.y, x_413.y, x_413.z);
  let x_417 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_419 : vec2<f32> = u_xlat10;
  let x_422 : vec4<f32> = u_xlat2;
  let x_424 : vec3<f32> = ((vec3<f32>(x_417.y, x_417.z, x_417.x) * vec3<f32>(x_419.x, x_419.x, x_419.x)) + vec3<f32>(x_422.x, x_422.z, x_422.w));
  let x_425 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_424.x, x_424.y, x_424.z, x_425.w);
  let x_427 : vec4<f32> = u_xlat2;
  let x_429 : vec4<f32> = u_xlat1;
  let x_432 : vec3<f32> = u_xlat8;
  let x_435 : vec3<f32> = ((vec3<f32>(x_427.x, x_427.y, x_427.z) * vec3<f32>(x_429.w, x_429.w, x_429.w)) + -(vec3<f32>(x_432.y, x_432.z, x_432.x)));
  let x_436 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_435.x, x_435.y, x_435.z, x_436.w);
  let x_438 : vec4<f32> = u_xlat1;
  let x_440 : vec4<f32> = u_xlat2;
  let x_442 : vec3<f32> = (vec3<f32>(x_438.x, x_438.y, x_438.z) * vec3<f32>(x_440.x, x_440.y, x_440.z));
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_442.x, x_442.y, x_442.z, x_443.w);
  let x_445 : vec4<f32> = u_xlat1;
  let x_447 : vec4<f32> = u_xlat2;
  let x_450 : vec4<f32> = u_xlat3;
  let x_453 : vec3<f32> = ((vec3<f32>(x_445.z, x_445.x, x_445.y) * vec3<f32>(x_447.y, x_447.z, x_447.x)) + -(vec3<f32>(x_450.x, x_450.y, x_450.z)));
  let x_454 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_453.x, x_453.y, x_453.z, x_454.w);
  let x_457 : vec4<f32> = u_xlat1;
  let x_459 : vec4<f32> = u_xlat1;
  u_xlat25 = dot(vec3<f32>(x_457.x, x_457.y, x_457.z), vec3<f32>(x_459.x, x_459.y, x_459.z));
  let x_462 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_462);
  let x_464 : f32 = u_xlat25;
  let x_466 : vec4<f32> = u_xlat1;
  let x_468 : vec3<f32> = (vec3<f32>(x_464, x_464, x_464) * vec3<f32>(x_466.x, x_466.y, x_466.z));
  let x_469 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
  let x_471 : vec2<f32> = vs_TEXCOORD0;
  let x_474 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_476 : vec2<f32> = (x_471 + vec2<f32>(x_474.z, x_474.w));
  let x_477 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
  let x_480 : vec4<f32> = u_xlat2;
  let x_483 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_480.x, x_480.y) * vec2<f32>(x_483.x, x_483.y));
  let x_491 : vec2<f32> = u_xlat18;
  let x_493 : f32 = x_33.x_GlobalMipBias.x;
  let x_494 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_491, x_493);
  u_xlat25 = x_494.w;
  let x_496 : f32 = u_xlat25;
  u_xlat18.x = fract(x_496);
  let x_500 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_500 * 2.0f) + -1.0f);
  let x_505 : f32 = u_xlat25;
  u_xlat25 = (x_505 + 0.9296875f);
  let x_508 : f32 = u_xlat25;
  u_xlat25 = (x_508 * 628.31854248f);
  let x_512 : f32 = u_xlat3.z;
  let x_515 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_512) * x_515) + 1.0f);
  let x_520 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_520);
  let x_523 : f32 = u_xlat25;
  u_xlat4.x = sin(x_523);
  let x_526 : f32 = u_xlat25;
  u_xlat5.x = cos(x_526);
  let x_530 : f32 = u_xlat18.x;
  let x_532 : f32 = u_xlat5.x;
  u_xlat3.x = (x_530 * x_532);
  let x_536 : f32 = u_xlat18.x;
  let x_538 : f32 = u_xlat4.x;
  u_xlat3.y = (x_536 * x_538);
  let x_541 : vec4<f32> = u_xlat1;
  let x_543 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_541.x, x_541.y, x_541.z), vec3<f32>(x_543.x, x_543.y, x_543.z));
  let x_547 : f32 = u_xlat25;
  u_xlatb25 = (x_547 >= 0.0f);
  let x_549 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_549);
  let x_551 : f32 = u_xlat25;
  let x_553 : vec4<f32> = u_xlat3;
  let x_555 : vec3<f32> = (vec3<f32>(x_551, x_551, x_551) * vec3<f32>(x_553.x, x_553.y, x_553.z));
  let x_556 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_555.x, x_555.y, x_555.z, x_556.w);
  let x_558 : vec4<f32> = u_xlat3;
  let x_561 : vec4<f32> = x_33.x_SSAOParams;
  let x_563 : vec3<f32> = (vec3<f32>(x_558.x, x_558.y, x_558.z) * vec3<f32>(x_561.y, x_561.y, x_561.y));
  let x_564 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
  let x_566 : vec4<f32> = u_xlat3;
  let x_571 : vec3<f32> = u_xlat8;
  let x_572 : vec3<f32> = ((vec3<f32>(x_566.x, x_566.y, x_566.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_571);
  let x_573 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_572.x, x_572.y, x_572.z, x_573.w);
  let x_575 : vec4<f32> = u_xlat3;
  let x_579 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_575.y, x_575.y) * vec2<f32>(x_579.x, x_579.y));
  let x_583 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_585 : vec4<f32> = u_xlat3;
  let x_588 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_583.x, x_583.y) * vec2<f32>(x_585.x, x_585.x)) + x_588);
  let x_592 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_594 : vec4<f32> = u_xlat3;
  let x_597 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_592.x, x_592.y) * vec2<f32>(x_594.z, x_594.z)) + x_597);
  let x_600 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_600;
  let x_603 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_603;
  let x_606 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_606;
  let x_608 : vec4<f32> = u_xlat4;
  let x_610 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_608.x, x_608.y, x_608.z), vec3<f32>(x_610.x, x_610.y, x_610.z));
  let x_613 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_613));
  let x_617 : vec2<f32> = u_xlat18;
  let x_618 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_617 * vec2<f32>(x_618.x, x_618.x)) + vec2<f32>(1.0f, 1.0f));
  let x_623 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_623 * vec2<f32>(0.5f, 0.5f));
  let x_626 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_626, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_633 : vec2<f32> = u_xlat18;
  let x_635 : f32 = x_33.x_GlobalMipBias.x;
  let x_636 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_633, x_635);
  u_xlat3.x = x_636.x;
  let x_640 : f32 = x_33.x_ZBufferParams.z;
  let x_642 : f32 = u_xlat3.x;
  let x_645 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_640 * x_642) + x_645);
  let x_649 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_649);
  let x_652 : f32 = u_xlat25;
  let x_655 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_652) + -(x_655));
  let x_658 : f32 = u_xlat25;
  let x_661 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_658) < x_661);
  let x_663 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_663);
  let x_669 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_669);
  let x_673 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_673);
  let x_676 : f32 = u_xlat25;
  let x_678 : f32 = u_xlat3.x;
  u_xlat25 = (x_676 * x_678);
  let x_682 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_682) + 1.0f);
  let x_686 : f32 = u_xlat11.x;
  let x_688 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_686 * x_688);
  let x_692 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_694 : vec2<f32> = u_xlat18;
  let x_698 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_692.x, x_692.y, x_692.z) * vec3<f32>(x_694.x, x_694.x, x_694.x)) + vec3<f32>(x_698.x, x_698.y, x_698.z));
  let x_702 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_704 : f32 = u_xlat26;
  let x_707 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_702.x, x_702.y, x_702.z) * vec3<f32>(x_704, x_704, x_704)) + x_707);
  let x_709 : vec3<f32> = u_xlat11;
  let x_710 : vec4<f32> = u_xlat3;
  let x_713 : vec3<f32> = u_xlat8;
  let x_715 : vec3<f32> = ((x_709 * vec3<f32>(x_710.x, x_710.x, x_710.x)) + -(x_713));
  let x_716 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
  let x_718 : vec4<f32> = u_xlat3;
  let x_720 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_718.x, x_718.y, x_718.z), vec3<f32>(x_720.x, x_720.y, x_720.z));
  let x_724 : f32 = u_xlat0;
  let x_729 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_724) * 0.004f) + x_729);
  let x_733 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_733, 0.0f);
  let x_736 : vec4<f32> = u_xlat3;
  let x_738 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_736.x, x_736.y, x_736.z), vec3<f32>(x_738.x, x_738.y, x_738.z));
  let x_741 : f32 = u_xlat26;
  u_xlat26 = (x_741 + 0.0001f);
  let x_744 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_744);
  let x_746 : f32 = u_xlat26;
  let x_748 : f32 = u_xlat18.x;
  u_xlat18.x = (x_746 * x_748);
  let x_751 : vec4<f32> = u_xlat2;
  let x_754 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y) * vec4<f32>(x_754.x, x_754.y, x_754.x, x_754.y)) + vec4<f32>(0.25f, 0.25f, 0.5f, 0.5f));
  let x_763 : vec4<f32> = u_xlat3;
  let x_766 : f32 = x_33.x_GlobalMipBias.x;
  let x_767 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_763.x, x_763.y), x_766);
  u_xlat26 = x_767.w;
  let x_769 : f32 = u_xlat26;
  let x_774 : vec2<f32> = (vec2<f32>(x_769, x_769) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_775 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_774.x, x_774.y, x_775.z, x_775.w);
  let x_778 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_778);
  let x_780 : f32 = u_xlat26;
  u_xlat5.z = ((x_780 * 2.0f) + -1.0f);
  let x_785 : f32 = u_xlat3.y;
  u_xlat26 = (x_785 * 628.31854248f);
  let x_788 : f32 = u_xlat5.z;
  let x_791 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_788) * x_791) + 1.0f);
  let x_796 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_796);
  let x_800 : f32 = u_xlat26;
  u_xlat6 = sin(x_800);
  let x_803 : f32 = u_xlat26;
  u_xlat7 = cos(x_803);
  let x_806 : f32 = u_xlat3.x;
  let x_807 : f32 = u_xlat7;
  u_xlat5.x = (x_806 * x_807);
  let x_811 : f32 = u_xlat3.x;
  let x_812 : f32 = u_xlat6;
  u_xlat5.y = (x_811 * x_812);
  let x_815 : vec4<f32> = u_xlat1;
  let x_817 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_815.x, x_815.y, x_815.z), x_817);
  let x_819 : f32 = u_xlat26;
  u_xlatb26 = (x_819 >= 0.0f);
  let x_821 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_821);
  let x_823 : f32 = u_xlat26;
  let x_825 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_823, x_823, x_823) * x_825);
  let x_827 : vec3<f32> = u_xlat5;
  let x_829 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_827 * vec3<f32>(x_829.y, x_829.y, x_829.y));
  let x_832 : vec3<f32> = u_xlat5;
  let x_836 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_832 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_836);
  let x_838 : vec3<f32> = u_xlat5;
  let x_841 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_843 : vec2<f32> = (vec2<f32>(x_838.y, x_838.y) * vec2<f32>(x_841.x, x_841.y));
  let x_844 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_843.x, x_843.y, x_844.z, x_844.w);
  let x_847 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_849 : vec3<f32> = u_xlat5;
  let x_852 : vec4<f32> = u_xlat3;
  let x_854 : vec2<f32> = ((vec2<f32>(x_847.x, x_847.y) * vec2<f32>(x_849.x, x_849.x)) + vec2<f32>(x_852.x, x_852.y));
  let x_855 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_854.x, x_854.y, x_855.z, x_855.w);
  let x_858 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_860 : vec3<f32> = u_xlat5;
  let x_863 : vec4<f32> = u_xlat3;
  let x_865 : vec2<f32> = ((vec2<f32>(x_858.x, x_858.y) * vec2<f32>(x_860.z, x_860.z)) + vec2<f32>(x_863.x, x_863.y));
  let x_866 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_865.x, x_865.y, x_866.z, x_866.w);
  let x_868 : vec4<f32> = u_xlat4;
  let x_870 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_868.x, x_868.y, x_868.z), x_870);
  let x_873 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_873));
  let x_876 : vec4<f32> = u_xlat3;
  let x_878 : f32 = u_xlat28;
  let x_881 : vec2<f32> = ((vec2<f32>(x_876.x, x_876.y) * vec2<f32>(x_878, x_878)) + vec2<f32>(1.0f, 1.0f));
  let x_882 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_881.x, x_881.y, x_882.z, x_882.w);
  let x_884 : vec4<f32> = u_xlat3;
  let x_886 : vec2<f32> = (vec2<f32>(x_884.x, x_884.y) * vec2<f32>(0.5f, 0.5f));
  let x_887 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_886.x, x_886.y, x_887.z, x_887.w);
  let x_889 : vec4<f32> = u_xlat3;
  let x_893 : vec2<f32> = clamp(vec2<f32>(x_889.x, x_889.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_894 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
  let x_899 : vec4<f32> = u_xlat3;
  let x_902 : f32 = x_33.x_GlobalMipBias.x;
  let x_903 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_899.x, x_899.y), x_902);
  u_xlat28 = x_903.x;
  let x_906 : f32 = x_33.x_ZBufferParams.z;
  let x_907 : f32 = u_xlat28;
  let x_910 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_906 * x_907) + x_910);
  let x_914 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_914);
  let x_917 : f32 = u_xlat26;
  let x_920 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_917) + -(x_920));
  let x_923 : f32 = u_xlat26;
  let x_926 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_923) < x_926);
  let x_928 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_928);
  let x_931 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_931);
  let x_933 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_933);
  let x_935 : f32 = u_xlat26;
  let x_936 : f32 = u_xlat28;
  u_xlat26 = (x_935 * x_936);
  let x_939 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_939) + 1.0f);
  let x_944 : f32 = u_xlat5.x;
  let x_946 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_944 * x_946);
  let x_949 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_951 : vec4<f32> = u_xlat3;
  let x_955 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_949.x, x_949.y, x_949.z) * vec3<f32>(x_951.x, x_951.x, x_951.x)) + vec3<f32>(x_955.x, x_955.y, x_955.z));
  let x_959 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_961 : vec3<f32> = u_xlat11;
  let x_964 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_959.x, x_959.y, x_959.z) * vec3<f32>(x_961.x, x_961.x, x_961.x)) + x_964);
  let x_966 : vec3<f32> = u_xlat5;
  let x_967 : f32 = u_xlat28;
  let x_970 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_966 * vec3<f32>(x_967, x_967, x_967)) + -(x_970));
  let x_973 : vec3<f32> = u_xlat5;
  let x_974 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(x_973, vec3<f32>(x_974.x, x_974.y, x_974.z));
  let x_978 : f32 = u_xlat0;
  let x_982 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_978) * 0.004f) + x_982);
  let x_986 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_986, 0.0f);
  let x_989 : vec3<f32> = u_xlat5;
  let x_990 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_989, x_990);
  let x_994 : f32 = u_xlat11.x;
  u_xlat11.x = (x_994 + 0.0001f);
  let x_998 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_998);
  let x_1002 : f32 = u_xlat11.x;
  let x_1004 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1002 * x_1004);
  let x_1007 : f32 = u_xlat26;
  let x_1009 : f32 = u_xlat3.x;
  u_xlat26 = (x_1007 * x_1009);
  let x_1012 : f32 = u_xlat18.x;
  let x_1013 : f32 = u_xlat25;
  let x_1015 : f32 = u_xlat26;
  u_xlat25 = ((x_1012 * x_1013) + x_1015);
  let x_1020 : vec4<f32> = u_xlat3;
  let x_1023 : f32 = x_33.x_GlobalMipBias.x;
  let x_1024 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1020.z, x_1020.w), x_1023);
  u_xlat18.x = x_1024.w;
  let x_1027 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1027.x, x_1027.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1034 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1034);
  let x_1038 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1038 * 2.0f) + -1.0f);
  let x_1043 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1043 * 628.31854248f);
  let x_1047 : f32 = u_xlat3.z;
  let x_1050 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1047) * x_1050) + 1.0f);
  let x_1053 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1053);
  let x_1056 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1056);
  let x_1060 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1060);
  let x_1062 : f32 = u_xlat26;
  let x_1063 : f32 = u_xlat6;
  u_xlat3.x = (x_1062 * x_1063);
  let x_1066 : f32 = u_xlat26;
  let x_1068 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1066 * x_1068);
  let x_1071 : vec4<f32> = u_xlat1;
  let x_1073 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_1071.x, x_1071.y, x_1071.z), vec3<f32>(x_1073.x, x_1073.y, x_1073.z));
  let x_1079 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1079 >= 0.0f);
  let x_1081 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1081);
  let x_1084 : vec2<f32> = u_xlat18;
  let x_1086 : vec4<f32> = u_xlat3;
  let x_1088 : vec3<f32> = (vec3<f32>(x_1084.x, x_1084.x, x_1084.x) * vec3<f32>(x_1086.x, x_1086.y, x_1086.z));
  let x_1089 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1088.x, x_1088.y, x_1088.z, x_1089.w);
  let x_1091 : vec4<f32> = u_xlat3;
  let x_1094 : vec4<f32> = x_33.x_SSAOParams;
  let x_1096 : vec3<f32> = (vec3<f32>(x_1091.x, x_1091.y, x_1091.z) * vec3<f32>(x_1094.y, x_1094.y, x_1094.y));
  let x_1097 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1096.x, x_1096.y, x_1096.z, x_1097.w);
  let x_1099 : vec4<f32> = u_xlat3;
  let x_1104 : vec3<f32> = u_xlat8;
  let x_1105 : vec3<f32> = ((vec3<f32>(x_1099.x, x_1099.y, x_1099.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1104);
  let x_1106 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1105.x, x_1105.y, x_1105.z, x_1106.w);
  let x_1108 : vec4<f32> = u_xlat3;
  let x_1111 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1108.y, x_1108.y) * vec2<f32>(x_1111.x, x_1111.y));
  let x_1115 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1117 : vec4<f32> = u_xlat3;
  let x_1120 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1115.x, x_1115.y) * vec2<f32>(x_1117.x, x_1117.x)) + x_1120);
  let x_1123 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1125 : vec4<f32> = u_xlat3;
  let x_1128 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1123.x, x_1123.y) * vec2<f32>(x_1125.z, x_1125.z)) + x_1128);
  let x_1130 : vec4<f32> = u_xlat4;
  let x_1132 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1130.x, x_1130.y, x_1130.z), vec3<f32>(x_1132.x, x_1132.y, x_1132.z));
  let x_1137 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1137));
  let x_1141 : vec2<f32> = u_xlat18;
  let x_1142 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1141 * vec2<f32>(x_1142.x, x_1142.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1146 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1146 * vec2<f32>(0.5f, 0.5f));
  let x_1148 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1148, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1155 : vec2<f32> = u_xlat18;
  let x_1157 : f32 = x_33.x_GlobalMipBias.x;
  let x_1158 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1155, x_1157);
  u_xlat11.x = x_1158.x;
  let x_1163 : f32 = x_33.x_ZBufferParams.z;
  let x_1165 : f32 = u_xlat11.x;
  let x_1168 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1163 * x_1165) + x_1168);
  let x_1170 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1170);
  let x_1172 : f32 = u_xlat19;
  let x_1175 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1172) + -(x_1175));
  let x_1180 : f32 = u_xlat3.x;
  let x_1183 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1180) < x_1183);
  let x_1187 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1187);
  let x_1191 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1191);
  let x_1195 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1195);
  let x_1199 : f32 = u_xlat3.y;
  let x_1201 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1199 * x_1201);
  let x_1205 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1205) + 1.0f);
  let x_1208 : f32 = u_xlat19;
  let x_1210 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1208 * x_1210);
  let x_1214 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1216 : vec2<f32> = u_xlat18;
  let x_1220 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1214.x, x_1214.y, x_1214.z) * vec3<f32>(x_1216.x, x_1216.x, x_1216.x)) + vec3<f32>(x_1220.x, x_1220.y, x_1220.z));
  let x_1224 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1226 : f32 = u_xlat26;
  let x_1229 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1224.x, x_1224.y, x_1224.z) * vec3<f32>(x_1226, x_1226, x_1226)) + x_1229);
  let x_1231 : vec3<f32> = u_xlat5;
  let x_1232 : vec3<f32> = u_xlat11;
  let x_1235 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1231 * vec3<f32>(x_1232.x, x_1232.x, x_1232.x)) + -(x_1235));
  let x_1238 : vec3<f32> = u_xlat11;
  let x_1239 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1238, vec3<f32>(x_1239.x, x_1239.y, x_1239.z));
  let x_1243 : f32 = u_xlat0;
  let x_1247 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1243) * 0.004f) + x_1247);
  let x_1251 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1251, 0.0f);
  let x_1254 : vec3<f32> = u_xlat11;
  let x_1255 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1254, x_1255);
  let x_1257 : f32 = u_xlat26;
  u_xlat26 = (x_1257 + 0.0001f);
  let x_1259 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1259);
  let x_1261 : f32 = u_xlat26;
  let x_1263 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1261 * x_1263);
  let x_1267 : f32 = u_xlat18.x;
  let x_1269 : f32 = u_xlat3.x;
  let x_1271 : f32 = u_xlat25;
  u_xlat25 = ((x_1267 * x_1269) + x_1271);
  let x_1273 : vec4<f32> = u_xlat2;
  let x_1276 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_1281 : vec2<f32> = ((vec2<f32>(x_1273.x, x_1273.y) * vec2<f32>(x_1276.x, x_1276.y)) + vec2<f32>(0.75f, 0.75f));
  let x_1282 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1281.x, x_1281.y, x_1282.z, x_1282.w);
  let x_1287 : vec4<f32> = u_xlat2;
  let x_1290 : f32 = x_33.x_GlobalMipBias.x;
  let x_1291 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1287.x, x_1287.y), x_1290);
  u_xlat2.x = x_1291.w;
  let x_1294 : vec4<f32> = u_xlat2;
  let x_1299 : vec2<f32> = (vec2<f32>(x_1294.x, x_1294.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1300 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1299.x, x_1299.y, x_1300.z, x_1300.w);
  let x_1303 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1303);
  let x_1307 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_1307 * 2.0f) + -1.0f);
  let x_1312 : f32 = u_xlat2.y;
  u_xlat2.x = (x_1312 * 628.31854248f);
  let x_1316 : f32 = u_xlat3.z;
  let x_1319 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_1316) * x_1319) + 1.0f);
  let x_1324 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_1324);
  let x_1328 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_1328);
  let x_1332 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_1332);
  let x_1336 : f32 = u_xlat10.x;
  let x_1338 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1336 * x_1338);
  let x_1342 : f32 = u_xlat2.x;
  let x_1344 : f32 = u_xlat10.x;
  u_xlat3.y = (x_1342 * x_1344);
  let x_1347 : vec4<f32> = u_xlat1;
  let x_1349 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(vec3<f32>(x_1347.x, x_1347.y, x_1347.z), vec3<f32>(x_1349.x, x_1349.y, x_1349.z));
  let x_1356 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_1356 >= 0.0f);
  let x_1360 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_1360);
  let x_1363 : vec4<f32> = u_xlat2;
  let x_1365 : vec4<f32> = u_xlat3;
  let x_1367 : vec3<f32> = (vec3<f32>(x_1363.x, x_1363.x, x_1363.x) * vec3<f32>(x_1365.x, x_1365.y, x_1365.z));
  let x_1368 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1367.x, x_1367.y, x_1367.z, x_1368.w);
  let x_1370 : vec4<f32> = u_xlat2;
  let x_1373 : vec4<f32> = x_33.x_SSAOParams;
  let x_1375 : vec3<f32> = (vec3<f32>(x_1370.x, x_1370.y, x_1370.z) * vec3<f32>(x_1373.y, x_1373.y, x_1373.y));
  let x_1376 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1375.x, x_1375.y, x_1375.z, x_1376.w);
  let x_1378 : vec4<f32> = u_xlat2;
  let x_1383 : vec3<f32> = u_xlat8;
  let x_1384 : vec3<f32> = ((vec3<f32>(x_1378.x, x_1378.y, x_1378.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_1383);
  let x_1385 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1384.x, x_1384.y, x_1384.z, x_1385.w);
  let x_1387 : vec4<f32> = u_xlat2;
  let x_1390 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1392 : vec2<f32> = (vec2<f32>(x_1387.y, x_1387.y) * vec2<f32>(x_1390.x, x_1390.y));
  let x_1393 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1392.x, x_1392.y, x_1393.z, x_1393.w);
  let x_1396 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1398 : vec4<f32> = u_xlat2;
  let x_1401 : vec4<f32> = u_xlat3;
  let x_1403 : vec2<f32> = ((vec2<f32>(x_1396.x, x_1396.y) * vec2<f32>(x_1398.x, x_1398.x)) + vec2<f32>(x_1401.x, x_1401.y));
  let x_1404 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1403.x, x_1403.y, x_1404.z, x_1404.w);
  let x_1407 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1409 : vec4<f32> = u_xlat2;
  let x_1412 : vec4<f32> = u_xlat3;
  let x_1414 : vec2<f32> = ((vec2<f32>(x_1407.x, x_1407.y) * vec2<f32>(x_1409.z, x_1409.z)) + vec2<f32>(x_1412.x, x_1412.y));
  let x_1415 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1414.x, x_1414.y, x_1415.z, x_1415.w);
  let x_1417 : vec4<f32> = u_xlat4;
  let x_1419 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_1417.x, x_1417.y, x_1417.z), vec3<f32>(x_1419.x, x_1419.y, x_1419.z));
  let x_1424 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_1424));
  let x_1428 : vec4<f32> = u_xlat3;
  let x_1430 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_1428.x, x_1428.y) * vec2<f32>(x_1430.x, x_1430.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1434 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_1434 * vec2<f32>(0.5f, 0.5f));
  let x_1436 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_1436, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1443 : vec2<f32> = u_xlat10;
  let x_1445 : f32 = x_33.x_GlobalMipBias.x;
  let x_1446 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1443, x_1445);
  u_xlat26 = x_1446.x;
  let x_1449 : f32 = x_33.x_ZBufferParams.z;
  let x_1450 : f32 = u_xlat26;
  let x_1453 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_1449 * x_1450) + x_1453);
  let x_1457 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1457);
  let x_1461 : f32 = u_xlat2.x;
  let x_1464 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_1461) + -(x_1464));
  let x_1469 : f32 = u_xlat2.x;
  let x_1472 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_1469) < x_1472);
  let x_1475 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_1475);
  let x_1479 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_1479);
  let x_1483 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_1483);
  let x_1487 : f32 = u_xlat2.w;
  let x_1489 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1487 * x_1489);
  let x_1493 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_1493) + 1.0f);
  let x_1498 : f32 = u_xlat3.x;
  let x_1500 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_1498 * x_1500);
  let x_1503 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1505 : vec2<f32> = u_xlat10;
  let x_1509 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1511 : vec3<f32> = ((vec3<f32>(x_1503.x, x_1503.y, x_1503.z) * vec3<f32>(x_1505.x, x_1505.x, x_1505.x)) + vec3<f32>(x_1509.x, x_1509.y, x_1509.z));
  let x_1512 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1511.x, x_1511.y, x_1511.z, x_1512.w);
  let x_1515 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1517 : vec2<f32> = u_xlat18;
  let x_1520 : vec4<f32> = u_xlat3;
  let x_1522 : vec3<f32> = ((vec3<f32>(x_1515.x, x_1515.y, x_1515.z) * vec3<f32>(x_1517.x, x_1517.x, x_1517.x)) + vec3<f32>(x_1520.x, x_1520.y, x_1520.z));
  let x_1523 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1522.x, x_1522.y, x_1522.z, x_1523.w);
  let x_1525 : vec4<f32> = u_xlat3;
  let x_1527 : f32 = u_xlat26;
  let x_1530 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_1525.x, x_1525.y, x_1525.z) * vec3<f32>(x_1527, x_1527, x_1527)) + -(x_1530));
  let x_1533 : vec3<f32> = u_xlat8;
  let x_1534 : vec4<f32> = u_xlat1;
  u_xlat10.x = dot(x_1533, vec3<f32>(x_1534.x, x_1534.y, x_1534.z));
  let x_1538 : f32 = u_xlat0;
  let x_1542 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_1538) * 0.004f) + x_1542);
  let x_1546 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_1546, 0.0f);
  let x_1549 : vec3<f32> = u_xlat8;
  let x_1550 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_1549, x_1550);
  let x_1554 : f32 = u_xlat8.x;
  u_xlat8.x = (x_1554 + 0.0001f);
  let x_1558 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_1558);
  let x_1562 : f32 = u_xlat8.x;
  let x_1564 : f32 = u_xlat10.x;
  u_xlat8.x = (x_1562 * x_1564);
  let x_1568 : f32 = u_xlat8.x;
  let x_1570 : f32 = u_xlat2.x;
  let x_1572 : f32 = u_xlat25;
  u_xlat8.x = ((x_1568 * x_1570) + x_1572);
  let x_1576 : f32 = u_xlat8.x;
  let x_1578 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_1576 * x_1578);
  let x_1582 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_1582);
  let x_1584 : f32 = u_xlat0;
  let x_1586 : f32 = u_xlat16;
  u_xlat0 = ((-(x_1584) * x_1586) + 1.0f);
  let x_1589 : f32 = u_xlat0;
  let x_1590 : f32 = u_xlat0;
  u_xlat0 = (x_1589 * x_1590);
  let x_1593 : f32 = u_xlat8.x;
  let x_1595 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_1593 * x_1595);
  let x_1598 : f32 = u_xlat0;
  let x_1600 : f32 = u_xlat8.x;
  u_xlat0 = (x_1598 * x_1600);
  let x_1602 : f32 = u_xlat0;
  u_xlat0 = (x_1602 * 0.25f);
  let x_1604 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1604, 0.0f, 1.0f);
  let x_1606 : f32 = u_xlat0;
  u_xlat0 = log2(x_1606);
  let x_1608 : f32 = u_xlat0;
  u_xlat0 = (x_1608 * 0.600000024f);
  let x_1611 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1611);
  let x_1615 : vec4<f32> = u_xlat1;
  let x_1619 : vec3<f32> = ((vec3<f32>(x_1615.x, x_1615.y, x_1615.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1620 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1620.x, x_1619.x, x_1619.y, x_1619.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

