struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
}

struct TemporalAAData {
  x_BlitTexture_TexelSize : vec4<f32>,
  x_TaaMotionVectorTex_TexelSize : vec4<f32>,
  x_TaaAccumulationTex_TexelSize : vec4<f32>,
  x_TaaFrameInfluence : f32,
}

@group(0) @binding(1) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_PointClamp : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_26 : PGlobals;

@group(1) @binding(1) var<uniform> x_53 : TemporalAAData;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(5) var sampler_LinearClamp : sampler;

@group(0) @binding(2) var x_TaaMotionVectorTex : texture_2d<f32>;

@group(0) @binding(3) var x_TaaAccumulationTex : texture_2d<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlatb28 : bool;
  var u_xlat2 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlatb42 : bool;
  var x_137 : f32;
  var u_xlat42 : f32;
  var u_xlatb3 : bool;
  var x_173 : vec2<f32>;
  var x_202 : vec2<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlatb45 : bool;
  var x_252 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlatb5 : bool;
  var x_292 : f32;
  var x_304 : f32;
  var x_334 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlatb0 : vec2<bool>;
  var u_xlat6 : vec4<f32>;
  var x_382 : f32;
  var x_397 : f32;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat36 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat12 : vec3<f32>;
  var u_xlat35 : vec2<f32>;
  var u_xlat13 : vec3<f32>;
  var x_1426 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec2<f32> = vs_TEXCOORD0;
  let x_33 : f32 = x_26.x_GlobalMipBias.x;
  let x_35 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, x_23, x_33);
  u_xlat0.x = x_35.x;
  let x_40 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_40) + 1.0f);
  let x_46 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_46, 1.0f);
  let x_56 : vec4<f32> = x_53.x_BlitTexture_TexelSize;
  let x_61 : vec2<f32> = vs_TEXCOORD0;
  u_xlat1 = ((vec4<f32>(x_56.x, x_56.y, x_56.x, x_56.y) * vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)) + vec4<f32>(x_61.x, x_61.y, x_61.x, x_61.y));
  let x_69 : vec4<f32> = u_xlat1;
  let x_72 : f32 = x_26.x_GlobalMipBias.x;
  let x_73 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_69.x, x_69.y), x_72);
  u_xlat14.x = x_73.x;
  let x_77 : f32 = u_xlat14.x;
  u_xlat14.x = (-(x_77) + 1.0f);
  let x_85 : f32 = u_xlat14.x;
  let x_87 : f32 = u_xlat0.x;
  u_xlatb28 = (x_85 < x_87);
  let x_90 : f32 = u_xlat14.x;
  let x_92 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_90, x_92);
  let x_95 : bool = u_xlatb28;
  u_xlat14.x = select(0.0f, 1.0f, x_95);
  let x_100 : vec4<f32> = x_53.x_BlitTexture_TexelSize;
  let x_105 : vec2<f32> = vs_TEXCOORD0;
  u_xlat2 = ((vec4<f32>(x_100.x, x_100.y, x_100.x, x_100.y) * vec4<f32>(0.0f, -1.0f, -1.0f, 0.0f)) + vec4<f32>(x_105.x, x_105.y, x_105.x, x_105.y));
  let x_112 : vec4<f32> = u_xlat2;
  let x_115 : f32 = x_26.x_GlobalMipBias.x;
  let x_116 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_112.x, x_112.y), x_115);
  u_xlat28.x = x_116.x;
  let x_120 : f32 = u_xlat28.x;
  u_xlat28.x = (-(x_120) + 1.0f);
  let x_126 : f32 = u_xlat28.x;
  let x_128 : f32 = u_xlat0.x;
  u_xlatb42 = (x_126 < x_128);
  let x_131 : f32 = u_xlat28.x;
  let x_133 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_131, x_133);
  let x_136 : bool = u_xlatb42;
  if (x_136) {
    x_137 = 0.0f;
  } else {
    let x_142 : f32 = u_xlat14.x;
    x_137 = x_142;
  }
  let x_143 : f32 = x_137;
  u_xlat14.x = x_143;
  let x_145 : bool = u_xlatb42;
  u_xlat14.y = select(0.0f, -1.0f, x_145);
  let x_153 : vec4<f32> = u_xlat2;
  let x_156 : f32 = x_26.x_GlobalMipBias.x;
  let x_157 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_153.z, x_153.w), x_156);
  u_xlat42 = x_157.x;
  let x_159 : f32 = u_xlat42;
  u_xlat42 = (-(x_159) + 1.0f);
  let x_163 : f32 = u_xlat42;
  let x_165 : f32 = u_xlat0.x;
  u_xlatb3 = (x_163 < x_165);
  let x_167 : f32 = u_xlat42;
  let x_169 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_167, x_169);
  let x_172 : bool = u_xlatb3;
  if (x_172) {
    x_173 = vec2<f32>(-1.0f, 0.0f);
  } else {
    let x_178 : vec2<f32> = u_xlat14;
    x_173 = x_178;
  }
  let x_179 : vec2<f32> = x_173;
  u_xlat14 = x_179;
  let x_183 : vec4<f32> = u_xlat1;
  let x_186 : f32 = x_26.x_GlobalMipBias.x;
  let x_187 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_183.z, x_183.w), x_186);
  u_xlat42 = x_187.x;
  let x_189 : f32 = u_xlat42;
  u_xlat42 = (-(x_189) + 1.0f);
  let x_192 : f32 = u_xlat42;
  let x_194 : f32 = u_xlat0.x;
  u_xlatb3 = (x_192 < x_194);
  let x_196 : f32 = u_xlat42;
  let x_198 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_196, x_198);
  let x_201 : bool = u_xlatb3;
  if (x_201) {
    x_202 = vec2<f32>(0.0f, 1.0f);
  } else {
    let x_207 : vec2<f32> = u_xlat14;
    x_202 = x_207;
  }
  let x_208 : vec2<f32> = x_202;
  u_xlat14 = x_208;
  let x_210 : vec2<f32> = vs_TEXCOORD0;
  let x_212 : vec4<f32> = x_53.x_BlitTexture_TexelSize;
  let x_215 : vec2<f32> = (x_210 + -(vec2<f32>(x_212.x, x_212.y)));
  let x_216 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_215.x, x_215.y, x_216.z);
  let x_221 : vec3<f32> = u_xlat3;
  let x_224 : f32 = x_26.x_GlobalMipBias.x;
  let x_225 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_221.x, x_221.y), x_224);
  u_xlat42 = x_225.x;
  let x_232 : vec3<f32> = u_xlat3;
  let x_235 : f32 = x_26.x_GlobalMipBias.x;
  let x_236 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_232.x, x_232.y), x_235);
  u_xlat3 = vec3<f32>(x_236.x, x_236.y, x_236.z);
  let x_238 : f32 = u_xlat42;
  u_xlat42 = (-(x_238) + 1.0f);
  let x_242 : f32 = u_xlat42;
  let x_244 : f32 = u_xlat0.x;
  u_xlatb45 = (x_242 < x_244);
  let x_246 : f32 = u_xlat42;
  let x_248 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_246, x_248);
  let x_251 : bool = u_xlatb45;
  if (x_251) {
    x_252 = -1.0f;
  } else {
    let x_257 : f32 = u_xlat14.x;
    x_252 = x_257;
  }
  let x_258 : f32 = x_252;
  u_xlat14.x = x_258;
  let x_262 : vec4<f32> = x_53.x_BlitTexture_TexelSize;
  let x_266 : vec2<f32> = vs_TEXCOORD0;
  u_xlat4 = ((vec4<f32>(x_262.x, x_262.y, x_262.x, x_262.y) * vec4<f32>(1.0f, -1.0f, -1.0f, 1.0f)) + vec4<f32>(x_266.x, x_266.y, x_266.x, x_266.y));
  let x_272 : vec4<f32> = u_xlat4;
  let x_275 : f32 = x_26.x_GlobalMipBias.x;
  let x_276 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_272.x, x_272.y), x_275);
  u_xlat42 = x_276.x;
  let x_278 : f32 = u_xlat42;
  u_xlat42 = (-(x_278) + 1.0f);
  let x_282 : f32 = u_xlat42;
  let x_284 : f32 = u_xlat0.x;
  u_xlatb5 = (x_282 < x_284);
  let x_286 : f32 = u_xlat42;
  let x_288 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_286, x_288);
  let x_291 : bool = u_xlatb5;
  if (x_291) {
    x_292 = 1.0f;
  } else {
    let x_297 : f32 = u_xlat14.x;
    x_292 = x_297;
  }
  let x_298 : f32 = x_292;
  u_xlat14.x = x_298;
  let x_300 : bool = u_xlatb45;
  let x_301 : bool = u_xlatb5;
  u_xlatb42 = (x_300 | x_301);
  let x_303 : bool = u_xlatb42;
  if (x_303) {
    x_304 = -1.0f;
  } else {
    let x_309 : f32 = u_xlat14.y;
    x_304 = x_309;
  }
  let x_310 : f32 = x_304;
  u_xlat28.x = x_310;
  let x_315 : vec4<f32> = u_xlat4;
  let x_318 : f32 = x_26.x_GlobalMipBias.x;
  let x_319 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_315.z, x_315.w), x_318);
  u_xlat42 = x_319.x;
  let x_321 : f32 = u_xlat42;
  u_xlat42 = (-(x_321) + 1.0f);
  let x_324 : f32 = u_xlat42;
  let x_326 : f32 = u_xlat0.x;
  u_xlatb45 = (x_324 < x_326);
  let x_328 : f32 = u_xlat42;
  let x_330 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_328, x_330);
  let x_333 : bool = u_xlatb45;
  if (x_333) {
    x_334 = -1.0f;
  } else {
    let x_339 : f32 = u_xlat14.x;
    x_334 = x_339;
  }
  let x_340 : f32 = x_334;
  u_xlat14.x = x_340;
  let x_343 : vec2<f32> = vs_TEXCOORD0;
  let x_345 : vec4<f32> = x_53.x_BlitTexture_TexelSize;
  let x_347 : vec2<f32> = (x_343 + vec2<f32>(x_345.x, x_345.y));
  let x_348 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_347.x, x_347.y, x_348.z);
  let x_353 : vec3<f32> = u_xlat5;
  let x_356 : f32 = x_26.x_GlobalMipBias.x;
  let x_357 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_PointClamp, vec2<f32>(x_353.x, x_353.y), x_356);
  u_xlat42 = x_357.x;
  let x_362 : vec3<f32> = u_xlat5;
  let x_365 : f32 = x_26.x_GlobalMipBias.x;
  let x_366 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_362.x, x_362.y), x_365);
  u_xlat5 = vec3<f32>(x_366.x, x_366.y, x_366.z);
  let x_368 : f32 = u_xlat42;
  u_xlat42 = (-(x_368) + 1.0f);
  let x_374 : f32 = u_xlat42;
  let x_376 : f32 = u_xlat0.x;
  u_xlatb0.x = (x_374 < x_376);
  let x_381 : bool = u_xlatb0.x;
  if (x_381) {
    x_382 = 1.0f;
  } else {
    let x_387 : f32 = u_xlat14.x;
    x_382 = x_387;
  }
  let x_388 : f32 = x_382;
  u_xlat6.x = x_388;
  let x_391 : bool = u_xlatb0.x;
  let x_392 : bool = u_xlatb45;
  u_xlatb0.x = (x_391 | x_392);
  let x_396 : bool = u_xlatb0.x;
  if (x_396) {
    x_397 = 1.0f;
  } else {
    let x_402 : f32 = u_xlat28.x;
    x_397 = x_402;
  }
  let x_403 : f32 = x_397;
  u_xlat6.y = x_403;
  let x_407 : vec4<f32> = x_53.x_TaaMotionVectorTex_TexelSize;
  let x_409 : vec4<f32> = u_xlat6;
  let x_412 : vec2<f32> = vs_TEXCOORD0;
  let x_413 : vec2<f32> = ((vec2<f32>(x_407.x, x_407.y) * vec2<f32>(x_409.x, x_409.y)) + x_412);
  let x_414 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_413.x, x_413.y, x_414.z);
  let x_420 : vec3<f32> = u_xlat0;
  let x_423 : f32 = x_26.x_GlobalMipBias.x;
  let x_424 : vec4<f32> = textureSampleBias(x_TaaMotionVectorTex, sampler_LinearClamp, vec2<f32>(x_420.x, x_420.y), x_423);
  let x_425 : vec2<f32> = vec2<f32>(x_424.x, x_424.y);
  let x_426 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_425.x, x_425.y, x_426.z);
  let x_428 : vec3<f32> = u_xlat0;
  let x_431 : vec2<f32> = vs_TEXCOORD0;
  u_xlat28 = (-(vec2<f32>(x_428.x, x_428.y)) + x_431);
  let x_433 : vec2<f32> = u_xlat28;
  let x_436 : vec4<f32> = x_53.x_TaaAccumulationTex_TexelSize;
  let x_441 : vec2<f32> = ((x_433 * vec2<f32>(x_436.z, x_436.w)) + vec2<f32>(-0.5f, -0.5f));
  let x_442 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_441.x, x_441.y, x_442.z, x_442.w);
  let x_444 : vec4<f32> = u_xlat6;
  let x_446 : vec2<f32> = floor(vec2<f32>(x_444.x, x_444.y));
  let x_447 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
  let x_450 : vec4<f32> = u_xlat6;
  u_xlat7 = (vec4<f32>(x_450.x, x_450.y, x_450.x, x_450.y) + vec4<f32>(0.5f, 0.5f, -0.5f, -0.5f));
  let x_455 : vec4<f32> = u_xlat6;
  let x_459 : vec2<f32> = (vec2<f32>(x_455.x, x_455.y) + vec2<f32>(2.5f, 2.5f));
  let x_460 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_459.x, x_459.y, x_460.z, x_460.w);
  let x_462 : vec4<f32> = u_xlat6;
  let x_465 : vec4<f32> = x_53.x_TaaAccumulationTex_TexelSize;
  let x_467 : vec2<f32> = (vec2<f32>(x_462.x, x_462.y) * vec2<f32>(x_465.x, x_465.y));
  let x_468 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
  let x_470 : vec2<f32> = u_xlat28;
  let x_472 : vec4<f32> = x_53.x_TaaAccumulationTex_TexelSize;
  let x_475 : vec4<f32> = u_xlat7;
  u_xlat28 = ((x_470 * vec2<f32>(x_472.z, x_472.w)) + -(vec2<f32>(x_475.x, x_475.y)));
  let x_480 : vec2<f32> = u_xlat28;
  let x_481 : vec2<f32> = u_xlat28;
  let x_482 : vec2<f32> = (x_480 * x_481);
  let x_483 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_482.x, x_482.y, x_483.z);
  let x_486 : vec2<f32> = u_xlat28;
  let x_488 : vec3<f32> = u_xlat8;
  u_xlat9 = (vec4<f32>(x_486.x, x_486.y, x_486.x, x_486.y) * vec4<f32>(x_488.x, x_488.y, x_488.x, x_488.y));
  let x_492 : vec4<f32> = u_xlat9;
  let x_495 : vec3<f32> = u_xlat8;
  u_xlat36 = ((vec2<f32>(x_492.w, x_492.z) * vec2<f32>(-0.5f, -0.5f)) + vec2<f32>(x_495.y, x_495.x));
  let x_498 : vec2<f32> = u_xlat28;
  let x_503 : vec2<f32> = u_xlat36;
  u_xlat36 = ((-(vec2<f32>(x_498.y, x_498.x)) * vec2<f32>(0.5f, 0.5f)) + x_503);
  let x_505 : vec4<f32> = u_xlat9;
  let x_509 : vec2<f32> = (vec2<f32>(x_505.x, x_505.y) * vec2<f32>(-1.5f, -1.5f));
  let x_510 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_509.x, x_509.y, x_510.z, x_510.w);
  let x_512 : vec3<f32> = u_xlat8;
  let x_517 : vec4<f32> = u_xlat9;
  let x_519 : vec2<f32> = ((vec2<f32>(x_512.x, x_512.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(x_517.x, x_517.y));
  let x_520 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_519.x, x_519.y, x_520.z, x_520.w);
  let x_523 : vec3<f32> = u_xlat8;
  u_xlat10 = (vec4<f32>(x_523.x, x_523.y, x_523.x, x_523.y) * vec4<f32>(2.5f, 2.5f, 0.5f, 0.5f));
  let x_527 : vec2<f32> = u_xlat28;
  let x_529 : vec4<f32> = u_xlat9;
  u_xlat28 = ((x_527 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(x_529.x, x_529.y));
  let x_532 : vec4<f32> = u_xlat9;
  let x_537 : vec4<f32> = u_xlat10;
  let x_540 : vec2<f32> = ((vec2<f32>(x_532.w, x_532.z) * vec2<f32>(1.5f, 1.5f)) + -(vec2<f32>(x_537.y, x_537.x)));
  let x_541 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_540.x, x_540.y, x_541.z);
  let x_543 : vec4<f32> = u_xlat9;
  let x_546 : vec4<f32> = u_xlat10;
  let x_549 : vec2<f32> = ((vec2<f32>(x_543.z, x_543.w) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_546.z, x_546.w)));
  let x_550 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_549.x, x_549.y, x_550.z, x_550.w);
  let x_552 : vec3<f32> = u_xlat8;
  let x_555 : vec2<f32> = (vec2<f32>(x_552.x, x_552.y) + vec2<f32>(1.0f, 1.0f));
  let x_556 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_555.x, x_555.y, x_556.z);
  let x_558 : vec2<f32> = u_xlat28;
  let x_560 : vec3<f32> = u_xlat8;
  let x_562 : vec2<f32> = (vec2<f32>(x_558.y, x_558.x) + vec2<f32>(x_560.x, x_560.y));
  let x_563 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_562.x, x_562.y, x_563.z);
  let x_565 : vec2<f32> = u_xlat28;
  let x_566 : vec3<f32> = u_xlat8;
  u_xlat28 = (x_565 / vec2<f32>(x_566.y, x_566.x));
  let x_569 : vec2<f32> = u_xlat28;
  let x_570 : vec4<f32> = u_xlat7;
  u_xlat28 = (x_569 + vec2<f32>(x_570.x, x_570.y));
  let x_573 : vec4<f32> = u_xlat7;
  let x_576 : vec4<f32> = x_53.x_TaaAccumulationTex_TexelSize;
  let x_578 : vec2<f32> = (vec2<f32>(x_573.z, x_573.w) * vec2<f32>(x_576.x, x_576.y));
  let x_579 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_579.x, x_579.y, x_578.x, x_578.y);
  let x_581 : vec2<f32> = u_xlat28;
  let x_583 : vec4<f32> = x_53.x_TaaAccumulationTex_TexelSize;
  let x_585 : vec2<f32> = (x_581 * vec2<f32>(x_583.x, x_583.y));
  let x_586 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_585.x, x_585.y, x_586.z, x_586.w);
  let x_588 : vec2<f32> = u_xlat36;
  let x_589 : vec3<f32> = u_xlat8;
  u_xlat28 = (x_588 * vec2<f32>(x_589.y, x_589.x));
  let x_596 : vec4<f32> = u_xlat7;
  let x_599 : f32 = x_26.x_GlobalMipBias.x;
  let x_600 : vec4<f32> = textureSampleBias(x_TaaAccumulationTex, sampler_LinearClamp, vec2<f32>(x_596.z, x_596.y), x_599);
  let x_601 : vec3<f32> = vec3<f32>(x_600.x, x_600.y, x_600.z);
  let x_602 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_601.x, x_601.y, x_601.z, x_602.w);
  let x_608 : vec4<f32> = u_xlat7;
  let x_611 : f32 = x_26.x_GlobalMipBias.x;
  let x_612 : vec4<f32> = textureSampleBias(x_TaaAccumulationTex, sampler_LinearClamp, vec2<f32>(x_608.x, x_608.w), x_611);
  u_xlat11 = vec3<f32>(x_612.x, x_612.y, x_612.z);
  let x_615 : vec4<f32> = u_xlat10;
  u_xlat45 = dot(vec2<f32>(x_615.x, x_615.z), vec2<f32>(0.5f, -0.5f));
  let x_620 : f32 = u_xlat45;
  u_xlat12.y = (x_620 + 0.501960814f);
  let x_624 : vec4<f32> = u_xlat10;
  u_xlat45 = dot(vec3<f32>(x_624.x, x_624.z, x_624.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_629 : vec4<f32> = u_xlat10;
  u_xlat12.x = dot(vec3<f32>(x_629.x, x_629.z, x_629.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_635 : f32 = u_xlat45;
  u_xlat12.z = (x_635 + 0.501960814f);
  let x_639 : vec2<f32> = u_xlat28;
  let x_641 : vec3<f32> = u_xlat12;
  let x_642 : vec3<f32> = (vec3<f32>(x_639.y, x_639.y, x_639.y) * x_641);
  let x_643 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_642.x, x_642.y, x_642.z, x_643.w);
  let x_645 : vec3<f32> = u_xlat11;
  u_xlat45 = dot(vec2<f32>(x_645.x, x_645.z), vec2<f32>(0.5f, -0.5f));
  let x_648 : f32 = u_xlat45;
  u_xlat12.y = (x_648 + 0.501960814f);
  let x_651 : vec3<f32> = u_xlat11;
  u_xlat45 = dot(vec3<f32>(x_651.x, x_651.z, x_651.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_654 : vec3<f32> = u_xlat11;
  u_xlat12.x = dot(vec3<f32>(x_654.x, x_654.z, x_654.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_658 : f32 = u_xlat45;
  u_xlat12.z = (x_658 + 0.501960814f);
  let x_661 : vec3<f32> = u_xlat12;
  let x_662 : vec2<f32> = u_xlat28;
  let x_665 : vec4<f32> = u_xlat10;
  let x_667 : vec3<f32> = ((x_661 * vec3<f32>(x_662.x, x_662.x, x_662.x)) + vec3<f32>(x_665.x, x_665.y, x_665.z));
  let x_668 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_667.x, x_667.y, x_667.z, x_668.w);
  let x_671 : f32 = u_xlat28.y;
  let x_673 : f32 = u_xlat28.x;
  u_xlat28.x = (x_671 + x_673);
  let x_677 : f32 = u_xlat8.y;
  let x_679 : f32 = u_xlat8.x;
  let x_682 : f32 = u_xlat28.x;
  u_xlat28.x = ((x_677 * x_679) + x_682);
  let x_686 : f32 = u_xlat9.x;
  let x_688 : f32 = u_xlat8.x;
  let x_691 : f32 = u_xlat28.x;
  u_xlat28.x = ((x_686 * x_688) + x_691);
  let x_695 : f32 = u_xlat9.y;
  let x_697 : f32 = u_xlat8.y;
  let x_700 : f32 = u_xlat28.x;
  u_xlat28.x = ((x_695 * x_697) + x_700);
  let x_704 : vec3<f32> = u_xlat8;
  let x_706 : vec4<f32> = u_xlat9;
  u_xlat35 = (vec2<f32>(x_704.x, x_704.y) * vec2<f32>(x_706.x, x_706.y));
  let x_710 : f32 = u_xlat8.x;
  let x_712 : f32 = u_xlat8.y;
  u_xlat42 = (x_710 * x_712);
  let x_715 : f32 = u_xlat28.x;
  u_xlat28.x = (1.0f / x_715);
  let x_721 : vec4<f32> = u_xlat7;
  let x_724 : f32 = x_26.x_GlobalMipBias.x;
  let x_725 : vec4<f32> = textureSampleBias(x_TaaAccumulationTex, sampler_LinearClamp, vec2<f32>(x_721.x, x_721.y), x_724);
  u_xlat8 = vec3<f32>(x_725.x, x_725.y, x_725.z);
  let x_727 : vec4<f32> = u_xlat7;
  let x_728 : vec2<f32> = vec2<f32>(x_727.y, x_727.x);
  let x_729 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_729.x, x_729.y, x_728.x, x_728.y);
  let x_731 : vec3<f32> = u_xlat8;
  u_xlat45 = dot(vec2<f32>(x_731.x, x_731.z), vec2<f32>(0.5f, -0.5f));
  let x_734 : f32 = u_xlat45;
  u_xlat9.y = (x_734 + 0.501960814f);
  let x_737 : vec3<f32> = u_xlat8;
  u_xlat45 = dot(vec3<f32>(x_737.x, x_737.z, x_737.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_740 : vec3<f32> = u_xlat8;
  u_xlat9.x = dot(vec3<f32>(x_740.x, x_740.z, x_740.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_744 : f32 = u_xlat45;
  u_xlat9.z = (x_744 + 0.501960814f);
  let x_747 : vec4<f32> = u_xlat9;
  let x_749 : f32 = u_xlat42;
  let x_752 : vec4<f32> = u_xlat10;
  u_xlat8 = ((vec3<f32>(x_747.x, x_747.y, x_747.z) * vec3<f32>(x_749, x_749, x_749)) + vec3<f32>(x_752.x, x_752.y, x_752.z));
  let x_758 : vec4<f32> = u_xlat6;
  let x_761 : f32 = x_26.x_GlobalMipBias.x;
  let x_762 : vec4<f32> = textureSampleBias(x_TaaAccumulationTex, sampler_LinearClamp, vec2<f32>(x_758.x, x_758.z), x_761);
  let x_763 : vec3<f32> = vec3<f32>(x_762.x, x_762.y, x_762.z);
  let x_764 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_763.x, x_763.y, x_763.z, x_764.w);
  let x_769 : vec4<f32> = u_xlat6;
  let x_772 : f32 = x_26.x_GlobalMipBias.x;
  let x_773 : vec4<f32> = textureSampleBias(x_TaaAccumulationTex, sampler_LinearClamp, vec2<f32>(x_769.w, x_769.y), x_772);
  let x_774 : vec3<f32> = vec3<f32>(x_773.x, x_773.y, x_773.z);
  let x_775 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_774.x, x_774.y, x_774.z, x_775.w);
  let x_777 : vec4<f32> = u_xlat9;
  u_xlat42 = dot(vec2<f32>(x_777.x, x_777.z), vec2<f32>(0.5f, -0.5f));
  let x_780 : f32 = u_xlat42;
  u_xlat10.y = (x_780 + 0.501960814f);
  let x_783 : vec4<f32> = u_xlat9;
  u_xlat42 = dot(vec3<f32>(x_783.x, x_783.z, x_783.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_786 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(vec3<f32>(x_786.x, x_786.z, x_786.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_790 : f32 = u_xlat42;
  u_xlat10.z = (x_790 + 0.501960814f);
  let x_793 : vec4<f32> = u_xlat10;
  let x_795 : vec2<f32> = u_xlat35;
  let x_798 : vec3<f32> = u_xlat8;
  let x_799 : vec3<f32> = ((vec3<f32>(x_793.x, x_793.y, x_793.z) * vec3<f32>(x_795.x, x_795.x, x_795.x)) + x_798);
  let x_800 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_799.x, x_799.y, x_799.z, x_800.w);
  let x_802 : vec4<f32> = u_xlat6;
  u_xlat42 = dot(vec2<f32>(x_802.x, x_802.z), vec2<f32>(0.5f, -0.5f));
  let x_805 : f32 = u_xlat42;
  u_xlat8.y = (x_805 + 0.501960814f);
  let x_808 : vec4<f32> = u_xlat6;
  u_xlat42 = dot(vec3<f32>(x_808.x, x_808.z, x_808.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_811 : vec4<f32> = u_xlat6;
  u_xlat8.x = dot(vec3<f32>(x_811.x, x_811.z, x_811.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_815 : f32 = u_xlat42;
  u_xlat8.z = (x_815 + 0.501960814f);
  let x_818 : vec3<f32> = u_xlat8;
  let x_819 : vec2<f32> = u_xlat35;
  let x_822 : vec4<f32> = u_xlat7;
  let x_824 : vec3<f32> = ((x_818 * vec3<f32>(x_819.y, x_819.y, x_819.y)) + vec3<f32>(x_822.x, x_822.y, x_822.z));
  let x_825 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_824.x, x_824.y, x_824.z, x_825.w);
  let x_827 : vec2<f32> = u_xlat28;
  let x_829 : vec4<f32> = u_xlat6;
  let x_831 : vec3<f32> = (vec3<f32>(x_827.x, x_827.x, x_827.x) * vec3<f32>(x_829.x, x_829.y, x_829.z));
  let x_832 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_831.x, x_831.y, x_831.z, x_832.w);
  let x_834 : vec3<f32> = u_xlat5;
  u_xlat28.x = dot(vec2<f32>(x_834.x, x_834.z), vec2<f32>(0.5f, -0.5f));
  let x_839 : f32 = u_xlat28.x;
  u_xlat7.y = (x_839 + 0.501960814f);
  let x_842 : vec3<f32> = u_xlat5;
  u_xlat28.x = dot(vec3<f32>(x_842.x, x_842.z, x_842.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_846 : vec3<f32> = u_xlat5;
  u_xlat7.x = dot(vec3<f32>(x_846.x, x_846.z, x_846.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_851 : f32 = u_xlat28.x;
  u_xlat7.z = (x_851 + 0.501960814f);
  let x_854 : vec3<f32> = u_xlat3;
  u_xlat28.x = dot(vec2<f32>(x_854.x, x_854.z), vec2<f32>(0.5f, -0.5f));
  let x_859 : f32 = u_xlat28.x;
  u_xlat5.y = (x_859 + 0.501960814f);
  let x_862 : vec3<f32> = u_xlat3;
  u_xlat28.x = dot(vec3<f32>(x_862.x, x_862.z, x_862.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_866 : vec3<f32> = u_xlat3;
  u_xlat5.x = dot(vec3<f32>(x_866.x, x_866.z, x_866.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_871 : f32 = u_xlat28.x;
  u_xlat5.z = (x_871 + 0.501960814f);
  let x_877 : vec4<f32> = u_xlat1;
  let x_880 : f32 = x_26.x_GlobalMipBias.x;
  let x_881 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_877.z, x_877.w), x_880);
  u_xlat3 = vec3<f32>(x_881.x, x_881.y, x_881.z);
  let x_886 : vec4<f32> = u_xlat1;
  let x_889 : f32 = x_26.x_GlobalMipBias.x;
  let x_890 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_886.x, x_886.y), x_889);
  let x_891 : vec3<f32> = vec3<f32>(x_890.x, x_890.y, x_890.z);
  let x_892 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_891.x, x_891.y, x_891.z, x_892.w);
  let x_894 : vec3<f32> = u_xlat3;
  u_xlat28.x = dot(vec2<f32>(x_894.x, x_894.z), vec2<f32>(0.5f, -0.5f));
  let x_899 : f32 = u_xlat28.x;
  u_xlat8.y = (x_899 + 0.501960814f);
  let x_902 : vec3<f32> = u_xlat3;
  u_xlat28.x = dot(vec3<f32>(x_902.x, x_902.z, x_902.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_906 : vec3<f32> = u_xlat3;
  u_xlat8.x = dot(vec3<f32>(x_906.x, x_906.z, x_906.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_911 : f32 = u_xlat28.x;
  u_xlat8.z = (x_911 + 0.501960814f);
  let x_914 : vec4<f32> = u_xlat1;
  u_xlat28.x = dot(vec2<f32>(x_914.x, x_914.z), vec2<f32>(0.5f, -0.5f));
  let x_919 : f32 = u_xlat28.x;
  u_xlat3.y = (x_919 + 0.501960814f);
  let x_922 : vec4<f32> = u_xlat1;
  u_xlat28.x = dot(vec3<f32>(x_922.x, x_922.z, x_922.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_926 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(vec3<f32>(x_926.x, x_926.z, x_926.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_931 : f32 = u_xlat28.x;
  u_xlat3.z = (x_931 + 0.501960814f);
  let x_937 : vec4<f32> = u_xlat2;
  let x_940 : f32 = x_26.x_GlobalMipBias.x;
  let x_941 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_937.z, x_937.w), x_940);
  let x_942 : vec3<f32> = vec3<f32>(x_941.x, x_941.y, x_941.z);
  let x_943 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_942.x, x_942.y, x_942.z, x_943.w);
  let x_948 : vec4<f32> = u_xlat2;
  let x_951 : f32 = x_26.x_GlobalMipBias.x;
  let x_952 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_948.x, x_948.y), x_951);
  let x_953 : vec3<f32> = vec3<f32>(x_952.x, x_952.y, x_952.z);
  let x_954 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_953.x, x_953.y, x_953.z, x_954.w);
  let x_956 : vec4<f32> = u_xlat1;
  u_xlat28.x = dot(vec2<f32>(x_956.x, x_956.z), vec2<f32>(0.5f, -0.5f));
  let x_961 : f32 = u_xlat28.x;
  u_xlat9.y = (x_961 + 0.501960814f);
  let x_964 : vec4<f32> = u_xlat1;
  u_xlat28.x = dot(vec3<f32>(x_964.x, x_964.z, x_964.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_968 : vec4<f32> = u_xlat1;
  u_xlat9.x = dot(vec3<f32>(x_968.x, x_968.z, x_968.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_973 : f32 = u_xlat28.x;
  u_xlat9.z = (x_973 + 0.501960814f);
  let x_976 : vec4<f32> = u_xlat2;
  u_xlat28.x = dot(vec2<f32>(x_976.x, x_976.z), vec2<f32>(0.5f, -0.5f));
  let x_981 : f32 = u_xlat28.x;
  u_xlat1.y = (x_981 + 0.501960814f);
  let x_984 : vec4<f32> = u_xlat2;
  u_xlat28.x = dot(vec3<f32>(x_984.x, x_984.z, x_984.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_988 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(vec3<f32>(x_988.x, x_988.z, x_988.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_993 : f32 = u_xlat28.x;
  u_xlat1.z = (x_993 + 0.501960814f);
  let x_996 : vec4<f32> = u_xlat1;
  let x_998 : vec4<f32> = u_xlat1;
  let x_1000 : vec3<f32> = (vec3<f32>(x_996.x, x_996.y, x_996.z) * vec3<f32>(x_998.x, x_998.y, x_998.z));
  let x_1001 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1000.x, x_1000.y, x_1000.z, x_1001.w);
  let x_1006 : vec2<f32> = vs_TEXCOORD0;
  let x_1008 : f32 = x_26.x_GlobalMipBias.x;
  let x_1009 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_1006, x_1008);
  let x_1010 : vec3<f32> = vec3<f32>(x_1009.x, x_1009.y, x_1009.z);
  let x_1011 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_1010.x, x_1010.y, x_1010.z, x_1011.w);
  let x_1013 : vec4<f32> = u_xlat10;
  u_xlat28.x = dot(vec2<f32>(x_1013.x, x_1013.z), vec2<f32>(0.5f, -0.5f));
  let x_1018 : f32 = u_xlat28.x;
  u_xlat11.y = (x_1018 + 0.501960814f);
  let x_1021 : vec4<f32> = u_xlat10;
  u_xlat28.x = dot(vec3<f32>(x_1021.x, x_1021.z, x_1021.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_1025 : vec4<f32> = u_xlat10;
  u_xlat11.x = dot(vec3<f32>(x_1025.x, x_1025.z, x_1025.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_1030 : f32 = u_xlat28.x;
  u_xlat11.z = (x_1030 + 0.501960814f);
  let x_1033 : vec3<f32> = u_xlat11;
  let x_1034 : vec3<f32> = u_xlat11;
  let x_1036 : vec4<f32> = u_xlat2;
  let x_1038 : vec3<f32> = ((x_1033 * x_1034) + vec3<f32>(x_1036.x, x_1036.y, x_1036.z));
  let x_1039 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1038.x, x_1038.y, x_1038.z, x_1039.w);
  let x_1041 : vec4<f32> = u_xlat9;
  let x_1043 : vec4<f32> = u_xlat9;
  let x_1046 : vec4<f32> = u_xlat2;
  let x_1048 : vec3<f32> = ((vec3<f32>(x_1041.x, x_1041.y, x_1041.z) * vec3<f32>(x_1043.x, x_1043.y, x_1043.z)) + vec3<f32>(x_1046.x, x_1046.y, x_1046.z));
  let x_1049 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1048.x, x_1048.y, x_1048.z, x_1049.w);
  let x_1051 : vec3<f32> = u_xlat3;
  let x_1052 : vec3<f32> = u_xlat3;
  let x_1054 : vec4<f32> = u_xlat2;
  let x_1056 : vec3<f32> = ((x_1051 * x_1052) + vec3<f32>(x_1054.x, x_1054.y, x_1054.z));
  let x_1057 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1056.x, x_1056.y, x_1056.z, x_1057.w);
  let x_1059 : vec3<f32> = u_xlat8;
  let x_1060 : vec3<f32> = u_xlat8;
  let x_1062 : vec4<f32> = u_xlat2;
  let x_1064 : vec3<f32> = ((x_1059 * x_1060) + vec3<f32>(x_1062.x, x_1062.y, x_1062.z));
  let x_1065 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1064.x, x_1064.y, x_1064.z, x_1065.w);
  let x_1067 : vec3<f32> = u_xlat5;
  let x_1068 : vec3<f32> = u_xlat5;
  let x_1070 : vec4<f32> = u_xlat2;
  let x_1072 : vec3<f32> = ((x_1067 * x_1068) + vec3<f32>(x_1070.x, x_1070.y, x_1070.z));
  let x_1073 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1072.x, x_1072.y, x_1072.z, x_1073.w);
  let x_1078 : vec4<f32> = u_xlat4;
  let x_1081 : f32 = x_26.x_GlobalMipBias.x;
  let x_1082 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_1078.x, x_1078.y), x_1081);
  let x_1083 : vec3<f32> = vec3<f32>(x_1082.x, x_1082.y, x_1082.z);
  let x_1084 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_1083.x, x_1083.y, x_1083.z, x_1084.w);
  let x_1089 : vec4<f32> = u_xlat4;
  let x_1092 : f32 = x_26.x_GlobalMipBias.x;
  let x_1093 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_1089.z, x_1089.w), x_1092);
  let x_1094 : vec3<f32> = vec3<f32>(x_1093.x, x_1093.y, x_1093.z);
  let x_1095 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1095.w);
  let x_1097 : vec4<f32> = u_xlat10;
  u_xlat28.x = dot(vec2<f32>(x_1097.x, x_1097.z), vec2<f32>(0.5f, -0.5f));
  let x_1102 : f32 = u_xlat28.x;
  u_xlat12.y = (x_1102 + 0.501960814f);
  let x_1105 : vec4<f32> = u_xlat10;
  u_xlat28.x = dot(vec3<f32>(x_1105.x, x_1105.z, x_1105.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_1109 : vec4<f32> = u_xlat10;
  u_xlat12.x = dot(vec3<f32>(x_1109.x, x_1109.z, x_1109.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_1114 : f32 = u_xlat28.x;
  u_xlat12.z = (x_1114 + 0.501960814f);
  let x_1117 : vec3<f32> = u_xlat12;
  let x_1118 : vec3<f32> = u_xlat12;
  let x_1120 : vec4<f32> = u_xlat2;
  let x_1122 : vec3<f32> = ((x_1117 * x_1118) + vec3<f32>(x_1120.x, x_1120.y, x_1120.z));
  let x_1123 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1122.x, x_1122.y, x_1122.z, x_1123.w);
  let x_1125 : vec4<f32> = u_xlat4;
  u_xlat28.x = dot(vec2<f32>(x_1125.x, x_1125.z), vec2<f32>(0.5f, -0.5f));
  let x_1130 : f32 = u_xlat28.x;
  u_xlat10.y = (x_1130 + 0.501960814f);
  let x_1133 : vec4<f32> = u_xlat4;
  u_xlat28.x = dot(vec3<f32>(x_1133.x, x_1133.z, x_1133.y), vec3<f32>(-0.25f, -0.25f, 0.5f));
  let x_1137 : vec4<f32> = u_xlat4;
  u_xlat10.x = dot(vec3<f32>(x_1137.x, x_1137.z, x_1137.y), vec3<f32>(0.25f, 0.25f, 0.5f));
  let x_1142 : f32 = u_xlat28.x;
  u_xlat10.z = (x_1142 + 0.501960814f);
  let x_1145 : vec4<f32> = u_xlat10;
  let x_1147 : vec4<f32> = u_xlat10;
  let x_1150 : vec4<f32> = u_xlat2;
  let x_1152 : vec3<f32> = ((vec3<f32>(x_1145.x, x_1145.y, x_1145.z) * vec3<f32>(x_1147.x, x_1147.y, x_1147.z)) + vec3<f32>(x_1150.x, x_1150.y, x_1150.z));
  let x_1153 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1152.x, x_1152.y, x_1152.z, x_1153.w);
  let x_1155 : vec4<f32> = u_xlat7;
  let x_1157 : vec4<f32> = u_xlat7;
  let x_1160 : vec4<f32> = u_xlat2;
  let x_1162 : vec3<f32> = ((vec3<f32>(x_1155.x, x_1155.y, x_1155.z) * vec3<f32>(x_1157.x, x_1157.y, x_1157.z)) + vec3<f32>(x_1160.x, x_1160.y, x_1160.z));
  let x_1163 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1162.x, x_1162.y, x_1162.z, x_1163.w);
  let x_1165 : vec4<f32> = u_xlat1;
  let x_1167 : vec3<f32> = u_xlat11;
  let x_1168 : vec3<f32> = (vec3<f32>(x_1165.x, x_1165.y, x_1165.z) + x_1167);
  let x_1169 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1168.x, x_1168.y, x_1168.z, x_1169.w);
  let x_1171 : vec4<f32> = u_xlat9;
  let x_1173 : vec4<f32> = u_xlat4;
  let x_1175 : vec3<f32> = (vec3<f32>(x_1171.x, x_1171.y, x_1171.z) + vec3<f32>(x_1173.x, x_1173.y, x_1173.z));
  let x_1176 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1175.x, x_1175.y, x_1175.z, x_1176.w);
  let x_1178 : vec3<f32> = u_xlat3;
  let x_1179 : vec4<f32> = u_xlat4;
  let x_1181 : vec3<f32> = (x_1178 + vec3<f32>(x_1179.x, x_1179.y, x_1179.z));
  let x_1182 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1181.x, x_1181.y, x_1181.z, x_1182.w);
  let x_1184 : vec3<f32> = u_xlat8;
  let x_1185 : vec4<f32> = u_xlat4;
  let x_1187 : vec3<f32> = (x_1184 + vec3<f32>(x_1185.x, x_1185.y, x_1185.z));
  let x_1188 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1187.x, x_1187.y, x_1187.z, x_1188.w);
  let x_1190 : vec3<f32> = u_xlat5;
  let x_1191 : vec4<f32> = u_xlat4;
  let x_1193 : vec3<f32> = (x_1190 + vec3<f32>(x_1191.x, x_1191.y, x_1191.z));
  let x_1194 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1193.x, x_1193.y, x_1193.z, x_1194.w);
  let x_1196 : vec3<f32> = u_xlat12;
  let x_1197 : vec4<f32> = u_xlat4;
  let x_1199 : vec3<f32> = (x_1196 + vec3<f32>(x_1197.x, x_1197.y, x_1197.z));
  let x_1200 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1199.x, x_1199.y, x_1199.z, x_1200.w);
  let x_1202 : vec4<f32> = u_xlat10;
  let x_1204 : vec4<f32> = u_xlat4;
  let x_1206 : vec3<f32> = (vec3<f32>(x_1202.x, x_1202.y, x_1202.z) + vec3<f32>(x_1204.x, x_1204.y, x_1204.z));
  let x_1207 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1206.x, x_1206.y, x_1206.z, x_1207.w);
  let x_1209 : vec4<f32> = u_xlat7;
  let x_1211 : vec4<f32> = u_xlat4;
  let x_1213 : vec3<f32> = (vec3<f32>(x_1209.x, x_1209.y, x_1209.z) + vec3<f32>(x_1211.x, x_1211.y, x_1211.z));
  let x_1214 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1213.x, x_1213.y, x_1213.z, x_1214.w);
  let x_1217 : vec4<f32> = u_xlat4;
  u_xlat13 = (vec3<f32>(x_1217.x, x_1217.y, x_1217.z) * vec3<f32>(0.111111112f, 0.111111112f, 0.111111112f));
  let x_1222 : vec3<f32> = u_xlat13;
  let x_1223 : vec3<f32> = u_xlat13;
  u_xlat13 = (x_1222 * x_1223);
  let x_1225 : vec4<f32> = u_xlat2;
  let x_1228 : vec3<f32> = u_xlat13;
  let x_1230 : vec3<f32> = ((vec3<f32>(x_1225.x, x_1225.y, x_1225.z) * vec3<f32>(0.111111112f, 0.111111112f, 0.111111112f)) + -(x_1228));
  let x_1231 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1230.x, x_1230.y, x_1230.z, x_1231.w);
  let x_1233 : vec4<f32> = u_xlat2;
  let x_1236 : vec3<f32> = sqrt(abs(vec3<f32>(x_1233.x, x_1233.y, x_1233.z)));
  let x_1237 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1236.x, x_1236.y, x_1236.z, x_1237.w);
  let x_1239 : vec4<f32> = u_xlat2;
  let x_1243 : vec3<f32> = (vec3<f32>(x_1239.x, x_1239.y, x_1239.z) * vec3<f32>(0.899999976f, 0.899999976f, 0.899999976f));
  let x_1244 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1243.x, x_1243.y, x_1243.z, x_1244.w);
  let x_1246 : vec4<f32> = u_xlat4;
  let x_1249 : vec4<f32> = u_xlat2;
  u_xlat13 = ((vec3<f32>(x_1246.x, x_1246.y, x_1246.z) * vec3<f32>(0.111111112f, 0.111111112f, 0.111111112f)) + -(vec3<f32>(x_1249.x, x_1249.y, x_1249.z)));
  let x_1253 : vec4<f32> = u_xlat4;
  let x_1256 : vec4<f32> = u_xlat2;
  let x_1258 : vec3<f32> = ((vec3<f32>(x_1253.x, x_1253.y, x_1253.z) * vec3<f32>(0.111111112f, 0.111111112f, 0.111111112f)) + vec3<f32>(x_1256.x, x_1256.y, x_1256.z));
  let x_1259 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1258.x, x_1258.y, x_1258.z, x_1259.w);
  let x_1261 : vec4<f32> = u_xlat1;
  let x_1263 : vec3<f32> = u_xlat11;
  let x_1264 : vec3<f32> = min(vec3<f32>(x_1261.x, x_1261.y, x_1261.z), x_1263);
  let x_1265 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1264.x, x_1264.y, x_1264.z, x_1265.w);
  let x_1267 : vec4<f32> = u_xlat1;
  let x_1269 : vec3<f32> = u_xlat11;
  let x_1270 : vec3<f32> = max(vec3<f32>(x_1267.x, x_1267.y, x_1267.z), x_1269);
  let x_1271 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1270.x, x_1270.y, x_1270.z, x_1271.w);
  let x_1273 : vec4<f32> = u_xlat1;
  let x_1275 : vec4<f32> = u_xlat9;
  let x_1277 : vec3<f32> = max(vec3<f32>(x_1273.x, x_1273.y, x_1273.z), vec3<f32>(x_1275.x, x_1275.y, x_1275.z));
  let x_1278 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1277.x, x_1277.y, x_1277.z, x_1278.w);
  let x_1280 : vec4<f32> = u_xlat4;
  let x_1282 : vec4<f32> = u_xlat9;
  let x_1284 : vec3<f32> = min(vec3<f32>(x_1280.x, x_1280.y, x_1280.z), vec3<f32>(x_1282.x, x_1282.y, x_1282.z));
  let x_1285 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1284.x, x_1284.y, x_1284.z, x_1285.w);
  let x_1287 : vec3<f32> = u_xlat3;
  let x_1288 : vec4<f32> = u_xlat4;
  let x_1290 : vec3<f32> = min(x_1287, vec3<f32>(x_1288.x, x_1288.y, x_1288.z));
  let x_1291 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1290.x, x_1290.y, x_1290.z, x_1291.w);
  let x_1293 : vec4<f32> = u_xlat1;
  let x_1295 : vec3<f32> = u_xlat3;
  let x_1296 : vec3<f32> = max(vec3<f32>(x_1293.x, x_1293.y, x_1293.z), x_1295);
  let x_1297 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1296.x, x_1296.y, x_1296.z, x_1297.w);
  let x_1299 : vec4<f32> = u_xlat1;
  let x_1301 : vec3<f32> = u_xlat8;
  let x_1302 : vec3<f32> = max(vec3<f32>(x_1299.x, x_1299.y, x_1299.z), x_1301);
  let x_1303 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1302.x, x_1302.y, x_1302.z, x_1303.w);
  let x_1305 : vec4<f32> = u_xlat4;
  let x_1307 : vec3<f32> = u_xlat8;
  u_xlat3 = min(vec3<f32>(x_1305.x, x_1305.y, x_1305.z), x_1307);
  let x_1309 : vec3<f32> = u_xlat3;
  let x_1310 : vec3<f32> = u_xlat5;
  u_xlat3 = min(x_1309, x_1310);
  let x_1312 : vec4<f32> = u_xlat1;
  let x_1314 : vec3<f32> = u_xlat5;
  let x_1315 : vec3<f32> = max(vec3<f32>(x_1312.x, x_1312.y, x_1312.z), x_1314);
  let x_1316 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1315.x, x_1315.y, x_1315.z, x_1316.w);
  let x_1318 : vec4<f32> = u_xlat1;
  let x_1320 : vec3<f32> = u_xlat12;
  let x_1321 : vec3<f32> = max(vec3<f32>(x_1318.x, x_1318.y, x_1318.z), x_1320);
  let x_1322 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1321.x, x_1321.y, x_1321.z, x_1322.w);
  let x_1324 : vec3<f32> = u_xlat3;
  let x_1325 : vec3<f32> = u_xlat12;
  u_xlat3 = min(x_1324, x_1325);
  let x_1327 : vec3<f32> = u_xlat3;
  let x_1328 : vec4<f32> = u_xlat10;
  u_xlat3 = min(x_1327, vec3<f32>(x_1328.x, x_1328.y, x_1328.z));
  let x_1331 : vec4<f32> = u_xlat1;
  let x_1333 : vec4<f32> = u_xlat10;
  let x_1335 : vec3<f32> = max(vec3<f32>(x_1331.x, x_1331.y, x_1331.z), vec3<f32>(x_1333.x, x_1333.y, x_1333.z));
  let x_1336 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1335.x, x_1335.y, x_1335.z, x_1336.w);
  let x_1338 : vec4<f32> = u_xlat1;
  let x_1340 : vec4<f32> = u_xlat7;
  let x_1342 : vec3<f32> = max(vec3<f32>(x_1338.x, x_1338.y, x_1338.z), vec3<f32>(x_1340.x, x_1340.y, x_1340.z));
  let x_1343 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1342.x, x_1342.y, x_1342.z, x_1343.w);
  let x_1345 : vec3<f32> = u_xlat3;
  let x_1346 : vec4<f32> = u_xlat7;
  u_xlat3 = min(x_1345, vec3<f32>(x_1346.x, x_1346.y, x_1346.z));
  let x_1349 : vec3<f32> = u_xlat13;
  let x_1350 : vec3<f32> = u_xlat3;
  u_xlat3 = max(x_1349, x_1350);
  let x_1352 : vec3<f32> = u_xlat3;
  let x_1353 : vec4<f32> = u_xlat6;
  u_xlat3 = max(x_1352, vec3<f32>(x_1353.x, x_1353.y, x_1353.z));
  let x_1356 : vec4<f32> = u_xlat2;
  let x_1358 : vec4<f32> = u_xlat1;
  let x_1360 : vec3<f32> = min(vec3<f32>(x_1356.x, x_1356.y, x_1356.z), vec3<f32>(x_1358.x, x_1358.y, x_1358.z));
  let x_1361 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1360.x, x_1360.y, x_1360.z, x_1361.w);
  let x_1363 : vec4<f32> = u_xlat1;
  let x_1365 : vec3<f32> = u_xlat3;
  let x_1366 : vec3<f32> = min(vec3<f32>(x_1363.x, x_1363.y, x_1363.z), x_1365);
  let x_1367 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1366.x, x_1366.y, x_1366.z, x_1367.w);
  let x_1370 : f32 = u_xlat1.x;
  u_xlat28.x = (x_1370 + 1.0f);
  let x_1374 : f32 = u_xlat28.x;
  u_xlat28.x = (1.0f / x_1374);
  let x_1377 : vec2<f32> = u_xlat28;
  let x_1379 : vec4<f32> = u_xlat1;
  let x_1381 : vec3<f32> = (vec3<f32>(x_1377.x, x_1377.x, x_1377.x) * vec3<f32>(x_1379.x, x_1379.y, x_1379.z));
  let x_1382 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1381.x, x_1381.y, x_1381.z, x_1382.w);
  let x_1385 : f32 = u_xlat11.x;
  u_xlat28.x = (x_1385 + 1.0f);
  let x_1389 : f32 = u_xlat28.x;
  u_xlat28.x = (1.0f / x_1389);
  let x_1392 : vec3<f32> = u_xlat11;
  let x_1393 : vec2<f32> = u_xlat28;
  let x_1396 : vec4<f32> = u_xlat1;
  let x_1399 : vec3<f32> = ((x_1392 * vec3<f32>(x_1393.x, x_1393.x, x_1393.x)) + -(vec3<f32>(x_1396.x, x_1396.y, x_1396.z)));
  let x_1400 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1399.x, x_1399.y, x_1399.z, x_1400.w);
  let x_1402 : vec2<f32> = vs_TEXCOORD0;
  u_xlat28 = (x_1402 + vec2<f32>(-0.5f, -0.5f));
  let x_1404 : vec3<f32> = u_xlat0;
  let x_1407 : vec2<f32> = u_xlat28;
  let x_1408 : vec2<f32> = (-(vec2<f32>(x_1404.x, x_1404.y)) + x_1407);
  let x_1409 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_1408.x, x_1408.y, x_1409.z);
  let x_1412 : vec3<f32> = u_xlat0;
  let x_1416 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.0f, 0.0f) < abs(vec4<f32>(x_1412.x, x_1412.y, x_1412.x, x_1412.x)));
  u_xlatb0 = vec2<bool>(x_1416.x, x_1416.y);
  let x_1419 : bool = u_xlatb0.y;
  let x_1421 : bool = u_xlatb0.x;
  u_xlatb0.x = (x_1419 | x_1421);
  let x_1425 : bool = u_xlatb0.x;
  if (x_1425) {
    x_1426 = 1.0f;
  } else {
    let x_1432 : f32 = x_53.x_TaaFrameInfluence;
    x_1426 = x_1432;
  }
  let x_1433 : f32 = x_1426;
  u_xlat0.x = x_1433;
  let x_1435 : vec3<f32> = u_xlat0;
  let x_1437 : vec4<f32> = u_xlat2;
  let x_1440 : vec4<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_1435.x, x_1435.x, x_1435.x) * vec3<f32>(x_1437.x, x_1437.y, x_1437.z)) + vec3<f32>(x_1440.x, x_1440.y, x_1440.z));
  let x_1444 : f32 = u_xlat0.x;
  u_xlat42 = (-(x_1444) + 1.0f);
  let x_1447 : f32 = u_xlat42;
  u_xlat42 = (1.0f / x_1447);
  let x_1449 : vec3<f32> = u_xlat0;
  let x_1451 : f32 = u_xlat42;
  u_xlat14 = ((vec2<f32>(x_1449.z, x_1449.y) * vec2<f32>(x_1451, x_1451)) + vec2<f32>(-0.501960814f, -0.501960814f));
  let x_1458 : f32 = u_xlat0.x;
  let x_1459 : f32 = u_xlat42;
  let x_1462 : f32 = u_xlat14.y;
  u_xlat1.x = ((x_1458 * x_1459) + -(x_1462));
  let x_1466 : vec3<f32> = u_xlat0;
  let x_1468 : f32 = u_xlat42;
  let x_1471 : vec2<f32> = u_xlat14;
  let x_1473 : vec2<f32> = ((vec2<f32>(x_1466.x, x_1466.x) * vec2<f32>(x_1468, x_1468)) + vec2<f32>(x_1471.y, x_1471.x));
  let x_1474 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_1473.x, x_1474.y, x_1473.y);
  let x_1479 : f32 = u_xlat14.x;
  let x_1482 : f32 = u_xlat1.x;
  SV_Target0.z = (-(x_1479) + x_1482);
  let x_1487 : f32 = u_xlat14.x;
  let x_1490 : f32 = u_xlat0.x;
  SV_Target0.x = (-(x_1487) + x_1490);
  let x_1494 : f32 = u_xlat0.z;
  SV_Target0.y = x_1494;
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

