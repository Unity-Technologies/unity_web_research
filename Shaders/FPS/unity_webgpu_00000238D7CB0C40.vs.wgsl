type Arr = array<u32, 1u>;

struct x_HistogramBuffer_type {
  value : Arr,
}

type RTArr = array<x_HistogramBuffer_type>;

struct x_HistogramBuffer {
  x_HistogramBuffer_buf : RTArr,
}

struct VGlobals {
  x_Params : vec4<f32>,
  x_ScaleOffsetRes : vec4<f32>,
}

var<private> u_xlatu0 : u32;

var<private> u_xlatu136 : u32;

@group(0) @binding(2) var<storage, read> x_28 : x_HistogramBuffer;

var<private> u_xlat0 : f32;

var<private> u_xlatu68 : u32;

var<private> u_xlat68 : vec2<f32>;

var<private> u_xlat136 : f32;

var<private> u_xlatu204 : u32;

var<private> u_xlat204 : f32;

var<private> u_xlat1 : vec2<f32>;

var<private> u_xlat69 : vec2<f32>;

var<private> u_xlatu137 : u32;

var<private> u_xlat137 : f32;

var<private> u_xlat205 : f32;

var<private> u_xlatu2 : u32;

var<private> u_xlat2 : vec3<f32>;

var<private> u_xlatu138 : u32;

var<private> u_xlat70 : vec3<f32>;

var<private> u_xlatu3 : u32;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlatu139 : u32;

var<private> u_xlat71 : vec3<f32>;

var<private> u_xlatu4 : u32;

var<private> u_xlat4 : vec3<f32>;

var<private> u_xlatu140 : u32;

var<private> u_xlat72 : vec3<f32>;

var<private> u_xlatu5 : u32;

var<private> u_xlat5 : vec3<f32>;

var<private> u_xlatu141 : u32;

var<private> u_xlat73 : vec3<f32>;

var<private> u_xlatu6 : u32;

var<private> u_xlat6 : vec3<f32>;

var<private> u_xlatu142 : u32;

var<private> u_xlat74 : vec3<f32>;

var<private> u_xlatu7 : u32;

var<private> u_xlat7 : vec3<f32>;

var<private> u_xlatu143 : u32;

var<private> u_xlat75 : vec3<f32>;

var<private> u_xlatu8 : u32;

var<private> u_xlat8 : vec3<f32>;

var<private> u_xlatu144 : u32;

var<private> u_xlat76 : vec3<f32>;

var<private> u_xlatu9 : u32;

var<private> u_xlat9 : vec3<f32>;

var<private> u_xlatu145 : u32;

var<private> u_xlat77 : vec3<f32>;

var<private> u_xlatu10 : u32;

var<private> u_xlat10 : vec3<f32>;

var<private> u_xlatu146 : u32;

var<private> u_xlat78 : vec3<f32>;

var<private> u_xlatu11 : u32;

var<private> u_xlat11 : vec3<f32>;

var<private> u_xlatu147 : u32;

var<private> u_xlat79 : vec3<f32>;

var<private> u_xlatu12 : u32;

var<private> u_xlat12 : vec3<f32>;

var<private> u_xlatu148 : u32;

var<private> u_xlat80 : vec3<f32>;

var<private> u_xlatu13 : u32;

var<private> u_xlat13 : vec3<f32>;

var<private> u_xlatu149 : u32;

var<private> u_xlat81 : vec3<f32>;

var<private> u_xlatu14 : u32;

var<private> u_xlat14 : vec3<f32>;

var<private> u_xlatu150 : u32;

var<private> u_xlat82 : vec3<f32>;

var<private> u_xlatu15 : u32;

var<private> u_xlat15 : vec3<f32>;

var<private> u_xlatu151 : u32;

var<private> u_xlat83 : vec3<f32>;

var<private> u_xlatu16 : u32;

var<private> u_xlat16 : vec3<f32>;

var<private> u_xlatu152 : u32;

var<private> u_xlat84 : vec3<f32>;

var<private> u_xlatu17 : u32;

var<private> u_xlat17 : vec3<f32>;

var<private> u_xlatu153 : u32;

var<private> u_xlat85 : vec3<f32>;

var<private> u_xlatu18 : u32;

var<private> u_xlat18 : vec3<f32>;

var<private> u_xlatu154 : u32;

var<private> u_xlat86 : vec3<f32>;

var<private> u_xlatu19 : u32;

var<private> u_xlat19 : vec3<f32>;

var<private> u_xlatu155 : u32;

var<private> u_xlat87 : vec3<f32>;

var<private> u_xlatu20 : u32;

var<private> u_xlat20 : vec3<f32>;

var<private> u_xlatu156 : u32;

var<private> u_xlat88 : vec3<f32>;

var<private> u_xlatu21 : u32;

var<private> u_xlat21 : vec3<f32>;

var<private> u_xlatu157 : u32;

var<private> u_xlat89 : vec3<f32>;

var<private> u_xlatu22 : u32;

var<private> u_xlat22 : vec3<f32>;

var<private> u_xlatu158 : u32;

var<private> u_xlat90 : vec3<f32>;

var<private> u_xlatu23 : u32;

var<private> u_xlat23 : vec3<f32>;

var<private> u_xlatu159 : u32;

var<private> u_xlat91 : vec3<f32>;

var<private> u_xlatu24 : u32;

var<private> u_xlat24 : vec3<f32>;

var<private> u_xlatu160 : u32;

var<private> u_xlat92 : vec3<f32>;

var<private> u_xlatu25 : u32;

var<private> u_xlat25 : vec3<f32>;

var<private> u_xlatu161 : u32;

var<private> u_xlat93 : vec3<f32>;

var<private> u_xlatu26 : u32;

var<private> u_xlat26 : vec3<f32>;

var<private> u_xlatu162 : u32;

var<private> u_xlat94 : vec3<f32>;

var<private> u_xlatu27 : u32;

var<private> u_xlat27 : vec3<f32>;

var<private> u_xlatu163 : u32;

var<private> u_xlat95 : vec3<f32>;

var<private> u_xlatu28 : u32;

var<private> u_xlat28 : vec3<f32>;

var<private> u_xlatu164 : u32;

var<private> u_xlat96 : vec3<f32>;

var<private> u_xlatu29 : u32;

var<private> u_xlat29 : vec3<f32>;

var<private> u_xlatu165 : u32;

var<private> u_xlat97 : vec3<f32>;

var<private> u_xlatu30 : u32;

var<private> u_xlat30 : vec3<f32>;

var<private> u_xlatu166 : u32;

var<private> u_xlat98 : vec3<f32>;

var<private> u_xlatu31 : u32;

var<private> u_xlat31 : vec3<f32>;

var<private> u_xlatu167 : u32;

var<private> u_xlat99 : vec3<f32>;

var<private> u_xlatu32 : u32;

var<private> u_xlat32 : vec3<f32>;

var<private> u_xlatu168 : u32;

var<private> u_xlat100 : vec3<f32>;

var<private> u_xlatu33 : u32;

var<private> u_xlat33 : vec3<f32>;

var<private> u_xlatu169 : u32;

var<private> u_xlat101 : vec3<f32>;

var<private> u_xlatu34 : u32;

var<private> u_xlat34 : vec3<f32>;

var<private> u_xlatu170 : u32;

var<private> u_xlat102 : vec3<f32>;

var<private> u_xlatu35 : u32;

var<private> u_xlat35 : vec3<f32>;

var<private> u_xlatu171 : u32;

var<private> u_xlat103 : vec3<f32>;

var<private> u_xlatu36 : u32;

var<private> u_xlat36 : vec3<f32>;

var<private> u_xlatu172 : u32;

var<private> u_xlat104 : vec3<f32>;

var<private> u_xlatu37 : u32;

var<private> u_xlat37 : vec3<f32>;

var<private> u_xlatu173 : u32;

var<private> u_xlat105 : vec3<f32>;

var<private> u_xlatu38 : u32;

var<private> u_xlat38 : vec3<f32>;

var<private> u_xlatu174 : u32;

var<private> u_xlat106 : vec3<f32>;

var<private> u_xlatu39 : u32;

var<private> u_xlat39 : vec3<f32>;

var<private> u_xlatu175 : u32;

var<private> u_xlat107 : vec3<f32>;

var<private> u_xlatu40 : u32;

var<private> u_xlat40 : vec3<f32>;

var<private> u_xlatu176 : u32;

var<private> u_xlat108 : vec3<f32>;

var<private> u_xlatu41 : u32;

var<private> u_xlat41 : vec3<f32>;

var<private> u_xlatu177 : u32;

var<private> u_xlat109 : vec3<f32>;

var<private> u_xlatu42 : u32;

var<private> u_xlat42 : vec3<f32>;

var<private> u_xlatu178 : u32;

var<private> u_xlat110 : vec3<f32>;

var<private> u_xlatu43 : u32;

var<private> u_xlat43 : vec3<f32>;

var<private> u_xlatu179 : u32;

var<private> u_xlat111 : vec3<f32>;

var<private> u_xlatu44 : u32;

var<private> u_xlat44 : vec3<f32>;

var<private> u_xlatu180 : u32;

var<private> u_xlat112 : vec3<f32>;

var<private> u_xlatu45 : u32;

var<private> u_xlat45 : vec3<f32>;

var<private> u_xlatu181 : u32;

var<private> u_xlat113 : vec3<f32>;

var<private> u_xlatu46 : u32;

var<private> u_xlat46 : vec3<f32>;

var<private> u_xlatu182 : u32;

var<private> u_xlat114 : vec3<f32>;

var<private> u_xlatu47 : u32;

var<private> u_xlat47 : vec3<f32>;

var<private> u_xlatu183 : u32;

var<private> u_xlat115 : vec3<f32>;

var<private> u_xlatu48 : u32;

var<private> u_xlat48 : vec3<f32>;

var<private> u_xlatu184 : u32;

var<private> u_xlat116 : vec3<f32>;

var<private> u_xlatu49 : u32;

var<private> u_xlat49 : vec3<f32>;

var<private> u_xlatu185 : u32;

var<private> u_xlat117 : vec3<f32>;

var<private> u_xlatu50 : u32;

var<private> u_xlat50 : vec3<f32>;

var<private> u_xlatu186 : u32;

var<private> u_xlat118 : vec3<f32>;

var<private> u_xlatu51 : u32;

var<private> u_xlat51 : vec3<f32>;

var<private> u_xlatu187 : u32;

var<private> u_xlat119 : vec3<f32>;

var<private> u_xlatu52 : u32;

var<private> u_xlat52 : vec3<f32>;

var<private> u_xlatu188 : u32;

var<private> u_xlat120 : vec3<f32>;

var<private> u_xlatu53 : u32;

var<private> u_xlat53 : vec3<f32>;

var<private> u_xlatu189 : u32;

var<private> u_xlat121 : vec3<f32>;

var<private> u_xlatu54 : u32;

var<private> u_xlat54 : vec3<f32>;

var<private> u_xlatu190 : u32;

var<private> u_xlat122 : vec3<f32>;

var<private> u_xlatu55 : u32;

var<private> u_xlat55 : vec3<f32>;

var<private> u_xlatu191 : u32;

var<private> u_xlat123 : vec3<f32>;

var<private> u_xlatu56 : u32;

var<private> u_xlat56 : vec3<f32>;

var<private> u_xlatu192 : u32;

var<private> u_xlat124 : vec3<f32>;

var<private> u_xlatu57 : u32;

var<private> u_xlat57 : vec3<f32>;

var<private> u_xlatu193 : u32;

var<private> u_xlat125 : vec3<f32>;

var<private> u_xlatu58 : u32;

var<private> u_xlat58 : vec3<f32>;

var<private> u_xlatu194 : u32;

var<private> u_xlat126 : vec3<f32>;

var<private> u_xlatu59 : u32;

var<private> u_xlat59 : vec3<f32>;

var<private> u_xlatu195 : u32;

var<private> u_xlat127 : vec3<f32>;

var<private> u_xlatu60 : u32;

var<private> u_xlat60 : vec3<f32>;

var<private> u_xlatu196 : u32;

var<private> u_xlat128 : vec3<f32>;

var<private> u_xlatu61 : u32;

var<private> u_xlat61 : vec3<f32>;

var<private> u_xlatu197 : u32;

var<private> u_xlat129 : vec3<f32>;

var<private> u_xlatu62 : u32;

var<private> u_xlat62 : vec3<f32>;

var<private> u_xlatu198 : u32;

var<private> u_xlat130 : vec3<f32>;

var<private> u_xlatu63 : u32;

var<private> u_xlat63 : vec3<f32>;

var<private> u_xlatu199 : u32;

var<private> u_xlat131 : vec3<f32>;

var<private> u_xlatu64 : u32;

var<private> u_xlat64 : f32;

var<private> u_xlat132 : f32;

var<private> u_xlat200 : f32;

@group(0) @binding(4) var<uniform> x_2547 : VGlobals;

var<private> u_xlat65 : vec4<f32>;

var<private> u_xlat66 : vec2<f32>;

var<private> u_xlat67 : vec4<f32>;

var<private> vs_TEXCOORD2 : f32;

var<private> in_POSITION0 : vec3<f32>;

var<private> vs_TEXCOORD0 : vec2<f32>;

var<private> vs_TEXCOORD1 : f32;

var<private> u_xlatb136 : bool;

var<private> gl_Position : vec4<f32>;

fn main_1() {
  var u_xlatu_loop_1 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  u_xlatu0 = 0u;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_17 : u32 = u_xlatu_loop_1;
    if ((x_17 < 128u)) {
    } else {
      break;
    }
    let x_31 : u32 = u_xlatu_loop_1;
    let x_34 : u32 = x_28.x_HistogramBuffer_buf[x_31].value[0i];
    u_xlatu136 = x_34;
    let x_35 : u32 = u_xlatu136;
    let x_36 : u32 = u_xlatu0;
    u_xlatu0 = max(x_35, x_36);

    continuing {
      let x_38 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_38 + bitcast<u32>(1i));
    }
  }
  let x_44 : u32 = u_xlatu0;
  u_xlat0 = f32(x_44);
  let x_47 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_47);
  let x_51 : u32 = x_28.x_HistogramBuffer_buf[0i].value[0i];
  u_xlatu68 = x_51;
  let x_55 : u32 = u_xlatu68;
  u_xlat68.x = f32(x_55);
  let x_59 : f32 = u_xlat0;
  let x_61 : f32 = u_xlat68.x;
  u_xlat136 = (x_59 * x_61);
  let x_65 : u32 = x_28.x_HistogramBuffer_buf[1i].value[0i];
  u_xlatu204 = x_65;
  let x_67 : u32 = u_xlatu204;
  u_xlat204 = f32(x_67);
  let x_70 : f32 = u_xlat0;
  let x_71 : f32 = u_xlat204;
  u_xlat1.x = (x_70 * x_71);
  let x_76 : f32 = u_xlat68.x;
  let x_77 : f32 = u_xlat0;
  let x_80 : f32 = u_xlat1.x;
  u_xlat69.x = ((x_76 * x_77) + x_80);
  let x_86 : u32 = x_28.x_HistogramBuffer_buf[2i].value[0i];
  u_xlatu137 = x_86;
  let x_88 : u32 = u_xlatu137;
  u_xlat137 = f32(x_88);
  let x_91 : f32 = u_xlat0;
  let x_92 : f32 = u_xlat137;
  u_xlat205 = (x_91 * x_92);
  let x_94 : f32 = u_xlat137;
  let x_95 : f32 = u_xlat0;
  let x_98 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_94 * x_95) + x_98);
  let x_104 : u32 = x_28.x_HistogramBuffer_buf[3i].value[0i];
  u_xlatu2 = x_104;
  let x_108 : u32 = u_xlatu2;
  u_xlat2.x = f32(x_108);
  let x_112 : f32 = u_xlat2.x;
  let x_113 : f32 = u_xlat0;
  let x_116 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_112 * x_113) + x_116);
  let x_122 : u32 = x_28.x_HistogramBuffer_buf[4i].value[0i];
  u_xlatu138 = x_122;
  let x_123 : u32 = u_xlatu138;
  u_xlat2.z = f32(x_123);
  let x_128 : f32 = u_xlat0;
  let x_130 : vec3<f32> = u_xlat2;
  let x_132 : vec2<f32> = (vec2<f32>(x_128, x_128) * vec2<f32>(x_130.x, x_130.z));
  let x_133 : vec3<f32> = u_xlat70;
  u_xlat70 = vec3<f32>(x_132.x, x_133.y, x_132.y);
  let x_136 : f32 = u_xlat2.z;
  let x_137 : f32 = u_xlat0;
  let x_140 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_136 * x_137) + x_140);
  let x_146 : u32 = x_28.x_HistogramBuffer_buf[5i].value[0i];
  u_xlatu3 = x_146;
  let x_150 : u32 = u_xlatu3;
  u_xlat3.x = f32(x_150);
  let x_154 : f32 = u_xlat3.x;
  let x_155 : f32 = u_xlat0;
  let x_158 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_154 * x_155) + x_158);
  let x_164 : u32 = x_28.x_HistogramBuffer_buf[6i].value[0i];
  u_xlatu139 = x_164;
  let x_165 : u32 = u_xlatu139;
  u_xlat3.z = f32(x_165);
  let x_169 : f32 = u_xlat0;
  let x_171 : vec4<f32> = u_xlat3;
  let x_173 : vec2<f32> = (vec2<f32>(x_169, x_169) * vec2<f32>(x_171.x, x_171.z));
  let x_174 : vec3<f32> = u_xlat71;
  u_xlat71 = vec3<f32>(x_173.x, x_174.y, x_173.y);
  let x_177 : f32 = u_xlat3.z;
  let x_178 : f32 = u_xlat0;
  let x_181 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_177 * x_178) + x_181);
  let x_187 : u32 = x_28.x_HistogramBuffer_buf[7i].value[0i];
  u_xlatu4 = x_187;
  let x_189 : u32 = u_xlatu4;
  u_xlat4.x = f32(x_189);
  let x_193 : f32 = u_xlat4.x;
  let x_194 : f32 = u_xlat0;
  let x_197 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_193 * x_194) + x_197);
  let x_203 : u32 = x_28.x_HistogramBuffer_buf[8i].value[0i];
  u_xlatu140 = x_203;
  let x_204 : u32 = u_xlatu140;
  u_xlat4.z = f32(x_204);
  let x_208 : f32 = u_xlat0;
  let x_210 : vec3<f32> = u_xlat4;
  let x_212 : vec2<f32> = (vec2<f32>(x_208, x_208) * vec2<f32>(x_210.x, x_210.z));
  let x_213 : vec3<f32> = u_xlat72;
  u_xlat72 = vec3<f32>(x_212.x, x_213.y, x_212.y);
  let x_216 : f32 = u_xlat4.z;
  let x_217 : f32 = u_xlat0;
  let x_220 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_216 * x_217) + x_220);
  let x_226 : u32 = x_28.x_HistogramBuffer_buf[9i].value[0i];
  u_xlatu5 = x_226;
  let x_228 : u32 = u_xlatu5;
  u_xlat5.x = f32(x_228);
  let x_232 : f32 = u_xlat5.x;
  let x_233 : f32 = u_xlat0;
  let x_236 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_232 * x_233) + x_236);
  let x_242 : u32 = x_28.x_HistogramBuffer_buf[10i].value[0i];
  u_xlatu141 = x_242;
  let x_243 : u32 = u_xlatu141;
  u_xlat5.z = f32(x_243);
  let x_247 : f32 = u_xlat0;
  let x_249 : vec3<f32> = u_xlat5;
  let x_251 : vec2<f32> = (vec2<f32>(x_247, x_247) * vec2<f32>(x_249.x, x_249.z));
  let x_252 : vec3<f32> = u_xlat73;
  u_xlat73 = vec3<f32>(x_251.x, x_252.y, x_251.y);
  let x_255 : f32 = u_xlat5.z;
  let x_256 : f32 = u_xlat0;
  let x_259 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_255 * x_256) + x_259);
  let x_265 : u32 = x_28.x_HistogramBuffer_buf[11i].value[0i];
  u_xlatu6 = x_265;
  let x_267 : u32 = u_xlatu6;
  u_xlat6.x = f32(x_267);
  let x_271 : f32 = u_xlat6.x;
  let x_272 : f32 = u_xlat0;
  let x_275 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_271 * x_272) + x_275);
  let x_281 : u32 = x_28.x_HistogramBuffer_buf[12i].value[0i];
  u_xlatu142 = x_281;
  let x_282 : u32 = u_xlatu142;
  u_xlat6.z = f32(x_282);
  let x_286 : f32 = u_xlat0;
  let x_288 : vec3<f32> = u_xlat6;
  let x_290 : vec2<f32> = (vec2<f32>(x_286, x_286) * vec2<f32>(x_288.x, x_288.z));
  let x_291 : vec3<f32> = u_xlat74;
  u_xlat74 = vec3<f32>(x_290.x, x_291.y, x_290.y);
  let x_294 : f32 = u_xlat6.z;
  let x_295 : f32 = u_xlat0;
  let x_298 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_294 * x_295) + x_298);
  let x_304 : u32 = x_28.x_HistogramBuffer_buf[13i].value[0i];
  u_xlatu7 = x_304;
  let x_306 : u32 = u_xlatu7;
  u_xlat7.x = f32(x_306);
  let x_310 : f32 = u_xlat7.x;
  let x_311 : f32 = u_xlat0;
  let x_314 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_310 * x_311) + x_314);
  let x_320 : u32 = x_28.x_HistogramBuffer_buf[14i].value[0i];
  u_xlatu143 = x_320;
  let x_321 : u32 = u_xlatu143;
  u_xlat7.z = f32(x_321);
  let x_325 : f32 = u_xlat0;
  let x_327 : vec3<f32> = u_xlat7;
  let x_329 : vec2<f32> = (vec2<f32>(x_325, x_325) * vec2<f32>(x_327.x, x_327.z));
  let x_330 : vec3<f32> = u_xlat75;
  u_xlat75 = vec3<f32>(x_329.x, x_330.y, x_329.y);
  let x_333 : f32 = u_xlat7.z;
  let x_334 : f32 = u_xlat0;
  let x_337 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_333 * x_334) + x_337);
  let x_343 : u32 = x_28.x_HistogramBuffer_buf[15i].value[0i];
  u_xlatu8 = x_343;
  let x_345 : u32 = u_xlatu8;
  u_xlat8.x = f32(x_345);
  let x_349 : f32 = u_xlat8.x;
  let x_350 : f32 = u_xlat0;
  let x_353 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_349 * x_350) + x_353);
  let x_359 : u32 = x_28.x_HistogramBuffer_buf[16i].value[0i];
  u_xlatu144 = x_359;
  let x_360 : u32 = u_xlatu144;
  u_xlat8.z = f32(x_360);
  let x_364 : f32 = u_xlat0;
  let x_366 : vec3<f32> = u_xlat8;
  let x_368 : vec2<f32> = (vec2<f32>(x_364, x_364) * vec2<f32>(x_366.x, x_366.z));
  let x_369 : vec3<f32> = u_xlat76;
  u_xlat76 = vec3<f32>(x_368.x, x_369.y, x_368.y);
  let x_372 : f32 = u_xlat8.z;
  let x_373 : f32 = u_xlat0;
  let x_376 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_372 * x_373) + x_376);
  let x_382 : u32 = x_28.x_HistogramBuffer_buf[17i].value[0i];
  u_xlatu9 = x_382;
  let x_384 : u32 = u_xlatu9;
  u_xlat9.x = f32(x_384);
  let x_388 : f32 = u_xlat9.x;
  let x_389 : f32 = u_xlat0;
  let x_392 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_388 * x_389) + x_392);
  let x_398 : u32 = x_28.x_HistogramBuffer_buf[18i].value[0i];
  u_xlatu145 = x_398;
  let x_399 : u32 = u_xlatu145;
  u_xlat9.z = f32(x_399);
  let x_403 : f32 = u_xlat0;
  let x_405 : vec3<f32> = u_xlat9;
  let x_407 : vec2<f32> = (vec2<f32>(x_403, x_403) * vec2<f32>(x_405.x, x_405.z));
  let x_408 : vec3<f32> = u_xlat77;
  u_xlat77 = vec3<f32>(x_407.x, x_408.y, x_407.y);
  let x_411 : f32 = u_xlat9.z;
  let x_412 : f32 = u_xlat0;
  let x_415 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_411 * x_412) + x_415);
  let x_421 : u32 = x_28.x_HistogramBuffer_buf[19i].value[0i];
  u_xlatu10 = x_421;
  let x_423 : u32 = u_xlatu10;
  u_xlat10.x = f32(x_423);
  let x_427 : f32 = u_xlat10.x;
  let x_428 : f32 = u_xlat0;
  let x_431 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_427 * x_428) + x_431);
  let x_437 : u32 = x_28.x_HistogramBuffer_buf[20i].value[0i];
  u_xlatu146 = x_437;
  let x_438 : u32 = u_xlatu146;
  u_xlat10.z = f32(x_438);
  let x_442 : f32 = u_xlat0;
  let x_444 : vec3<f32> = u_xlat10;
  let x_446 : vec2<f32> = (vec2<f32>(x_442, x_442) * vec2<f32>(x_444.x, x_444.z));
  let x_447 : vec3<f32> = u_xlat78;
  u_xlat78 = vec3<f32>(x_446.x, x_447.y, x_446.y);
  let x_450 : f32 = u_xlat10.z;
  let x_451 : f32 = u_xlat0;
  let x_454 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_450 * x_451) + x_454);
  let x_460 : u32 = x_28.x_HistogramBuffer_buf[21i].value[0i];
  u_xlatu11 = x_460;
  let x_462 : u32 = u_xlatu11;
  u_xlat11.x = f32(x_462);
  let x_466 : f32 = u_xlat11.x;
  let x_467 : f32 = u_xlat0;
  let x_470 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_466 * x_467) + x_470);
  let x_476 : u32 = x_28.x_HistogramBuffer_buf[22i].value[0i];
  u_xlatu147 = x_476;
  let x_477 : u32 = u_xlatu147;
  u_xlat11.z = f32(x_477);
  let x_481 : f32 = u_xlat0;
  let x_483 : vec3<f32> = u_xlat11;
  let x_485 : vec2<f32> = (vec2<f32>(x_481, x_481) * vec2<f32>(x_483.x, x_483.z));
  let x_486 : vec3<f32> = u_xlat79;
  u_xlat79 = vec3<f32>(x_485.x, x_486.y, x_485.y);
  let x_489 : f32 = u_xlat11.z;
  let x_490 : f32 = u_xlat0;
  let x_493 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_489 * x_490) + x_493);
  let x_499 : u32 = x_28.x_HistogramBuffer_buf[23i].value[0i];
  u_xlatu12 = x_499;
  let x_501 : u32 = u_xlatu12;
  u_xlat12.x = f32(x_501);
  let x_505 : f32 = u_xlat12.x;
  let x_506 : f32 = u_xlat0;
  let x_509 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_505 * x_506) + x_509);
  let x_515 : u32 = x_28.x_HistogramBuffer_buf[24i].value[0i];
  u_xlatu148 = x_515;
  let x_516 : u32 = u_xlatu148;
  u_xlat12.z = f32(x_516);
  let x_520 : f32 = u_xlat0;
  let x_522 : vec3<f32> = u_xlat12;
  let x_524 : vec2<f32> = (vec2<f32>(x_520, x_520) * vec2<f32>(x_522.x, x_522.z));
  let x_525 : vec3<f32> = u_xlat80;
  u_xlat80 = vec3<f32>(x_524.x, x_525.y, x_524.y);
  let x_528 : f32 = u_xlat12.z;
  let x_529 : f32 = u_xlat0;
  let x_532 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_528 * x_529) + x_532);
  let x_538 : u32 = x_28.x_HistogramBuffer_buf[25i].value[0i];
  u_xlatu13 = x_538;
  let x_540 : u32 = u_xlatu13;
  u_xlat13.x = f32(x_540);
  let x_544 : f32 = u_xlat13.x;
  let x_545 : f32 = u_xlat0;
  let x_548 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_544 * x_545) + x_548);
  let x_554 : u32 = x_28.x_HistogramBuffer_buf[26i].value[0i];
  u_xlatu149 = x_554;
  let x_555 : u32 = u_xlatu149;
  u_xlat13.z = f32(x_555);
  let x_559 : f32 = u_xlat0;
  let x_561 : vec3<f32> = u_xlat13;
  let x_563 : vec2<f32> = (vec2<f32>(x_559, x_559) * vec2<f32>(x_561.x, x_561.z));
  let x_564 : vec3<f32> = u_xlat81;
  u_xlat81 = vec3<f32>(x_563.x, x_564.y, x_563.y);
  let x_567 : f32 = u_xlat13.z;
  let x_568 : f32 = u_xlat0;
  let x_571 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_567 * x_568) + x_571);
  let x_577 : u32 = x_28.x_HistogramBuffer_buf[27i].value[0i];
  u_xlatu14 = x_577;
  let x_579 : u32 = u_xlatu14;
  u_xlat14.x = f32(x_579);
  let x_583 : f32 = u_xlat14.x;
  let x_584 : f32 = u_xlat0;
  let x_587 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_583 * x_584) + x_587);
  let x_593 : u32 = x_28.x_HistogramBuffer_buf[28i].value[0i];
  u_xlatu150 = x_593;
  let x_594 : u32 = u_xlatu150;
  u_xlat14.z = f32(x_594);
  let x_598 : f32 = u_xlat0;
  let x_600 : vec3<f32> = u_xlat14;
  let x_602 : vec2<f32> = (vec2<f32>(x_598, x_598) * vec2<f32>(x_600.x, x_600.z));
  let x_603 : vec3<f32> = u_xlat82;
  u_xlat82 = vec3<f32>(x_602.x, x_603.y, x_602.y);
  let x_606 : f32 = u_xlat14.z;
  let x_607 : f32 = u_xlat0;
  let x_610 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_606 * x_607) + x_610);
  let x_616 : u32 = x_28.x_HistogramBuffer_buf[29i].value[0i];
  u_xlatu15 = x_616;
  let x_618 : u32 = u_xlatu15;
  u_xlat15.x = f32(x_618);
  let x_622 : f32 = u_xlat15.x;
  let x_623 : f32 = u_xlat0;
  let x_626 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_622 * x_623) + x_626);
  let x_632 : u32 = x_28.x_HistogramBuffer_buf[30i].value[0i];
  u_xlatu151 = x_632;
  let x_633 : u32 = u_xlatu151;
  u_xlat15.z = f32(x_633);
  let x_637 : f32 = u_xlat0;
  let x_639 : vec3<f32> = u_xlat15;
  let x_641 : vec2<f32> = (vec2<f32>(x_637, x_637) * vec2<f32>(x_639.x, x_639.z));
  let x_642 : vec3<f32> = u_xlat83;
  u_xlat83 = vec3<f32>(x_641.x, x_642.y, x_641.y);
  let x_645 : f32 = u_xlat15.z;
  let x_646 : f32 = u_xlat0;
  let x_649 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_645 * x_646) + x_649);
  let x_655 : u32 = x_28.x_HistogramBuffer_buf[31i].value[0i];
  u_xlatu16 = x_655;
  let x_657 : u32 = u_xlatu16;
  u_xlat16.x = f32(x_657);
  let x_661 : f32 = u_xlat16.x;
  let x_662 : f32 = u_xlat0;
  let x_665 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_661 * x_662) + x_665);
  let x_671 : u32 = x_28.x_HistogramBuffer_buf[32i].value[0i];
  u_xlatu152 = x_671;
  let x_672 : u32 = u_xlatu152;
  u_xlat16.z = f32(x_672);
  let x_676 : f32 = u_xlat0;
  let x_678 : vec3<f32> = u_xlat16;
  let x_680 : vec2<f32> = (vec2<f32>(x_676, x_676) * vec2<f32>(x_678.x, x_678.z));
  let x_681 : vec3<f32> = u_xlat84;
  u_xlat84 = vec3<f32>(x_680.x, x_681.y, x_680.y);
  let x_684 : f32 = u_xlat16.z;
  let x_685 : f32 = u_xlat0;
  let x_688 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_684 * x_685) + x_688);
  let x_694 : u32 = x_28.x_HistogramBuffer_buf[33i].value[0i];
  u_xlatu17 = x_694;
  let x_696 : u32 = u_xlatu17;
  u_xlat17.x = f32(x_696);
  let x_700 : f32 = u_xlat17.x;
  let x_701 : f32 = u_xlat0;
  let x_704 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_700 * x_701) + x_704);
  let x_710 : u32 = x_28.x_HistogramBuffer_buf[34i].value[0i];
  u_xlatu153 = x_710;
  let x_711 : u32 = u_xlatu153;
  u_xlat17.z = f32(x_711);
  let x_715 : f32 = u_xlat0;
  let x_717 : vec3<f32> = u_xlat17;
  let x_719 : vec2<f32> = (vec2<f32>(x_715, x_715) * vec2<f32>(x_717.x, x_717.z));
  let x_720 : vec3<f32> = u_xlat85;
  u_xlat85 = vec3<f32>(x_719.x, x_720.y, x_719.y);
  let x_723 : f32 = u_xlat17.z;
  let x_724 : f32 = u_xlat0;
  let x_727 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_723 * x_724) + x_727);
  let x_733 : u32 = x_28.x_HistogramBuffer_buf[35i].value[0i];
  u_xlatu18 = x_733;
  let x_735 : u32 = u_xlatu18;
  u_xlat18.x = f32(x_735);
  let x_739 : f32 = u_xlat18.x;
  let x_740 : f32 = u_xlat0;
  let x_743 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_739 * x_740) + x_743);
  let x_749 : u32 = x_28.x_HistogramBuffer_buf[36i].value[0i];
  u_xlatu154 = x_749;
  let x_750 : u32 = u_xlatu154;
  u_xlat18.z = f32(x_750);
  let x_754 : f32 = u_xlat0;
  let x_756 : vec3<f32> = u_xlat18;
  let x_758 : vec2<f32> = (vec2<f32>(x_754, x_754) * vec2<f32>(x_756.x, x_756.z));
  let x_759 : vec3<f32> = u_xlat86;
  u_xlat86 = vec3<f32>(x_758.x, x_759.y, x_758.y);
  let x_762 : f32 = u_xlat18.z;
  let x_763 : f32 = u_xlat0;
  let x_766 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_762 * x_763) + x_766);
  let x_772 : u32 = x_28.x_HistogramBuffer_buf[37i].value[0i];
  u_xlatu19 = x_772;
  let x_774 : u32 = u_xlatu19;
  u_xlat19.x = f32(x_774);
  let x_778 : f32 = u_xlat19.x;
  let x_779 : f32 = u_xlat0;
  let x_782 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_778 * x_779) + x_782);
  let x_788 : u32 = x_28.x_HistogramBuffer_buf[38i].value[0i];
  u_xlatu155 = x_788;
  let x_789 : u32 = u_xlatu155;
  u_xlat19.z = f32(x_789);
  let x_793 : f32 = u_xlat0;
  let x_795 : vec3<f32> = u_xlat19;
  let x_797 : vec2<f32> = (vec2<f32>(x_793, x_793) * vec2<f32>(x_795.x, x_795.z));
  let x_798 : vec3<f32> = u_xlat87;
  u_xlat87 = vec3<f32>(x_797.x, x_798.y, x_797.y);
  let x_801 : f32 = u_xlat19.z;
  let x_802 : f32 = u_xlat0;
  let x_805 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_801 * x_802) + x_805);
  let x_811 : u32 = x_28.x_HistogramBuffer_buf[39i].value[0i];
  u_xlatu20 = x_811;
  let x_813 : u32 = u_xlatu20;
  u_xlat20.x = f32(x_813);
  let x_817 : f32 = u_xlat20.x;
  let x_818 : f32 = u_xlat0;
  let x_821 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_817 * x_818) + x_821);
  let x_827 : u32 = x_28.x_HistogramBuffer_buf[40i].value[0i];
  u_xlatu156 = x_827;
  let x_828 : u32 = u_xlatu156;
  u_xlat20.z = f32(x_828);
  let x_832 : f32 = u_xlat0;
  let x_834 : vec3<f32> = u_xlat20;
  let x_836 : vec2<f32> = (vec2<f32>(x_832, x_832) * vec2<f32>(x_834.x, x_834.z));
  let x_837 : vec3<f32> = u_xlat88;
  u_xlat88 = vec3<f32>(x_836.x, x_837.y, x_836.y);
  let x_840 : f32 = u_xlat20.z;
  let x_841 : f32 = u_xlat0;
  let x_844 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_840 * x_841) + x_844);
  let x_850 : u32 = x_28.x_HistogramBuffer_buf[41i].value[0i];
  u_xlatu21 = x_850;
  let x_852 : u32 = u_xlatu21;
  u_xlat21.x = f32(x_852);
  let x_856 : f32 = u_xlat21.x;
  let x_857 : f32 = u_xlat0;
  let x_860 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_856 * x_857) + x_860);
  let x_866 : u32 = x_28.x_HistogramBuffer_buf[42i].value[0i];
  u_xlatu157 = x_866;
  let x_867 : u32 = u_xlatu157;
  u_xlat21.z = f32(x_867);
  let x_871 : f32 = u_xlat0;
  let x_873 : vec3<f32> = u_xlat21;
  let x_875 : vec2<f32> = (vec2<f32>(x_871, x_871) * vec2<f32>(x_873.x, x_873.z));
  let x_876 : vec3<f32> = u_xlat89;
  u_xlat89 = vec3<f32>(x_875.x, x_876.y, x_875.y);
  let x_879 : f32 = u_xlat21.z;
  let x_880 : f32 = u_xlat0;
  let x_883 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_879 * x_880) + x_883);
  let x_889 : u32 = x_28.x_HistogramBuffer_buf[43i].value[0i];
  u_xlatu22 = x_889;
  let x_891 : u32 = u_xlatu22;
  u_xlat22.x = f32(x_891);
  let x_895 : f32 = u_xlat22.x;
  let x_896 : f32 = u_xlat0;
  let x_899 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_895 * x_896) + x_899);
  let x_905 : u32 = x_28.x_HistogramBuffer_buf[44i].value[0i];
  u_xlatu158 = x_905;
  let x_906 : u32 = u_xlatu158;
  u_xlat22.z = f32(x_906);
  let x_910 : f32 = u_xlat0;
  let x_912 : vec3<f32> = u_xlat22;
  let x_914 : vec2<f32> = (vec2<f32>(x_910, x_910) * vec2<f32>(x_912.x, x_912.z));
  let x_915 : vec3<f32> = u_xlat90;
  u_xlat90 = vec3<f32>(x_914.x, x_915.y, x_914.y);
  let x_918 : f32 = u_xlat22.z;
  let x_919 : f32 = u_xlat0;
  let x_922 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_918 * x_919) + x_922);
  let x_928 : u32 = x_28.x_HistogramBuffer_buf[45i].value[0i];
  u_xlatu23 = x_928;
  let x_930 : u32 = u_xlatu23;
  u_xlat23.x = f32(x_930);
  let x_934 : f32 = u_xlat23.x;
  let x_935 : f32 = u_xlat0;
  let x_938 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_934 * x_935) + x_938);
  let x_944 : u32 = x_28.x_HistogramBuffer_buf[46i].value[0i];
  u_xlatu159 = x_944;
  let x_945 : u32 = u_xlatu159;
  u_xlat23.z = f32(x_945);
  let x_949 : f32 = u_xlat0;
  let x_951 : vec3<f32> = u_xlat23;
  let x_953 : vec2<f32> = (vec2<f32>(x_949, x_949) * vec2<f32>(x_951.x, x_951.z));
  let x_954 : vec3<f32> = u_xlat91;
  u_xlat91 = vec3<f32>(x_953.x, x_954.y, x_953.y);
  let x_957 : f32 = u_xlat23.z;
  let x_958 : f32 = u_xlat0;
  let x_961 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_957 * x_958) + x_961);
  let x_967 : u32 = x_28.x_HistogramBuffer_buf[47i].value[0i];
  u_xlatu24 = x_967;
  let x_969 : u32 = u_xlatu24;
  u_xlat24.x = f32(x_969);
  let x_973 : f32 = u_xlat24.x;
  let x_974 : f32 = u_xlat0;
  let x_977 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_973 * x_974) + x_977);
  let x_983 : u32 = x_28.x_HistogramBuffer_buf[48i].value[0i];
  u_xlatu160 = x_983;
  let x_984 : u32 = u_xlatu160;
  u_xlat24.z = f32(x_984);
  let x_988 : f32 = u_xlat0;
  let x_990 : vec3<f32> = u_xlat24;
  let x_992 : vec2<f32> = (vec2<f32>(x_988, x_988) * vec2<f32>(x_990.x, x_990.z));
  let x_993 : vec3<f32> = u_xlat92;
  u_xlat92 = vec3<f32>(x_992.x, x_993.y, x_992.y);
  let x_996 : f32 = u_xlat24.z;
  let x_997 : f32 = u_xlat0;
  let x_1000 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_996 * x_997) + x_1000);
  let x_1006 : u32 = x_28.x_HistogramBuffer_buf[49i].value[0i];
  u_xlatu25 = x_1006;
  let x_1008 : u32 = u_xlatu25;
  u_xlat25.x = f32(x_1008);
  let x_1012 : f32 = u_xlat25.x;
  let x_1013 : f32 = u_xlat0;
  let x_1016 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1012 * x_1013) + x_1016);
  let x_1022 : u32 = x_28.x_HistogramBuffer_buf[50i].value[0i];
  u_xlatu161 = x_1022;
  let x_1023 : u32 = u_xlatu161;
  u_xlat25.z = f32(x_1023);
  let x_1027 : f32 = u_xlat0;
  let x_1029 : vec3<f32> = u_xlat25;
  let x_1031 : vec2<f32> = (vec2<f32>(x_1027, x_1027) * vec2<f32>(x_1029.x, x_1029.z));
  let x_1032 : vec3<f32> = u_xlat93;
  u_xlat93 = vec3<f32>(x_1031.x, x_1032.y, x_1031.y);
  let x_1035 : f32 = u_xlat25.z;
  let x_1036 : f32 = u_xlat0;
  let x_1039 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1035 * x_1036) + x_1039);
  let x_1045 : u32 = x_28.x_HistogramBuffer_buf[51i].value[0i];
  u_xlatu26 = x_1045;
  let x_1047 : u32 = u_xlatu26;
  u_xlat26.x = f32(x_1047);
  let x_1051 : f32 = u_xlat26.x;
  let x_1052 : f32 = u_xlat0;
  let x_1055 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1051 * x_1052) + x_1055);
  let x_1061 : u32 = x_28.x_HistogramBuffer_buf[52i].value[0i];
  u_xlatu162 = x_1061;
  let x_1062 : u32 = u_xlatu162;
  u_xlat26.z = f32(x_1062);
  let x_1066 : f32 = u_xlat0;
  let x_1068 : vec3<f32> = u_xlat26;
  let x_1070 : vec2<f32> = (vec2<f32>(x_1066, x_1066) * vec2<f32>(x_1068.x, x_1068.z));
  let x_1071 : vec3<f32> = u_xlat94;
  u_xlat94 = vec3<f32>(x_1070.x, x_1071.y, x_1070.y);
  let x_1074 : f32 = u_xlat26.z;
  let x_1075 : f32 = u_xlat0;
  let x_1078 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1074 * x_1075) + x_1078);
  let x_1084 : u32 = x_28.x_HistogramBuffer_buf[53i].value[0i];
  u_xlatu27 = x_1084;
  let x_1086 : u32 = u_xlatu27;
  u_xlat27.x = f32(x_1086);
  let x_1090 : f32 = u_xlat27.x;
  let x_1091 : f32 = u_xlat0;
  let x_1094 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1090 * x_1091) + x_1094);
  let x_1100 : u32 = x_28.x_HistogramBuffer_buf[54i].value[0i];
  u_xlatu163 = x_1100;
  let x_1101 : u32 = u_xlatu163;
  u_xlat27.z = f32(x_1101);
  let x_1105 : f32 = u_xlat0;
  let x_1107 : vec3<f32> = u_xlat27;
  let x_1109 : vec2<f32> = (vec2<f32>(x_1105, x_1105) * vec2<f32>(x_1107.x, x_1107.z));
  let x_1110 : vec3<f32> = u_xlat95;
  u_xlat95 = vec3<f32>(x_1109.x, x_1110.y, x_1109.y);
  let x_1113 : f32 = u_xlat27.z;
  let x_1114 : f32 = u_xlat0;
  let x_1117 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1113 * x_1114) + x_1117);
  let x_1123 : u32 = x_28.x_HistogramBuffer_buf[55i].value[0i];
  u_xlatu28 = x_1123;
  let x_1125 : u32 = u_xlatu28;
  u_xlat28.x = f32(x_1125);
  let x_1129 : f32 = u_xlat28.x;
  let x_1130 : f32 = u_xlat0;
  let x_1133 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1129 * x_1130) + x_1133);
  let x_1139 : u32 = x_28.x_HistogramBuffer_buf[56i].value[0i];
  u_xlatu164 = x_1139;
  let x_1140 : u32 = u_xlatu164;
  u_xlat28.z = f32(x_1140);
  let x_1144 : f32 = u_xlat0;
  let x_1146 : vec3<f32> = u_xlat28;
  let x_1148 : vec2<f32> = (vec2<f32>(x_1144, x_1144) * vec2<f32>(x_1146.x, x_1146.z));
  let x_1149 : vec3<f32> = u_xlat96;
  u_xlat96 = vec3<f32>(x_1148.x, x_1149.y, x_1148.y);
  let x_1152 : f32 = u_xlat28.z;
  let x_1153 : f32 = u_xlat0;
  let x_1156 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1152 * x_1153) + x_1156);
  let x_1162 : u32 = x_28.x_HistogramBuffer_buf[57i].value[0i];
  u_xlatu29 = x_1162;
  let x_1164 : u32 = u_xlatu29;
  u_xlat29.x = f32(x_1164);
  let x_1168 : f32 = u_xlat29.x;
  let x_1169 : f32 = u_xlat0;
  let x_1172 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1168 * x_1169) + x_1172);
  let x_1178 : u32 = x_28.x_HistogramBuffer_buf[58i].value[0i];
  u_xlatu165 = x_1178;
  let x_1179 : u32 = u_xlatu165;
  u_xlat29.z = f32(x_1179);
  let x_1183 : f32 = u_xlat0;
  let x_1185 : vec3<f32> = u_xlat29;
  let x_1187 : vec2<f32> = (vec2<f32>(x_1183, x_1183) * vec2<f32>(x_1185.x, x_1185.z));
  let x_1188 : vec3<f32> = u_xlat97;
  u_xlat97 = vec3<f32>(x_1187.x, x_1188.y, x_1187.y);
  let x_1191 : f32 = u_xlat29.z;
  let x_1192 : f32 = u_xlat0;
  let x_1195 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1191 * x_1192) + x_1195);
  let x_1201 : u32 = x_28.x_HistogramBuffer_buf[59i].value[0i];
  u_xlatu30 = x_1201;
  let x_1203 : u32 = u_xlatu30;
  u_xlat30.x = f32(x_1203);
  let x_1207 : f32 = u_xlat30.x;
  let x_1208 : f32 = u_xlat0;
  let x_1211 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1207 * x_1208) + x_1211);
  let x_1217 : u32 = x_28.x_HistogramBuffer_buf[60i].value[0i];
  u_xlatu166 = x_1217;
  let x_1218 : u32 = u_xlatu166;
  u_xlat30.z = f32(x_1218);
  let x_1222 : f32 = u_xlat0;
  let x_1224 : vec3<f32> = u_xlat30;
  let x_1226 : vec2<f32> = (vec2<f32>(x_1222, x_1222) * vec2<f32>(x_1224.x, x_1224.z));
  let x_1227 : vec3<f32> = u_xlat98;
  u_xlat98 = vec3<f32>(x_1226.x, x_1227.y, x_1226.y);
  let x_1230 : f32 = u_xlat30.z;
  let x_1231 : f32 = u_xlat0;
  let x_1234 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1230 * x_1231) + x_1234);
  let x_1240 : u32 = x_28.x_HistogramBuffer_buf[61i].value[0i];
  u_xlatu31 = x_1240;
  let x_1242 : u32 = u_xlatu31;
  u_xlat31.x = f32(x_1242);
  let x_1246 : f32 = u_xlat31.x;
  let x_1247 : f32 = u_xlat0;
  let x_1250 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1246 * x_1247) + x_1250);
  let x_1256 : u32 = x_28.x_HistogramBuffer_buf[62i].value[0i];
  u_xlatu167 = x_1256;
  let x_1257 : u32 = u_xlatu167;
  u_xlat31.z = f32(x_1257);
  let x_1261 : f32 = u_xlat0;
  let x_1263 : vec3<f32> = u_xlat31;
  let x_1265 : vec2<f32> = (vec2<f32>(x_1261, x_1261) * vec2<f32>(x_1263.x, x_1263.z));
  let x_1266 : vec3<f32> = u_xlat99;
  u_xlat99 = vec3<f32>(x_1265.x, x_1266.y, x_1265.y);
  let x_1269 : f32 = u_xlat31.z;
  let x_1270 : f32 = u_xlat0;
  let x_1273 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1269 * x_1270) + x_1273);
  let x_1279 : u32 = x_28.x_HistogramBuffer_buf[63i].value[0i];
  u_xlatu32 = x_1279;
  let x_1281 : u32 = u_xlatu32;
  u_xlat32.x = f32(x_1281);
  let x_1285 : f32 = u_xlat32.x;
  let x_1286 : f32 = u_xlat0;
  let x_1289 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1285 * x_1286) + x_1289);
  let x_1295 : u32 = x_28.x_HistogramBuffer_buf[64i].value[0i];
  u_xlatu168 = x_1295;
  let x_1296 : u32 = u_xlatu168;
  u_xlat32.z = f32(x_1296);
  let x_1300 : f32 = u_xlat0;
  let x_1302 : vec3<f32> = u_xlat32;
  let x_1304 : vec2<f32> = (vec2<f32>(x_1300, x_1300) * vec2<f32>(x_1302.x, x_1302.z));
  let x_1305 : vec3<f32> = u_xlat100;
  u_xlat100 = vec3<f32>(x_1304.x, x_1305.y, x_1304.y);
  let x_1308 : f32 = u_xlat32.z;
  let x_1309 : f32 = u_xlat0;
  let x_1312 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1308 * x_1309) + x_1312);
  let x_1318 : u32 = x_28.x_HistogramBuffer_buf[65i].value[0i];
  u_xlatu33 = x_1318;
  let x_1320 : u32 = u_xlatu33;
  u_xlat33.x = f32(x_1320);
  let x_1324 : f32 = u_xlat33.x;
  let x_1325 : f32 = u_xlat0;
  let x_1328 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1324 * x_1325) + x_1328);
  let x_1334 : u32 = x_28.x_HistogramBuffer_buf[66i].value[0i];
  u_xlatu169 = x_1334;
  let x_1335 : u32 = u_xlatu169;
  u_xlat33.z = f32(x_1335);
  let x_1339 : f32 = u_xlat0;
  let x_1341 : vec3<f32> = u_xlat33;
  let x_1343 : vec2<f32> = (vec2<f32>(x_1339, x_1339) * vec2<f32>(x_1341.x, x_1341.z));
  let x_1344 : vec3<f32> = u_xlat101;
  u_xlat101 = vec3<f32>(x_1343.x, x_1344.y, x_1343.y);
  let x_1347 : f32 = u_xlat33.z;
  let x_1348 : f32 = u_xlat0;
  let x_1351 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1347 * x_1348) + x_1351);
  let x_1357 : u32 = x_28.x_HistogramBuffer_buf[67i].value[0i];
  u_xlatu34 = x_1357;
  let x_1359 : u32 = u_xlatu34;
  u_xlat34.x = f32(x_1359);
  let x_1363 : f32 = u_xlat34.x;
  let x_1364 : f32 = u_xlat0;
  let x_1367 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1363 * x_1364) + x_1367);
  let x_1373 : u32 = x_28.x_HistogramBuffer_buf[68i].value[0i];
  u_xlatu170 = x_1373;
  let x_1374 : u32 = u_xlatu170;
  u_xlat34.z = f32(x_1374);
  let x_1378 : f32 = u_xlat0;
  let x_1380 : vec3<f32> = u_xlat34;
  let x_1382 : vec2<f32> = (vec2<f32>(x_1378, x_1378) * vec2<f32>(x_1380.x, x_1380.z));
  let x_1383 : vec3<f32> = u_xlat102;
  u_xlat102 = vec3<f32>(x_1382.x, x_1383.y, x_1382.y);
  let x_1386 : f32 = u_xlat34.z;
  let x_1387 : f32 = u_xlat0;
  let x_1390 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1386 * x_1387) + x_1390);
  let x_1396 : u32 = x_28.x_HistogramBuffer_buf[69i].value[0i];
  u_xlatu35 = x_1396;
  let x_1398 : u32 = u_xlatu35;
  u_xlat35.x = f32(x_1398);
  let x_1402 : f32 = u_xlat35.x;
  let x_1403 : f32 = u_xlat0;
  let x_1406 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1402 * x_1403) + x_1406);
  let x_1412 : u32 = x_28.x_HistogramBuffer_buf[70i].value[0i];
  u_xlatu171 = x_1412;
  let x_1413 : u32 = u_xlatu171;
  u_xlat35.z = f32(x_1413);
  let x_1417 : f32 = u_xlat0;
  let x_1419 : vec3<f32> = u_xlat35;
  let x_1421 : vec2<f32> = (vec2<f32>(x_1417, x_1417) * vec2<f32>(x_1419.x, x_1419.z));
  let x_1422 : vec3<f32> = u_xlat103;
  u_xlat103 = vec3<f32>(x_1421.x, x_1422.y, x_1421.y);
  let x_1425 : f32 = u_xlat35.z;
  let x_1426 : f32 = u_xlat0;
  let x_1429 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1425 * x_1426) + x_1429);
  let x_1435 : u32 = x_28.x_HistogramBuffer_buf[71i].value[0i];
  u_xlatu36 = x_1435;
  let x_1437 : u32 = u_xlatu36;
  u_xlat36.x = f32(x_1437);
  let x_1441 : f32 = u_xlat36.x;
  let x_1442 : f32 = u_xlat0;
  let x_1445 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1441 * x_1442) + x_1445);
  let x_1451 : u32 = x_28.x_HistogramBuffer_buf[72i].value[0i];
  u_xlatu172 = x_1451;
  let x_1452 : u32 = u_xlatu172;
  u_xlat36.z = f32(x_1452);
  let x_1456 : f32 = u_xlat0;
  let x_1458 : vec3<f32> = u_xlat36;
  let x_1460 : vec2<f32> = (vec2<f32>(x_1456, x_1456) * vec2<f32>(x_1458.x, x_1458.z));
  let x_1461 : vec3<f32> = u_xlat104;
  u_xlat104 = vec3<f32>(x_1460.x, x_1461.y, x_1460.y);
  let x_1464 : f32 = u_xlat36.z;
  let x_1465 : f32 = u_xlat0;
  let x_1468 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1464 * x_1465) + x_1468);
  let x_1474 : u32 = x_28.x_HistogramBuffer_buf[73i].value[0i];
  u_xlatu37 = x_1474;
  let x_1476 : u32 = u_xlatu37;
  u_xlat37.x = f32(x_1476);
  let x_1480 : f32 = u_xlat37.x;
  let x_1481 : f32 = u_xlat0;
  let x_1484 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1480 * x_1481) + x_1484);
  let x_1490 : u32 = x_28.x_HistogramBuffer_buf[74i].value[0i];
  u_xlatu173 = x_1490;
  let x_1491 : u32 = u_xlatu173;
  u_xlat37.z = f32(x_1491);
  let x_1495 : f32 = u_xlat0;
  let x_1497 : vec3<f32> = u_xlat37;
  let x_1499 : vec2<f32> = (vec2<f32>(x_1495, x_1495) * vec2<f32>(x_1497.x, x_1497.z));
  let x_1500 : vec3<f32> = u_xlat105;
  u_xlat105 = vec3<f32>(x_1499.x, x_1500.y, x_1499.y);
  let x_1503 : f32 = u_xlat37.z;
  let x_1504 : f32 = u_xlat0;
  let x_1507 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1503 * x_1504) + x_1507);
  let x_1513 : u32 = x_28.x_HistogramBuffer_buf[75i].value[0i];
  u_xlatu38 = x_1513;
  let x_1515 : u32 = u_xlatu38;
  u_xlat38.x = f32(x_1515);
  let x_1519 : f32 = u_xlat38.x;
  let x_1520 : f32 = u_xlat0;
  let x_1523 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1519 * x_1520) + x_1523);
  let x_1529 : u32 = x_28.x_HistogramBuffer_buf[76i].value[0i];
  u_xlatu174 = x_1529;
  let x_1530 : u32 = u_xlatu174;
  u_xlat38.z = f32(x_1530);
  let x_1534 : f32 = u_xlat0;
  let x_1536 : vec3<f32> = u_xlat38;
  let x_1538 : vec2<f32> = (vec2<f32>(x_1534, x_1534) * vec2<f32>(x_1536.x, x_1536.z));
  let x_1539 : vec3<f32> = u_xlat106;
  u_xlat106 = vec3<f32>(x_1538.x, x_1539.y, x_1538.y);
  let x_1542 : f32 = u_xlat38.z;
  let x_1543 : f32 = u_xlat0;
  let x_1546 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1542 * x_1543) + x_1546);
  let x_1552 : u32 = x_28.x_HistogramBuffer_buf[77i].value[0i];
  u_xlatu39 = x_1552;
  let x_1554 : u32 = u_xlatu39;
  u_xlat39.x = f32(x_1554);
  let x_1558 : f32 = u_xlat39.x;
  let x_1559 : f32 = u_xlat0;
  let x_1562 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1558 * x_1559) + x_1562);
  let x_1568 : u32 = x_28.x_HistogramBuffer_buf[78i].value[0i];
  u_xlatu175 = x_1568;
  let x_1569 : u32 = u_xlatu175;
  u_xlat39.z = f32(x_1569);
  let x_1573 : f32 = u_xlat0;
  let x_1575 : vec3<f32> = u_xlat39;
  let x_1577 : vec2<f32> = (vec2<f32>(x_1573, x_1573) * vec2<f32>(x_1575.x, x_1575.z));
  let x_1578 : vec3<f32> = u_xlat107;
  u_xlat107 = vec3<f32>(x_1577.x, x_1578.y, x_1577.y);
  let x_1581 : f32 = u_xlat39.z;
  let x_1582 : f32 = u_xlat0;
  let x_1585 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1581 * x_1582) + x_1585);
  let x_1591 : u32 = x_28.x_HistogramBuffer_buf[79i].value[0i];
  u_xlatu40 = x_1591;
  let x_1593 : u32 = u_xlatu40;
  u_xlat40.x = f32(x_1593);
  let x_1597 : f32 = u_xlat40.x;
  let x_1598 : f32 = u_xlat0;
  let x_1601 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1597 * x_1598) + x_1601);
  let x_1607 : u32 = x_28.x_HistogramBuffer_buf[80i].value[0i];
  u_xlatu176 = x_1607;
  let x_1608 : u32 = u_xlatu176;
  u_xlat40.z = f32(x_1608);
  let x_1612 : f32 = u_xlat0;
  let x_1614 : vec3<f32> = u_xlat40;
  let x_1616 : vec2<f32> = (vec2<f32>(x_1612, x_1612) * vec2<f32>(x_1614.x, x_1614.z));
  let x_1617 : vec3<f32> = u_xlat108;
  u_xlat108 = vec3<f32>(x_1616.x, x_1617.y, x_1616.y);
  let x_1620 : f32 = u_xlat40.z;
  let x_1621 : f32 = u_xlat0;
  let x_1624 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1620 * x_1621) + x_1624);
  let x_1630 : u32 = x_28.x_HistogramBuffer_buf[81i].value[0i];
  u_xlatu41 = x_1630;
  let x_1632 : u32 = u_xlatu41;
  u_xlat41.x = f32(x_1632);
  let x_1636 : f32 = u_xlat41.x;
  let x_1637 : f32 = u_xlat0;
  let x_1640 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1636 * x_1637) + x_1640);
  let x_1646 : u32 = x_28.x_HistogramBuffer_buf[82i].value[0i];
  u_xlatu177 = x_1646;
  let x_1647 : u32 = u_xlatu177;
  u_xlat41.z = f32(x_1647);
  let x_1651 : f32 = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat41;
  let x_1655 : vec2<f32> = (vec2<f32>(x_1651, x_1651) * vec2<f32>(x_1653.x, x_1653.z));
  let x_1656 : vec3<f32> = u_xlat109;
  u_xlat109 = vec3<f32>(x_1655.x, x_1656.y, x_1655.y);
  let x_1659 : f32 = u_xlat41.z;
  let x_1660 : f32 = u_xlat0;
  let x_1663 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1659 * x_1660) + x_1663);
  let x_1669 : u32 = x_28.x_HistogramBuffer_buf[83i].value[0i];
  u_xlatu42 = x_1669;
  let x_1671 : u32 = u_xlatu42;
  u_xlat42.x = f32(x_1671);
  let x_1675 : f32 = u_xlat42.x;
  let x_1676 : f32 = u_xlat0;
  let x_1679 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1675 * x_1676) + x_1679);
  let x_1685 : u32 = x_28.x_HistogramBuffer_buf[84i].value[0i];
  u_xlatu178 = x_1685;
  let x_1686 : u32 = u_xlatu178;
  u_xlat42.z = f32(x_1686);
  let x_1690 : f32 = u_xlat0;
  let x_1692 : vec3<f32> = u_xlat42;
  let x_1694 : vec2<f32> = (vec2<f32>(x_1690, x_1690) * vec2<f32>(x_1692.x, x_1692.z));
  let x_1695 : vec3<f32> = u_xlat110;
  u_xlat110 = vec3<f32>(x_1694.x, x_1695.y, x_1694.y);
  let x_1698 : f32 = u_xlat42.z;
  let x_1699 : f32 = u_xlat0;
  let x_1702 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1698 * x_1699) + x_1702);
  let x_1708 : u32 = x_28.x_HistogramBuffer_buf[85i].value[0i];
  u_xlatu43 = x_1708;
  let x_1710 : u32 = u_xlatu43;
  u_xlat43.x = f32(x_1710);
  let x_1714 : f32 = u_xlat43.x;
  let x_1715 : f32 = u_xlat0;
  let x_1718 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1714 * x_1715) + x_1718);
  let x_1724 : u32 = x_28.x_HistogramBuffer_buf[86i].value[0i];
  u_xlatu179 = x_1724;
  let x_1725 : u32 = u_xlatu179;
  u_xlat43.z = f32(x_1725);
  let x_1729 : f32 = u_xlat0;
  let x_1731 : vec3<f32> = u_xlat43;
  let x_1733 : vec2<f32> = (vec2<f32>(x_1729, x_1729) * vec2<f32>(x_1731.x, x_1731.z));
  let x_1734 : vec3<f32> = u_xlat111;
  u_xlat111 = vec3<f32>(x_1733.x, x_1734.y, x_1733.y);
  let x_1737 : f32 = u_xlat43.z;
  let x_1738 : f32 = u_xlat0;
  let x_1741 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1737 * x_1738) + x_1741);
  let x_1747 : u32 = x_28.x_HistogramBuffer_buf[87i].value[0i];
  u_xlatu44 = x_1747;
  let x_1749 : u32 = u_xlatu44;
  u_xlat44.x = f32(x_1749);
  let x_1753 : f32 = u_xlat44.x;
  let x_1754 : f32 = u_xlat0;
  let x_1757 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1753 * x_1754) + x_1757);
  let x_1763 : u32 = x_28.x_HistogramBuffer_buf[88i].value[0i];
  u_xlatu180 = x_1763;
  let x_1764 : u32 = u_xlatu180;
  u_xlat44.z = f32(x_1764);
  let x_1768 : f32 = u_xlat0;
  let x_1770 : vec3<f32> = u_xlat44;
  let x_1772 : vec2<f32> = (vec2<f32>(x_1768, x_1768) * vec2<f32>(x_1770.x, x_1770.z));
  let x_1773 : vec3<f32> = u_xlat112;
  u_xlat112 = vec3<f32>(x_1772.x, x_1773.y, x_1772.y);
  let x_1776 : f32 = u_xlat44.z;
  let x_1777 : f32 = u_xlat0;
  let x_1780 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1776 * x_1777) + x_1780);
  let x_1786 : u32 = x_28.x_HistogramBuffer_buf[89i].value[0i];
  u_xlatu45 = x_1786;
  let x_1788 : u32 = u_xlatu45;
  u_xlat45.x = f32(x_1788);
  let x_1792 : f32 = u_xlat45.x;
  let x_1793 : f32 = u_xlat0;
  let x_1796 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1792 * x_1793) + x_1796);
  let x_1802 : u32 = x_28.x_HistogramBuffer_buf[90i].value[0i];
  u_xlatu181 = x_1802;
  let x_1803 : u32 = u_xlatu181;
  u_xlat45.z = f32(x_1803);
  let x_1807 : f32 = u_xlat0;
  let x_1809 : vec3<f32> = u_xlat45;
  let x_1811 : vec2<f32> = (vec2<f32>(x_1807, x_1807) * vec2<f32>(x_1809.x, x_1809.z));
  let x_1812 : vec3<f32> = u_xlat113;
  u_xlat113 = vec3<f32>(x_1811.x, x_1812.y, x_1811.y);
  let x_1815 : f32 = u_xlat45.z;
  let x_1816 : f32 = u_xlat0;
  let x_1819 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1815 * x_1816) + x_1819);
  let x_1825 : u32 = x_28.x_HistogramBuffer_buf[91i].value[0i];
  u_xlatu46 = x_1825;
  let x_1827 : u32 = u_xlatu46;
  u_xlat46.x = f32(x_1827);
  let x_1831 : f32 = u_xlat46.x;
  let x_1832 : f32 = u_xlat0;
  let x_1835 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1831 * x_1832) + x_1835);
  let x_1841 : u32 = x_28.x_HistogramBuffer_buf[92i].value[0i];
  u_xlatu182 = x_1841;
  let x_1842 : u32 = u_xlatu182;
  u_xlat46.z = f32(x_1842);
  let x_1846 : f32 = u_xlat0;
  let x_1848 : vec3<f32> = u_xlat46;
  let x_1850 : vec2<f32> = (vec2<f32>(x_1846, x_1846) * vec2<f32>(x_1848.x, x_1848.z));
  let x_1851 : vec3<f32> = u_xlat114;
  u_xlat114 = vec3<f32>(x_1850.x, x_1851.y, x_1850.y);
  let x_1854 : f32 = u_xlat46.z;
  let x_1855 : f32 = u_xlat0;
  let x_1858 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1854 * x_1855) + x_1858);
  let x_1864 : u32 = x_28.x_HistogramBuffer_buf[93i].value[0i];
  u_xlatu47 = x_1864;
  let x_1866 : u32 = u_xlatu47;
  u_xlat47.x = f32(x_1866);
  let x_1870 : f32 = u_xlat47.x;
  let x_1871 : f32 = u_xlat0;
  let x_1874 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1870 * x_1871) + x_1874);
  let x_1880 : u32 = x_28.x_HistogramBuffer_buf[94i].value[0i];
  u_xlatu183 = x_1880;
  let x_1881 : u32 = u_xlatu183;
  u_xlat47.z = f32(x_1881);
  let x_1885 : f32 = u_xlat0;
  let x_1887 : vec3<f32> = u_xlat47;
  let x_1889 : vec2<f32> = (vec2<f32>(x_1885, x_1885) * vec2<f32>(x_1887.x, x_1887.z));
  let x_1890 : vec3<f32> = u_xlat115;
  u_xlat115 = vec3<f32>(x_1889.x, x_1890.y, x_1889.y);
  let x_1893 : f32 = u_xlat47.z;
  let x_1894 : f32 = u_xlat0;
  let x_1897 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1893 * x_1894) + x_1897);
  let x_1903 : u32 = x_28.x_HistogramBuffer_buf[95i].value[0i];
  u_xlatu48 = x_1903;
  let x_1905 : u32 = u_xlatu48;
  u_xlat48.x = f32(x_1905);
  let x_1909 : f32 = u_xlat48.x;
  let x_1910 : f32 = u_xlat0;
  let x_1913 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1909 * x_1910) + x_1913);
  let x_1919 : u32 = x_28.x_HistogramBuffer_buf[96i].value[0i];
  u_xlatu184 = x_1919;
  let x_1920 : u32 = u_xlatu184;
  u_xlat48.z = f32(x_1920);
  let x_1924 : f32 = u_xlat0;
  let x_1926 : vec3<f32> = u_xlat48;
  let x_1928 : vec2<f32> = (vec2<f32>(x_1924, x_1924) * vec2<f32>(x_1926.x, x_1926.z));
  let x_1929 : vec3<f32> = u_xlat116;
  u_xlat116 = vec3<f32>(x_1928.x, x_1929.y, x_1928.y);
  let x_1932 : f32 = u_xlat48.z;
  let x_1933 : f32 = u_xlat0;
  let x_1936 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1932 * x_1933) + x_1936);
  let x_1942 : u32 = x_28.x_HistogramBuffer_buf[97i].value[0i];
  u_xlatu49 = x_1942;
  let x_1944 : u32 = u_xlatu49;
  u_xlat49.x = f32(x_1944);
  let x_1948 : f32 = u_xlat49.x;
  let x_1949 : f32 = u_xlat0;
  let x_1952 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1948 * x_1949) + x_1952);
  let x_1958 : u32 = x_28.x_HistogramBuffer_buf[98i].value[0i];
  u_xlatu185 = x_1958;
  let x_1959 : u32 = u_xlatu185;
  u_xlat49.z = f32(x_1959);
  let x_1963 : f32 = u_xlat0;
  let x_1965 : vec3<f32> = u_xlat49;
  let x_1967 : vec2<f32> = (vec2<f32>(x_1963, x_1963) * vec2<f32>(x_1965.x, x_1965.z));
  let x_1968 : vec3<f32> = u_xlat117;
  u_xlat117 = vec3<f32>(x_1967.x, x_1968.y, x_1967.y);
  let x_1971 : f32 = u_xlat49.z;
  let x_1972 : f32 = u_xlat0;
  let x_1975 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1971 * x_1972) + x_1975);
  let x_1981 : u32 = x_28.x_HistogramBuffer_buf[99i].value[0i];
  u_xlatu50 = x_1981;
  let x_1983 : u32 = u_xlatu50;
  u_xlat50.x = f32(x_1983);
  let x_1987 : f32 = u_xlat50.x;
  let x_1988 : f32 = u_xlat0;
  let x_1991 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_1987 * x_1988) + x_1991);
  let x_1997 : u32 = x_28.x_HistogramBuffer_buf[100i].value[0i];
  u_xlatu186 = x_1997;
  let x_1998 : u32 = u_xlatu186;
  u_xlat50.z = f32(x_1998);
  let x_2002 : f32 = u_xlat0;
  let x_2004 : vec3<f32> = u_xlat50;
  let x_2006 : vec2<f32> = (vec2<f32>(x_2002, x_2002) * vec2<f32>(x_2004.x, x_2004.z));
  let x_2007 : vec3<f32> = u_xlat118;
  u_xlat118 = vec3<f32>(x_2006.x, x_2007.y, x_2006.y);
  let x_2010 : f32 = u_xlat50.z;
  let x_2011 : f32 = u_xlat0;
  let x_2014 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2010 * x_2011) + x_2014);
  let x_2020 : u32 = x_28.x_HistogramBuffer_buf[101i].value[0i];
  u_xlatu51 = x_2020;
  let x_2022 : u32 = u_xlatu51;
  u_xlat51.x = f32(x_2022);
  let x_2026 : f32 = u_xlat51.x;
  let x_2027 : f32 = u_xlat0;
  let x_2030 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2026 * x_2027) + x_2030);
  let x_2036 : u32 = x_28.x_HistogramBuffer_buf[102i].value[0i];
  u_xlatu187 = x_2036;
  let x_2037 : u32 = u_xlatu187;
  u_xlat51.z = f32(x_2037);
  let x_2041 : f32 = u_xlat0;
  let x_2043 : vec3<f32> = u_xlat51;
  let x_2045 : vec2<f32> = (vec2<f32>(x_2041, x_2041) * vec2<f32>(x_2043.x, x_2043.z));
  let x_2046 : vec3<f32> = u_xlat119;
  u_xlat119 = vec3<f32>(x_2045.x, x_2046.y, x_2045.y);
  let x_2049 : f32 = u_xlat51.z;
  let x_2050 : f32 = u_xlat0;
  let x_2053 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2049 * x_2050) + x_2053);
  let x_2059 : u32 = x_28.x_HistogramBuffer_buf[103i].value[0i];
  u_xlatu52 = x_2059;
  let x_2061 : u32 = u_xlatu52;
  u_xlat52.x = f32(x_2061);
  let x_2065 : f32 = u_xlat52.x;
  let x_2066 : f32 = u_xlat0;
  let x_2069 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2065 * x_2066) + x_2069);
  let x_2075 : u32 = x_28.x_HistogramBuffer_buf[104i].value[0i];
  u_xlatu188 = x_2075;
  let x_2076 : u32 = u_xlatu188;
  u_xlat52.z = f32(x_2076);
  let x_2080 : f32 = u_xlat0;
  let x_2082 : vec3<f32> = u_xlat52;
  let x_2084 : vec2<f32> = (vec2<f32>(x_2080, x_2080) * vec2<f32>(x_2082.x, x_2082.z));
  let x_2085 : vec3<f32> = u_xlat120;
  u_xlat120 = vec3<f32>(x_2084.x, x_2085.y, x_2084.y);
  let x_2088 : f32 = u_xlat52.z;
  let x_2089 : f32 = u_xlat0;
  let x_2092 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2088 * x_2089) + x_2092);
  let x_2098 : u32 = x_28.x_HistogramBuffer_buf[105i].value[0i];
  u_xlatu53 = x_2098;
  let x_2100 : u32 = u_xlatu53;
  u_xlat53.x = f32(x_2100);
  let x_2104 : f32 = u_xlat53.x;
  let x_2105 : f32 = u_xlat0;
  let x_2108 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2104 * x_2105) + x_2108);
  let x_2114 : u32 = x_28.x_HistogramBuffer_buf[106i].value[0i];
  u_xlatu189 = x_2114;
  let x_2115 : u32 = u_xlatu189;
  u_xlat53.z = f32(x_2115);
  let x_2119 : f32 = u_xlat0;
  let x_2121 : vec3<f32> = u_xlat53;
  let x_2123 : vec2<f32> = (vec2<f32>(x_2119, x_2119) * vec2<f32>(x_2121.x, x_2121.z));
  let x_2124 : vec3<f32> = u_xlat121;
  u_xlat121 = vec3<f32>(x_2123.x, x_2124.y, x_2123.y);
  let x_2127 : f32 = u_xlat53.z;
  let x_2128 : f32 = u_xlat0;
  let x_2131 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2127 * x_2128) + x_2131);
  let x_2137 : u32 = x_28.x_HistogramBuffer_buf[107i].value[0i];
  u_xlatu54 = x_2137;
  let x_2139 : u32 = u_xlatu54;
  u_xlat54.x = f32(x_2139);
  let x_2143 : f32 = u_xlat54.x;
  let x_2144 : f32 = u_xlat0;
  let x_2147 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2143 * x_2144) + x_2147);
  let x_2153 : u32 = x_28.x_HistogramBuffer_buf[108i].value[0i];
  u_xlatu190 = x_2153;
  let x_2154 : u32 = u_xlatu190;
  u_xlat54.z = f32(x_2154);
  let x_2158 : f32 = u_xlat0;
  let x_2160 : vec3<f32> = u_xlat54;
  let x_2162 : vec2<f32> = (vec2<f32>(x_2158, x_2158) * vec2<f32>(x_2160.x, x_2160.z));
  let x_2163 : vec3<f32> = u_xlat122;
  u_xlat122 = vec3<f32>(x_2162.x, x_2163.y, x_2162.y);
  let x_2166 : f32 = u_xlat54.z;
  let x_2167 : f32 = u_xlat0;
  let x_2170 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2166 * x_2167) + x_2170);
  let x_2176 : u32 = x_28.x_HistogramBuffer_buf[109i].value[0i];
  u_xlatu55 = x_2176;
  let x_2178 : u32 = u_xlatu55;
  u_xlat55.x = f32(x_2178);
  let x_2182 : f32 = u_xlat55.x;
  let x_2183 : f32 = u_xlat0;
  let x_2186 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2182 * x_2183) + x_2186);
  let x_2192 : u32 = x_28.x_HistogramBuffer_buf[110i].value[0i];
  u_xlatu191 = x_2192;
  let x_2193 : u32 = u_xlatu191;
  u_xlat55.z = f32(x_2193);
  let x_2197 : f32 = u_xlat0;
  let x_2199 : vec3<f32> = u_xlat55;
  let x_2201 : vec2<f32> = (vec2<f32>(x_2197, x_2197) * vec2<f32>(x_2199.x, x_2199.z));
  let x_2202 : vec3<f32> = u_xlat123;
  u_xlat123 = vec3<f32>(x_2201.x, x_2202.y, x_2201.y);
  let x_2205 : f32 = u_xlat55.z;
  let x_2206 : f32 = u_xlat0;
  let x_2209 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2205 * x_2206) + x_2209);
  let x_2215 : u32 = x_28.x_HistogramBuffer_buf[111i].value[0i];
  u_xlatu56 = x_2215;
  let x_2217 : u32 = u_xlatu56;
  u_xlat56.x = f32(x_2217);
  let x_2221 : f32 = u_xlat56.x;
  let x_2222 : f32 = u_xlat0;
  let x_2225 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2221 * x_2222) + x_2225);
  let x_2231 : u32 = x_28.x_HistogramBuffer_buf[112i].value[0i];
  u_xlatu192 = x_2231;
  let x_2232 : u32 = u_xlatu192;
  u_xlat56.z = f32(x_2232);
  let x_2236 : f32 = u_xlat0;
  let x_2238 : vec3<f32> = u_xlat56;
  let x_2240 : vec2<f32> = (vec2<f32>(x_2236, x_2236) * vec2<f32>(x_2238.x, x_2238.z));
  let x_2241 : vec3<f32> = u_xlat124;
  u_xlat124 = vec3<f32>(x_2240.x, x_2241.y, x_2240.y);
  let x_2244 : f32 = u_xlat56.z;
  let x_2245 : f32 = u_xlat0;
  let x_2248 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2244 * x_2245) + x_2248);
  let x_2254 : u32 = x_28.x_HistogramBuffer_buf[113i].value[0i];
  u_xlatu57 = x_2254;
  let x_2256 : u32 = u_xlatu57;
  u_xlat57.x = f32(x_2256);
  let x_2260 : f32 = u_xlat57.x;
  let x_2261 : f32 = u_xlat0;
  let x_2264 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2260 * x_2261) + x_2264);
  let x_2270 : u32 = x_28.x_HistogramBuffer_buf[114i].value[0i];
  u_xlatu193 = x_2270;
  let x_2271 : u32 = u_xlatu193;
  u_xlat57.z = f32(x_2271);
  let x_2275 : f32 = u_xlat0;
  let x_2277 : vec3<f32> = u_xlat57;
  let x_2279 : vec2<f32> = (vec2<f32>(x_2275, x_2275) * vec2<f32>(x_2277.x, x_2277.z));
  let x_2280 : vec3<f32> = u_xlat125;
  u_xlat125 = vec3<f32>(x_2279.x, x_2280.y, x_2279.y);
  let x_2283 : f32 = u_xlat57.z;
  let x_2284 : f32 = u_xlat0;
  let x_2287 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2283 * x_2284) + x_2287);
  let x_2293 : u32 = x_28.x_HistogramBuffer_buf[115i].value[0i];
  u_xlatu58 = x_2293;
  let x_2295 : u32 = u_xlatu58;
  u_xlat58.x = f32(x_2295);
  let x_2299 : f32 = u_xlat58.x;
  let x_2300 : f32 = u_xlat0;
  let x_2303 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2299 * x_2300) + x_2303);
  let x_2309 : u32 = x_28.x_HistogramBuffer_buf[116i].value[0i];
  u_xlatu194 = x_2309;
  let x_2310 : u32 = u_xlatu194;
  u_xlat58.z = f32(x_2310);
  let x_2314 : f32 = u_xlat0;
  let x_2316 : vec3<f32> = u_xlat58;
  let x_2318 : vec2<f32> = (vec2<f32>(x_2314, x_2314) * vec2<f32>(x_2316.x, x_2316.z));
  let x_2319 : vec3<f32> = u_xlat126;
  u_xlat126 = vec3<f32>(x_2318.x, x_2319.y, x_2318.y);
  let x_2322 : f32 = u_xlat58.z;
  let x_2323 : f32 = u_xlat0;
  let x_2326 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2322 * x_2323) + x_2326);
  let x_2332 : u32 = x_28.x_HistogramBuffer_buf[117i].value[0i];
  u_xlatu59 = x_2332;
  let x_2334 : u32 = u_xlatu59;
  u_xlat59.x = f32(x_2334);
  let x_2338 : f32 = u_xlat59.x;
  let x_2339 : f32 = u_xlat0;
  let x_2342 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2338 * x_2339) + x_2342);
  let x_2348 : u32 = x_28.x_HistogramBuffer_buf[118i].value[0i];
  u_xlatu195 = x_2348;
  let x_2349 : u32 = u_xlatu195;
  u_xlat59.z = f32(x_2349);
  let x_2353 : f32 = u_xlat0;
  let x_2355 : vec3<f32> = u_xlat59;
  let x_2357 : vec2<f32> = (vec2<f32>(x_2353, x_2353) * vec2<f32>(x_2355.x, x_2355.z));
  let x_2358 : vec3<f32> = u_xlat127;
  u_xlat127 = vec3<f32>(x_2357.x, x_2358.y, x_2357.y);
  let x_2361 : f32 = u_xlat59.z;
  let x_2362 : f32 = u_xlat0;
  let x_2365 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2361 * x_2362) + x_2365);
  let x_2371 : u32 = x_28.x_HistogramBuffer_buf[119i].value[0i];
  u_xlatu60 = x_2371;
  let x_2373 : u32 = u_xlatu60;
  u_xlat60.x = f32(x_2373);
  let x_2377 : f32 = u_xlat60.x;
  let x_2378 : f32 = u_xlat0;
  let x_2381 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2377 * x_2378) + x_2381);
  let x_2387 : u32 = x_28.x_HistogramBuffer_buf[120i].value[0i];
  u_xlatu196 = x_2387;
  let x_2388 : u32 = u_xlatu196;
  u_xlat60.z = f32(x_2388);
  let x_2392 : f32 = u_xlat0;
  let x_2394 : vec3<f32> = u_xlat60;
  let x_2396 : vec2<f32> = (vec2<f32>(x_2392, x_2392) * vec2<f32>(x_2394.x, x_2394.z));
  let x_2397 : vec3<f32> = u_xlat128;
  u_xlat128 = vec3<f32>(x_2396.x, x_2397.y, x_2396.y);
  let x_2400 : f32 = u_xlat60.z;
  let x_2401 : f32 = u_xlat0;
  let x_2404 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2400 * x_2401) + x_2404);
  let x_2410 : u32 = x_28.x_HistogramBuffer_buf[121i].value[0i];
  u_xlatu61 = x_2410;
  let x_2412 : u32 = u_xlatu61;
  u_xlat61.x = f32(x_2412);
  let x_2416 : f32 = u_xlat61.x;
  let x_2417 : f32 = u_xlat0;
  let x_2420 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2416 * x_2417) + x_2420);
  let x_2426 : u32 = x_28.x_HistogramBuffer_buf[122i].value[0i];
  u_xlatu197 = x_2426;
  let x_2427 : u32 = u_xlatu197;
  u_xlat61.z = f32(x_2427);
  let x_2431 : f32 = u_xlat0;
  let x_2433 : vec3<f32> = u_xlat61;
  let x_2435 : vec2<f32> = (vec2<f32>(x_2431, x_2431) * vec2<f32>(x_2433.x, x_2433.z));
  let x_2436 : vec3<f32> = u_xlat129;
  u_xlat129 = vec3<f32>(x_2435.x, x_2436.y, x_2435.y);
  let x_2439 : f32 = u_xlat61.z;
  let x_2440 : f32 = u_xlat0;
  let x_2443 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2439 * x_2440) + x_2443);
  let x_2449 : u32 = x_28.x_HistogramBuffer_buf[123i].value[0i];
  u_xlatu62 = x_2449;
  let x_2451 : u32 = u_xlatu62;
  u_xlat62.x = f32(x_2451);
  let x_2455 : f32 = u_xlat62.x;
  let x_2456 : f32 = u_xlat0;
  let x_2459 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2455 * x_2456) + x_2459);
  let x_2465 : u32 = x_28.x_HistogramBuffer_buf[124i].value[0i];
  u_xlatu198 = x_2465;
  let x_2466 : u32 = u_xlatu198;
  u_xlat62.z = f32(x_2466);
  let x_2470 : f32 = u_xlat0;
  let x_2472 : vec3<f32> = u_xlat62;
  let x_2474 : vec2<f32> = (vec2<f32>(x_2470, x_2470) * vec2<f32>(x_2472.x, x_2472.z));
  let x_2475 : vec3<f32> = u_xlat130;
  u_xlat130 = vec3<f32>(x_2474.x, x_2475.y, x_2474.y);
  let x_2478 : f32 = u_xlat62.z;
  let x_2479 : f32 = u_xlat0;
  let x_2482 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2478 * x_2479) + x_2482);
  let x_2488 : u32 = x_28.x_HistogramBuffer_buf[125i].value[0i];
  u_xlatu63 = x_2488;
  let x_2490 : u32 = u_xlatu63;
  u_xlat63.x = f32(x_2490);
  let x_2494 : f32 = u_xlat63.x;
  let x_2495 : f32 = u_xlat0;
  let x_2498 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2494 * x_2495) + x_2498);
  let x_2504 : u32 = x_28.x_HistogramBuffer_buf[126i].value[0i];
  u_xlatu199 = x_2504;
  let x_2505 : u32 = u_xlatu199;
  u_xlat63.z = f32(x_2505);
  let x_2509 : f32 = u_xlat0;
  let x_2511 : vec3<f32> = u_xlat63;
  let x_2513 : vec2<f32> = (vec2<f32>(x_2509, x_2509) * vec2<f32>(x_2511.x, x_2511.z));
  let x_2514 : vec3<f32> = u_xlat131;
  u_xlat131 = vec3<f32>(x_2513.x, x_2514.y, x_2513.y);
  let x_2517 : f32 = u_xlat63.z;
  let x_2518 : f32 = u_xlat0;
  let x_2521 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2517 * x_2518) + x_2521);
  let x_2527 : u32 = x_28.x_HistogramBuffer_buf[127i].value[0i];
  u_xlatu64 = x_2527;
  let x_2529 : u32 = u_xlatu64;
  u_xlat64 = f32(x_2529);
  let x_2532 : f32 = u_xlat0;
  let x_2533 : f32 = u_xlat64;
  u_xlat132 = (x_2532 * x_2533);
  let x_2535 : f32 = u_xlat64;
  let x_2536 : f32 = u_xlat0;
  let x_2539 : f32 = u_xlat69.x;
  u_xlat69.x = ((x_2535 * x_2536) + x_2539);
  let x_2544 : f32 = u_xlat69.x;
  let x_2550 : f32 = x_2547.x_Params.x;
  u_xlat200 = (x_2544 * x_2550);
  let x_2552 : f32 = u_xlat136;
  let x_2553 : f32 = u_xlat200;
  u_xlat136 = min(x_2552, x_2553);
  let x_2556 : f32 = u_xlat68.x;
  let x_2557 : f32 = u_xlat0;
  let x_2559 : f32 = u_xlat136;
  u_xlat68.x = ((x_2556 * x_2557) + -(x_2559));
  let x_2564 : vec2<f32> = u_xlat69;
  let x_2568 : vec4<f32> = x_2547.x_Params;
  let x_2571 : f32 = u_xlat136;
  let x_2574 : vec2<f32> = ((vec2<f32>(x_2564.x, x_2564.x) * vec2<f32>(x_2568.x, x_2568.y)) + -(vec2<f32>(x_2571, x_2571)));
  let x_2575 : vec4<f32> = u_xlat65;
  u_xlat65 = vec4<f32>(x_2574.x, x_2574.y, x_2575.z, x_2575.w);
  let x_2579 : f32 = u_xlat68.x;
  let x_2581 : f32 = u_xlat65.y;
  u_xlat66.y = min(x_2579, x_2581);
  let x_2585 : f32 = u_xlat65.y;
  let x_2587 : f32 = u_xlat66.y;
  u_xlat65.z = (x_2585 + -(x_2587));
  let x_2592 : f32 = x_2547.x_ScaleOffsetRes.y;
  let x_2595 : f32 = x_2547.x_ScaleOffsetRes.x;
  u_xlat68.x = (-(x_2592) / x_2595);
  let x_2599 : f32 = u_xlat68.x;
  u_xlat68.x = exp2(x_2599);
  let x_2603 : f32 = u_xlat66.y;
  let x_2605 : f32 = u_xlat68.x;
  u_xlat66.x = (x_2603 * x_2605);
  let x_2609 : f32 = u_xlat1.x;
  let x_2611 : f32 = u_xlat65.x;
  u_xlat68.x = min(x_2609, x_2611);
  let x_2614 : f32 = u_xlat204;
  let x_2615 : f32 = u_xlat0;
  let x_2618 : f32 = u_xlat68.x;
  u_xlat136 = ((x_2614 * x_2615) + -(x_2618));
  let x_2621 : vec2<f32> = u_xlat68;
  let x_2624 : vec4<f32> = u_xlat65;
  let x_2626 : vec2<f32> = (-(vec2<f32>(x_2621.x, x_2621.x)) + vec2<f32>(x_2624.x, x_2624.z));
  let x_2627 : vec4<f32> = u_xlat65;
  u_xlat65 = vec4<f32>(x_2626.x, x_2626.y, x_2627.z, x_2627.w);
  let x_2629 : f32 = u_xlat136;
  let x_2631 : f32 = u_xlat65.y;
  u_xlat1.y = min(x_2629, x_2631);
  let x_2635 : f32 = u_xlat1.y;
  let x_2638 : f32 = u_xlat65.y;
  u_xlat65.z = (-(x_2635) + x_2638);
  let x_2643 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat67 = (-(vec4<f32>(x_2643.y, x_2643.y, x_2643.y, x_2643.y)) + vec4<f32>(0.0078125f, 0.015625f, 0.0234375f, 0.03125f));
  let x_2652 : vec4<f32> = u_xlat67;
  let x_2654 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat67 = (x_2652 / vec4<f32>(x_2654.x, x_2654.x, x_2654.x, x_2654.x));
  let x_2657 : vec4<f32> = u_xlat67;
  u_xlat67 = exp2(x_2657);
  let x_2660 : f32 = u_xlat1.y;
  let x_2662 : f32 = u_xlat67.x;
  u_xlat1.x = (x_2660 * x_2662);
  let x_2665 : vec2<f32> = u_xlat1;
  let x_2666 : vec2<f32> = u_xlat66;
  u_xlat68 = (x_2665 + x_2666);
  let x_2668 : f32 = u_xlat205;
  let x_2670 : f32 = u_xlat65.x;
  u_xlat204 = min(x_2668, x_2670);
  let x_2672 : f32 = u_xlat137;
  let x_2673 : f32 = u_xlat0;
  let x_2675 : f32 = u_xlat204;
  u_xlat1.x = ((x_2672 * x_2673) + -(x_2675));
  let x_2679 : f32 = u_xlat204;
  let x_2682 : vec4<f32> = u_xlat65;
  let x_2684 : vec2<f32> = (-(vec2<f32>(x_2679, x_2679)) + vec2<f32>(x_2682.x, x_2682.z));
  let x_2685 : vec4<f32> = u_xlat65;
  u_xlat65 = vec4<f32>(x_2684.x, x_2684.y, x_2685.z, x_2685.w);
  let x_2688 : f32 = u_xlat1.x;
  let x_2690 : f32 = u_xlat65.y;
  u_xlat1.y = min(x_2688, x_2690);
  let x_2694 : f32 = u_xlat1.y;
  let x_2697 : f32 = u_xlat65.y;
  u_xlat65.z = (-(x_2694) + x_2697);
  let x_2701 : f32 = u_xlat1.y;
  let x_2703 : f32 = u_xlat67.y;
  u_xlat1.x = (x_2701 * x_2703);
  let x_2706 : vec2<f32> = u_xlat68;
  let x_2707 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2706 + x_2707);
  let x_2710 : f32 = u_xlat70.x;
  let x_2712 : f32 = u_xlat65.x;
  u_xlat204 = min(x_2710, x_2712);
  let x_2715 : f32 = u_xlat2.x;
  let x_2716 : f32 = u_xlat0;
  let x_2718 : f32 = u_xlat204;
  u_xlat1.x = ((x_2715 * x_2716) + -(x_2718));
  let x_2722 : f32 = u_xlat204;
  let x_2725 : vec4<f32> = u_xlat65;
  let x_2727 : vec2<f32> = (-(vec2<f32>(x_2722, x_2722)) + vec2<f32>(x_2725.x, x_2725.z));
  let x_2728 : vec4<f32> = u_xlat65;
  u_xlat65 = vec4<f32>(x_2727.x, x_2727.y, x_2728.z, x_2728.w);
  let x_2731 : f32 = u_xlat1.x;
  let x_2733 : f32 = u_xlat65.y;
  u_xlat1.y = min(x_2731, x_2733);
  let x_2737 : f32 = u_xlat1.y;
  let x_2740 : f32 = u_xlat65.y;
  u_xlat65.z = (-(x_2737) + x_2740);
  let x_2744 : f32 = u_xlat1.y;
  let x_2746 : f32 = u_xlat67.z;
  u_xlat1.x = (x_2744 * x_2746);
  let x_2749 : vec2<f32> = u_xlat68;
  let x_2750 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2749 + x_2750);
  let x_2753 : f32 = u_xlat70.z;
  let x_2755 : f32 = u_xlat65.x;
  u_xlat204 = min(x_2753, x_2755);
  let x_2758 : f32 = u_xlat2.z;
  let x_2759 : f32 = u_xlat0;
  let x_2761 : f32 = u_xlat204;
  u_xlat1.x = ((x_2758 * x_2759) + -(x_2761));
  let x_2765 : f32 = u_xlat204;
  let x_2768 : vec4<f32> = u_xlat65;
  let x_2770 : vec2<f32> = (-(vec2<f32>(x_2765, x_2765)) + vec2<f32>(x_2768.x, x_2768.z));
  let x_2771 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2770.x, x_2770.y, x_2771.z);
  let x_2774 : f32 = u_xlat1.x;
  let x_2776 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_2774, x_2776);
  let x_2780 : f32 = u_xlat1.y;
  let x_2783 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_2780) + x_2783);
  let x_2787 : f32 = u_xlat1.y;
  let x_2790 : f32 = u_xlat67.w;
  u_xlat1.x = (x_2787 * x_2790);
  let x_2793 : vec2<f32> = u_xlat68;
  let x_2794 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2793 + x_2794);
  let x_2797 : f32 = u_xlat71.x;
  let x_2799 : f32 = u_xlat2.x;
  u_xlat204 = min(x_2797, x_2799);
  let x_2802 : f32 = u_xlat3.x;
  let x_2803 : f32 = u_xlat0;
  let x_2805 : f32 = u_xlat204;
  u_xlat1.x = ((x_2802 * x_2803) + -(x_2805));
  let x_2809 : f32 = u_xlat204;
  let x_2812 : vec3<f32> = u_xlat2;
  let x_2814 : vec2<f32> = (-(vec2<f32>(x_2809, x_2809)) + vec2<f32>(x_2812.x, x_2812.z));
  let x_2815 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2814.x, x_2814.y, x_2815.z);
  let x_2818 : f32 = u_xlat1.x;
  let x_2820 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_2818, x_2820);
  let x_2824 : f32 = u_xlat1.y;
  let x_2827 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_2824) + x_2827);
  let x_2831 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat65 = (-(vec4<f32>(x_2831.y, x_2831.y, x_2831.y, x_2831.y)) + vec4<f32>(0.0390625f, 0.046875f, 0.0546875f, 0.0625f));
  let x_2840 : vec4<f32> = u_xlat65;
  let x_2842 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat65 = (x_2840 / vec4<f32>(x_2842.x, x_2842.x, x_2842.x, x_2842.x));
  let x_2845 : vec4<f32> = u_xlat65;
  u_xlat65 = exp2(x_2845);
  let x_2848 : f32 = u_xlat1.y;
  let x_2850 : f32 = u_xlat65.x;
  u_xlat1.x = (x_2848 * x_2850);
  let x_2853 : vec2<f32> = u_xlat68;
  let x_2854 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2853 + x_2854);
  let x_2857 : f32 = u_xlat71.z;
  let x_2859 : f32 = u_xlat2.x;
  u_xlat204 = min(x_2857, x_2859);
  let x_2862 : f32 = u_xlat3.z;
  let x_2863 : f32 = u_xlat0;
  let x_2865 : f32 = u_xlat204;
  u_xlat1.x = ((x_2862 * x_2863) + -(x_2865));
  let x_2869 : f32 = u_xlat204;
  let x_2872 : vec3<f32> = u_xlat2;
  let x_2874 : vec2<f32> = (-(vec2<f32>(x_2869, x_2869)) + vec2<f32>(x_2872.x, x_2872.z));
  let x_2875 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2874.x, x_2874.y, x_2875.z);
  let x_2878 : f32 = u_xlat1.x;
  let x_2880 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_2878, x_2880);
  let x_2884 : f32 = u_xlat1.y;
  let x_2887 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_2884) + x_2887);
  let x_2891 : f32 = u_xlat1.y;
  let x_2893 : f32 = u_xlat65.y;
  u_xlat1.x = (x_2891 * x_2893);
  let x_2896 : vec2<f32> = u_xlat68;
  let x_2897 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2896 + x_2897);
  let x_2900 : f32 = u_xlat72.x;
  let x_2902 : f32 = u_xlat2.x;
  u_xlat204 = min(x_2900, x_2902);
  let x_2905 : f32 = u_xlat4.x;
  let x_2906 : f32 = u_xlat0;
  let x_2908 : f32 = u_xlat204;
  u_xlat1.x = ((x_2905 * x_2906) + -(x_2908));
  let x_2912 : f32 = u_xlat204;
  let x_2915 : vec3<f32> = u_xlat2;
  let x_2917 : vec2<f32> = (-(vec2<f32>(x_2912, x_2912)) + vec2<f32>(x_2915.x, x_2915.z));
  let x_2918 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2917.x, x_2917.y, x_2918.z);
  let x_2921 : f32 = u_xlat1.x;
  let x_2923 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_2921, x_2923);
  let x_2927 : f32 = u_xlat1.y;
  let x_2930 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_2927) + x_2930);
  let x_2934 : f32 = u_xlat1.y;
  let x_2936 : f32 = u_xlat65.z;
  u_xlat1.x = (x_2934 * x_2936);
  let x_2939 : vec2<f32> = u_xlat68;
  let x_2940 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2939 + x_2940);
  let x_2943 : f32 = u_xlat72.z;
  let x_2945 : f32 = u_xlat2.x;
  u_xlat204 = min(x_2943, x_2945);
  let x_2948 : f32 = u_xlat4.z;
  let x_2949 : f32 = u_xlat0;
  let x_2951 : f32 = u_xlat204;
  u_xlat1.x = ((x_2948 * x_2949) + -(x_2951));
  let x_2955 : f32 = u_xlat204;
  let x_2958 : vec3<f32> = u_xlat2;
  let x_2960 : vec2<f32> = (-(vec2<f32>(x_2955, x_2955)) + vec2<f32>(x_2958.x, x_2958.z));
  let x_2961 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_2960.x, x_2960.y, x_2961.z);
  let x_2964 : f32 = u_xlat1.x;
  let x_2966 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_2964, x_2966);
  let x_2970 : f32 = u_xlat1.y;
  let x_2973 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_2970) + x_2973);
  let x_2977 : f32 = u_xlat1.y;
  let x_2979 : f32 = u_xlat65.w;
  u_xlat1.x = (x_2977 * x_2979);
  let x_2982 : vec2<f32> = u_xlat68;
  let x_2983 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_2982 + x_2983);
  let x_2986 : f32 = u_xlat73.x;
  let x_2988 : f32 = u_xlat2.x;
  u_xlat204 = min(x_2986, x_2988);
  let x_2991 : f32 = u_xlat5.x;
  let x_2992 : f32 = u_xlat0;
  let x_2994 : f32 = u_xlat204;
  u_xlat1.x = ((x_2991 * x_2992) + -(x_2994));
  let x_2998 : f32 = u_xlat204;
  let x_3001 : vec3<f32> = u_xlat2;
  let x_3003 : vec2<f32> = (-(vec2<f32>(x_2998, x_2998)) + vec2<f32>(x_3001.x, x_3001.z));
  let x_3004 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3003.x, x_3003.y, x_3004.z);
  let x_3007 : f32 = u_xlat1.x;
  let x_3009 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3007, x_3009);
  let x_3013 : f32 = u_xlat1.y;
  let x_3016 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3013) + x_3016);
  let x_3020 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3020.y, x_3020.y, x_3020.y, x_3020.y)) + vec4<f32>(0.0703125f, 0.078125f, 0.0859375f, 0.09375f));
  let x_3029 : vec4<f32> = u_xlat3;
  let x_3031 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_3029 / vec4<f32>(x_3031.x, x_3031.x, x_3031.x, x_3031.x));
  let x_3034 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3034);
  let x_3037 : f32 = u_xlat1.y;
  let x_3039 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3037 * x_3039);
  let x_3042 : vec2<f32> = u_xlat68;
  let x_3043 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3042 + x_3043);
  let x_3046 : f32 = u_xlat73.z;
  let x_3048 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3046, x_3048);
  let x_3051 : f32 = u_xlat5.z;
  let x_3052 : f32 = u_xlat0;
  let x_3054 : f32 = u_xlat204;
  u_xlat1.x = ((x_3051 * x_3052) + -(x_3054));
  let x_3058 : f32 = u_xlat204;
  let x_3061 : vec3<f32> = u_xlat2;
  let x_3063 : vec2<f32> = (-(vec2<f32>(x_3058, x_3058)) + vec2<f32>(x_3061.x, x_3061.z));
  let x_3064 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3063.x, x_3063.y, x_3064.z);
  let x_3067 : f32 = u_xlat1.x;
  let x_3069 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3067, x_3069);
  let x_3073 : f32 = u_xlat1.y;
  let x_3076 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3073) + x_3076);
  let x_3080 : f32 = u_xlat1.y;
  let x_3082 : f32 = u_xlat3.y;
  u_xlat1.x = (x_3080 * x_3082);
  let x_3085 : vec2<f32> = u_xlat68;
  let x_3086 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3085 + x_3086);
  let x_3089 : f32 = u_xlat74.x;
  let x_3091 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3089, x_3091);
  let x_3094 : f32 = u_xlat6.x;
  let x_3095 : f32 = u_xlat0;
  let x_3097 : f32 = u_xlat204;
  u_xlat1.x = ((x_3094 * x_3095) + -(x_3097));
  let x_3101 : f32 = u_xlat204;
  let x_3104 : vec3<f32> = u_xlat2;
  let x_3106 : vec2<f32> = (-(vec2<f32>(x_3101, x_3101)) + vec2<f32>(x_3104.x, x_3104.z));
  let x_3107 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3106.x, x_3106.y, x_3107.z);
  let x_3110 : f32 = u_xlat1.x;
  let x_3112 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3110, x_3112);
  let x_3116 : f32 = u_xlat1.y;
  let x_3119 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3116) + x_3119);
  let x_3123 : f32 = u_xlat1.y;
  let x_3125 : f32 = u_xlat3.z;
  u_xlat1.x = (x_3123 * x_3125);
  let x_3128 : vec2<f32> = u_xlat68;
  let x_3129 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3128 + x_3129);
  let x_3132 : f32 = u_xlat74.z;
  let x_3134 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3132, x_3134);
  let x_3137 : f32 = u_xlat6.z;
  let x_3138 : f32 = u_xlat0;
  let x_3140 : f32 = u_xlat204;
  u_xlat1.x = ((x_3137 * x_3138) + -(x_3140));
  let x_3144 : f32 = u_xlat204;
  let x_3147 : vec3<f32> = u_xlat2;
  let x_3149 : vec2<f32> = (-(vec2<f32>(x_3144, x_3144)) + vec2<f32>(x_3147.x, x_3147.z));
  let x_3150 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3149.x, x_3149.y, x_3150.z);
  let x_3153 : f32 = u_xlat1.x;
  let x_3155 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3153, x_3155);
  let x_3159 : f32 = u_xlat1.y;
  let x_3162 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3159) + x_3162);
  let x_3166 : f32 = u_xlat1.y;
  let x_3168 : f32 = u_xlat3.w;
  u_xlat1.x = (x_3166 * x_3168);
  let x_3171 : vec2<f32> = u_xlat68;
  let x_3172 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3171 + x_3172);
  let x_3175 : f32 = u_xlat75.x;
  let x_3177 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3175, x_3177);
  let x_3180 : f32 = u_xlat7.x;
  let x_3181 : f32 = u_xlat0;
  let x_3183 : f32 = u_xlat204;
  u_xlat1.x = ((x_3180 * x_3181) + -(x_3183));
  let x_3187 : f32 = u_xlat204;
  let x_3190 : vec3<f32> = u_xlat2;
  let x_3192 : vec2<f32> = (-(vec2<f32>(x_3187, x_3187)) + vec2<f32>(x_3190.x, x_3190.z));
  let x_3193 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3192.x, x_3192.y, x_3193.z);
  let x_3196 : f32 = u_xlat1.x;
  let x_3198 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3196, x_3198);
  let x_3202 : f32 = u_xlat1.y;
  let x_3205 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3202) + x_3205);
  let x_3209 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3209.y, x_3209.y, x_3209.y, x_3209.y)) + vec4<f32>(0.1015625f, 0.109375f, 0.1171875f, 0.125f));
  let x_3218 : vec4<f32> = u_xlat3;
  let x_3220 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_3218 / vec4<f32>(x_3220.x, x_3220.x, x_3220.x, x_3220.x));
  let x_3223 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3223);
  let x_3226 : f32 = u_xlat1.y;
  let x_3228 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3226 * x_3228);
  let x_3231 : vec2<f32> = u_xlat68;
  let x_3232 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3231 + x_3232);
  let x_3235 : f32 = u_xlat75.z;
  let x_3237 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3235, x_3237);
  let x_3240 : f32 = u_xlat7.z;
  let x_3241 : f32 = u_xlat0;
  let x_3243 : f32 = u_xlat204;
  u_xlat1.x = ((x_3240 * x_3241) + -(x_3243));
  let x_3247 : f32 = u_xlat204;
  let x_3250 : vec3<f32> = u_xlat2;
  let x_3252 : vec2<f32> = (-(vec2<f32>(x_3247, x_3247)) + vec2<f32>(x_3250.x, x_3250.z));
  let x_3253 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3252.x, x_3252.y, x_3253.z);
  let x_3256 : f32 = u_xlat1.x;
  let x_3258 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3256, x_3258);
  let x_3262 : f32 = u_xlat1.y;
  let x_3265 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3262) + x_3265);
  let x_3269 : f32 = u_xlat1.y;
  let x_3271 : f32 = u_xlat3.y;
  u_xlat1.x = (x_3269 * x_3271);
  let x_3274 : vec2<f32> = u_xlat68;
  let x_3275 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3274 + x_3275);
  let x_3278 : f32 = u_xlat76.x;
  let x_3280 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3278, x_3280);
  let x_3283 : f32 = u_xlat8.x;
  let x_3284 : f32 = u_xlat0;
  let x_3286 : f32 = u_xlat204;
  u_xlat1.x = ((x_3283 * x_3284) + -(x_3286));
  let x_3290 : f32 = u_xlat204;
  let x_3293 : vec3<f32> = u_xlat2;
  let x_3295 : vec2<f32> = (-(vec2<f32>(x_3290, x_3290)) + vec2<f32>(x_3293.x, x_3293.z));
  let x_3296 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3295.x, x_3295.y, x_3296.z);
  let x_3299 : f32 = u_xlat1.x;
  let x_3301 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3299, x_3301);
  let x_3305 : f32 = u_xlat1.y;
  let x_3308 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3305) + x_3308);
  let x_3312 : f32 = u_xlat1.y;
  let x_3314 : f32 = u_xlat3.z;
  u_xlat1.x = (x_3312 * x_3314);
  let x_3317 : vec2<f32> = u_xlat68;
  let x_3318 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3317 + x_3318);
  let x_3321 : f32 = u_xlat76.z;
  let x_3323 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3321, x_3323);
  let x_3326 : f32 = u_xlat8.z;
  let x_3327 : f32 = u_xlat0;
  let x_3329 : f32 = u_xlat204;
  u_xlat1.x = ((x_3326 * x_3327) + -(x_3329));
  let x_3333 : f32 = u_xlat204;
  let x_3336 : vec3<f32> = u_xlat2;
  let x_3338 : vec2<f32> = (-(vec2<f32>(x_3333, x_3333)) + vec2<f32>(x_3336.x, x_3336.z));
  let x_3339 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3338.x, x_3338.y, x_3339.z);
  let x_3342 : f32 = u_xlat1.x;
  let x_3344 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3342, x_3344);
  let x_3348 : f32 = u_xlat1.y;
  let x_3351 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3348) + x_3351);
  let x_3355 : f32 = u_xlat1.y;
  let x_3357 : f32 = u_xlat3.w;
  u_xlat1.x = (x_3355 * x_3357);
  let x_3360 : vec2<f32> = u_xlat68;
  let x_3361 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3360 + x_3361);
  let x_3364 : f32 = u_xlat77.x;
  let x_3366 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3364, x_3366);
  let x_3369 : f32 = u_xlat9.x;
  let x_3370 : f32 = u_xlat0;
  let x_3372 : f32 = u_xlat204;
  u_xlat1.x = ((x_3369 * x_3370) + -(x_3372));
  let x_3376 : f32 = u_xlat204;
  let x_3379 : vec3<f32> = u_xlat2;
  let x_3381 : vec2<f32> = (-(vec2<f32>(x_3376, x_3376)) + vec2<f32>(x_3379.x, x_3379.z));
  let x_3382 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3381.x, x_3381.y, x_3382.z);
  let x_3385 : f32 = u_xlat1.x;
  let x_3387 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3385, x_3387);
  let x_3391 : f32 = u_xlat1.y;
  let x_3394 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3391) + x_3394);
  let x_3398 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3398.y, x_3398.y, x_3398.y, x_3398.y)) + vec4<f32>(0.1328125f, 0.140625f, 0.1484375f, 0.15625f));
  let x_3407 : vec4<f32> = u_xlat3;
  let x_3409 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_3407 / vec4<f32>(x_3409.x, x_3409.x, x_3409.x, x_3409.x));
  let x_3412 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3412);
  let x_3415 : f32 = u_xlat1.y;
  let x_3417 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3415 * x_3417);
  let x_3420 : vec2<f32> = u_xlat68;
  let x_3421 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3420 + x_3421);
  let x_3424 : f32 = u_xlat77.z;
  let x_3426 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3424, x_3426);
  let x_3429 : f32 = u_xlat9.z;
  let x_3430 : f32 = u_xlat0;
  let x_3432 : f32 = u_xlat204;
  u_xlat1.x = ((x_3429 * x_3430) + -(x_3432));
  let x_3436 : f32 = u_xlat204;
  let x_3439 : vec3<f32> = u_xlat2;
  let x_3441 : vec2<f32> = (-(vec2<f32>(x_3436, x_3436)) + vec2<f32>(x_3439.x, x_3439.z));
  let x_3442 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3441.x, x_3441.y, x_3442.z);
  let x_3445 : f32 = u_xlat1.x;
  let x_3447 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3445, x_3447);
  let x_3451 : f32 = u_xlat1.y;
  let x_3454 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3451) + x_3454);
  let x_3458 : f32 = u_xlat1.y;
  let x_3460 : f32 = u_xlat3.y;
  u_xlat1.x = (x_3458 * x_3460);
  let x_3463 : vec2<f32> = u_xlat68;
  let x_3464 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3463 + x_3464);
  let x_3467 : f32 = u_xlat78.x;
  let x_3469 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3467, x_3469);
  let x_3472 : f32 = u_xlat10.x;
  let x_3473 : f32 = u_xlat0;
  let x_3475 : f32 = u_xlat204;
  u_xlat1.x = ((x_3472 * x_3473) + -(x_3475));
  let x_3479 : f32 = u_xlat204;
  let x_3482 : vec3<f32> = u_xlat2;
  let x_3484 : vec2<f32> = (-(vec2<f32>(x_3479, x_3479)) + vec2<f32>(x_3482.x, x_3482.z));
  let x_3485 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3484.x, x_3484.y, x_3485.z);
  let x_3488 : f32 = u_xlat1.x;
  let x_3490 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3488, x_3490);
  let x_3494 : f32 = u_xlat1.y;
  let x_3497 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3494) + x_3497);
  let x_3501 : f32 = u_xlat1.y;
  let x_3503 : f32 = u_xlat3.z;
  u_xlat1.x = (x_3501 * x_3503);
  let x_3506 : vec2<f32> = u_xlat68;
  let x_3507 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3506 + x_3507);
  let x_3510 : f32 = u_xlat78.z;
  let x_3512 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3510, x_3512);
  let x_3515 : f32 = u_xlat10.z;
  let x_3516 : f32 = u_xlat0;
  let x_3518 : f32 = u_xlat204;
  u_xlat1.x = ((x_3515 * x_3516) + -(x_3518));
  let x_3522 : f32 = u_xlat204;
  let x_3525 : vec3<f32> = u_xlat2;
  let x_3527 : vec2<f32> = (-(vec2<f32>(x_3522, x_3522)) + vec2<f32>(x_3525.x, x_3525.z));
  let x_3528 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3527.x, x_3527.y, x_3528.z);
  let x_3531 : f32 = u_xlat1.x;
  let x_3533 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3531, x_3533);
  let x_3537 : f32 = u_xlat1.y;
  let x_3540 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3537) + x_3540);
  let x_3544 : f32 = u_xlat1.y;
  let x_3546 : f32 = u_xlat3.w;
  u_xlat1.x = (x_3544 * x_3546);
  let x_3549 : vec2<f32> = u_xlat68;
  let x_3550 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3549 + x_3550);
  let x_3553 : f32 = u_xlat79.x;
  let x_3555 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3553, x_3555);
  let x_3558 : f32 = u_xlat11.x;
  let x_3559 : f32 = u_xlat0;
  let x_3561 : f32 = u_xlat204;
  u_xlat1.x = ((x_3558 * x_3559) + -(x_3561));
  let x_3565 : f32 = u_xlat204;
  let x_3568 : vec3<f32> = u_xlat2;
  let x_3570 : vec2<f32> = (-(vec2<f32>(x_3565, x_3565)) + vec2<f32>(x_3568.x, x_3568.z));
  let x_3571 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3570.x, x_3570.y, x_3571.z);
  let x_3574 : f32 = u_xlat1.x;
  let x_3576 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3574, x_3576);
  let x_3580 : f32 = u_xlat1.y;
  let x_3583 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3580) + x_3583);
  let x_3587 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3587.y, x_3587.y, x_3587.y, x_3587.y)) + vec4<f32>(0.1640625f, 0.171875f, 0.1796875f, 0.1875f));
  let x_3596 : vec4<f32> = u_xlat3;
  let x_3598 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_3596 / vec4<f32>(x_3598.x, x_3598.x, x_3598.x, x_3598.x));
  let x_3601 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3601);
  let x_3604 : f32 = u_xlat1.y;
  let x_3606 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3604 * x_3606);
  let x_3609 : vec2<f32> = u_xlat68;
  let x_3610 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3609 + x_3610);
  let x_3613 : f32 = u_xlat79.z;
  let x_3615 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3613, x_3615);
  let x_3618 : f32 = u_xlat11.z;
  let x_3619 : f32 = u_xlat0;
  let x_3621 : f32 = u_xlat204;
  u_xlat1.x = ((x_3618 * x_3619) + -(x_3621));
  let x_3625 : f32 = u_xlat204;
  let x_3628 : vec3<f32> = u_xlat2;
  let x_3630 : vec2<f32> = (-(vec2<f32>(x_3625, x_3625)) + vec2<f32>(x_3628.x, x_3628.z));
  let x_3631 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3630.x, x_3630.y, x_3631.z);
  let x_3634 : f32 = u_xlat1.x;
  let x_3636 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3634, x_3636);
  let x_3640 : f32 = u_xlat1.y;
  let x_3643 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3640) + x_3643);
  let x_3647 : f32 = u_xlat1.y;
  let x_3649 : f32 = u_xlat3.y;
  u_xlat1.x = (x_3647 * x_3649);
  let x_3652 : vec2<f32> = u_xlat68;
  let x_3653 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3652 + x_3653);
  let x_3656 : f32 = u_xlat80.x;
  let x_3658 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3656, x_3658);
  let x_3661 : f32 = u_xlat12.x;
  let x_3662 : f32 = u_xlat0;
  let x_3664 : f32 = u_xlat204;
  u_xlat1.x = ((x_3661 * x_3662) + -(x_3664));
  let x_3668 : f32 = u_xlat204;
  let x_3671 : vec3<f32> = u_xlat2;
  let x_3673 : vec2<f32> = (-(vec2<f32>(x_3668, x_3668)) + vec2<f32>(x_3671.x, x_3671.z));
  let x_3674 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3673.x, x_3673.y, x_3674.z);
  let x_3677 : f32 = u_xlat1.x;
  let x_3679 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3677, x_3679);
  let x_3683 : f32 = u_xlat1.y;
  let x_3686 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3683) + x_3686);
  let x_3690 : f32 = u_xlat1.y;
  let x_3692 : f32 = u_xlat3.z;
  u_xlat1.x = (x_3690 * x_3692);
  let x_3695 : vec2<f32> = u_xlat68;
  let x_3696 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3695 + x_3696);
  let x_3699 : f32 = u_xlat80.z;
  let x_3701 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3699, x_3701);
  let x_3704 : f32 = u_xlat12.z;
  let x_3705 : f32 = u_xlat0;
  let x_3707 : f32 = u_xlat204;
  u_xlat1.x = ((x_3704 * x_3705) + -(x_3707));
  let x_3711 : f32 = u_xlat204;
  let x_3714 : vec3<f32> = u_xlat2;
  let x_3716 : vec2<f32> = (-(vec2<f32>(x_3711, x_3711)) + vec2<f32>(x_3714.x, x_3714.z));
  let x_3717 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3716.x, x_3716.y, x_3717.z);
  let x_3720 : f32 = u_xlat1.x;
  let x_3722 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3720, x_3722);
  let x_3726 : f32 = u_xlat1.y;
  let x_3729 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3726) + x_3729);
  let x_3733 : f32 = u_xlat1.y;
  let x_3735 : f32 = u_xlat3.w;
  u_xlat1.x = (x_3733 * x_3735);
  let x_3738 : vec2<f32> = u_xlat68;
  let x_3739 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3738 + x_3739);
  let x_3742 : f32 = u_xlat81.x;
  let x_3744 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3742, x_3744);
  let x_3747 : f32 = u_xlat13.x;
  let x_3748 : f32 = u_xlat0;
  let x_3750 : f32 = u_xlat204;
  u_xlat1.x = ((x_3747 * x_3748) + -(x_3750));
  let x_3754 : f32 = u_xlat204;
  let x_3757 : vec3<f32> = u_xlat2;
  let x_3759 : vec2<f32> = (-(vec2<f32>(x_3754, x_3754)) + vec2<f32>(x_3757.x, x_3757.z));
  let x_3760 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3759.x, x_3759.y, x_3760.z);
  let x_3763 : f32 = u_xlat1.x;
  let x_3765 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3763, x_3765);
  let x_3769 : f32 = u_xlat1.y;
  let x_3772 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3769) + x_3772);
  let x_3776 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3776.y, x_3776.y, x_3776.y, x_3776.y)) + vec4<f32>(0.1953125f, 0.203125f, 0.2109375f, 0.21875f));
  let x_3785 : vec4<f32> = u_xlat3;
  let x_3787 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_3785 / vec4<f32>(x_3787.x, x_3787.x, x_3787.x, x_3787.x));
  let x_3790 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3790);
  let x_3793 : f32 = u_xlat1.y;
  let x_3795 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3793 * x_3795);
  let x_3798 : vec2<f32> = u_xlat68;
  let x_3799 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3798 + x_3799);
  let x_3802 : f32 = u_xlat81.z;
  let x_3804 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3802, x_3804);
  let x_3807 : f32 = u_xlat13.z;
  let x_3808 : f32 = u_xlat0;
  let x_3810 : f32 = u_xlat204;
  u_xlat1.x = ((x_3807 * x_3808) + -(x_3810));
  let x_3814 : f32 = u_xlat204;
  let x_3817 : vec3<f32> = u_xlat2;
  let x_3819 : vec2<f32> = (-(vec2<f32>(x_3814, x_3814)) + vec2<f32>(x_3817.x, x_3817.z));
  let x_3820 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3819.x, x_3819.y, x_3820.z);
  let x_3823 : f32 = u_xlat1.x;
  let x_3825 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3823, x_3825);
  let x_3829 : f32 = u_xlat1.y;
  let x_3832 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3829) + x_3832);
  let x_3836 : f32 = u_xlat1.y;
  let x_3838 : f32 = u_xlat3.y;
  u_xlat1.x = (x_3836 * x_3838);
  let x_3841 : vec2<f32> = u_xlat68;
  let x_3842 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3841 + x_3842);
  let x_3845 : f32 = u_xlat82.x;
  let x_3847 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3845, x_3847);
  let x_3850 : f32 = u_xlat14.x;
  let x_3851 : f32 = u_xlat0;
  let x_3853 : f32 = u_xlat204;
  u_xlat1.x = ((x_3850 * x_3851) + -(x_3853));
  let x_3857 : f32 = u_xlat204;
  let x_3860 : vec3<f32> = u_xlat2;
  let x_3862 : vec2<f32> = (-(vec2<f32>(x_3857, x_3857)) + vec2<f32>(x_3860.x, x_3860.z));
  let x_3863 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3862.x, x_3862.y, x_3863.z);
  let x_3866 : f32 = u_xlat1.x;
  let x_3868 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3866, x_3868);
  let x_3872 : f32 = u_xlat1.y;
  let x_3875 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3872) + x_3875);
  let x_3879 : f32 = u_xlat1.y;
  let x_3881 : f32 = u_xlat3.z;
  u_xlat1.x = (x_3879 * x_3881);
  let x_3884 : vec2<f32> = u_xlat68;
  let x_3885 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3884 + x_3885);
  let x_3888 : f32 = u_xlat82.z;
  let x_3890 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3888, x_3890);
  let x_3893 : f32 = u_xlat14.z;
  let x_3894 : f32 = u_xlat0;
  let x_3896 : f32 = u_xlat204;
  u_xlat1.x = ((x_3893 * x_3894) + -(x_3896));
  let x_3900 : f32 = u_xlat204;
  let x_3903 : vec3<f32> = u_xlat2;
  let x_3905 : vec2<f32> = (-(vec2<f32>(x_3900, x_3900)) + vec2<f32>(x_3903.x, x_3903.z));
  let x_3906 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3905.x, x_3905.y, x_3906.z);
  let x_3909 : f32 = u_xlat1.x;
  let x_3911 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3909, x_3911);
  let x_3915 : f32 = u_xlat1.y;
  let x_3918 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3915) + x_3918);
  let x_3922 : f32 = u_xlat1.y;
  let x_3924 : f32 = u_xlat3.w;
  u_xlat1.x = (x_3922 * x_3924);
  let x_3927 : vec2<f32> = u_xlat68;
  let x_3928 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3927 + x_3928);
  let x_3931 : f32 = u_xlat83.x;
  let x_3933 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3931, x_3933);
  let x_3936 : f32 = u_xlat15.x;
  let x_3937 : f32 = u_xlat0;
  let x_3939 : f32 = u_xlat204;
  u_xlat1.x = ((x_3936 * x_3937) + -(x_3939));
  let x_3943 : f32 = u_xlat204;
  let x_3946 : vec3<f32> = u_xlat2;
  let x_3948 : vec2<f32> = (-(vec2<f32>(x_3943, x_3943)) + vec2<f32>(x_3946.x, x_3946.z));
  let x_3949 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_3948.x, x_3948.y, x_3949.z);
  let x_3952 : f32 = u_xlat1.x;
  let x_3954 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_3952, x_3954);
  let x_3958 : f32 = u_xlat1.y;
  let x_3961 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_3958) + x_3961);
  let x_3965 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_3965.y, x_3965.y, x_3965.y, x_3965.y)) + vec4<f32>(0.2265625f, 0.234375f, 0.2421875f, 0.25f));
  let x_3974 : vec4<f32> = u_xlat3;
  let x_3976 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_3974 / vec4<f32>(x_3976.x, x_3976.x, x_3976.x, x_3976.x));
  let x_3979 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_3979);
  let x_3982 : f32 = u_xlat1.y;
  let x_3984 : f32 = u_xlat3.x;
  u_xlat1.x = (x_3982 * x_3984);
  let x_3987 : vec2<f32> = u_xlat68;
  let x_3988 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_3987 + x_3988);
  let x_3991 : f32 = u_xlat83.z;
  let x_3993 : f32 = u_xlat2.x;
  u_xlat204 = min(x_3991, x_3993);
  let x_3996 : f32 = u_xlat15.z;
  let x_3997 : f32 = u_xlat0;
  let x_3999 : f32 = u_xlat204;
  u_xlat1.x = ((x_3996 * x_3997) + -(x_3999));
  let x_4003 : f32 = u_xlat204;
  let x_4006 : vec3<f32> = u_xlat2;
  let x_4008 : vec2<f32> = (-(vec2<f32>(x_4003, x_4003)) + vec2<f32>(x_4006.x, x_4006.z));
  let x_4009 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4008.x, x_4008.y, x_4009.z);
  let x_4012 : f32 = u_xlat1.x;
  let x_4014 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4012, x_4014);
  let x_4018 : f32 = u_xlat1.y;
  let x_4021 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4018) + x_4021);
  let x_4025 : f32 = u_xlat1.y;
  let x_4027 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4025 * x_4027);
  let x_4030 : vec2<f32> = u_xlat68;
  let x_4031 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4030 + x_4031);
  let x_4034 : f32 = u_xlat84.x;
  let x_4036 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4034, x_4036);
  let x_4039 : f32 = u_xlat16.x;
  let x_4040 : f32 = u_xlat0;
  let x_4042 : f32 = u_xlat204;
  u_xlat1.x = ((x_4039 * x_4040) + -(x_4042));
  let x_4046 : f32 = u_xlat204;
  let x_4049 : vec3<f32> = u_xlat2;
  let x_4051 : vec2<f32> = (-(vec2<f32>(x_4046, x_4046)) + vec2<f32>(x_4049.x, x_4049.z));
  let x_4052 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4051.x, x_4051.y, x_4052.z);
  let x_4055 : f32 = u_xlat1.x;
  let x_4057 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4055, x_4057);
  let x_4061 : f32 = u_xlat1.y;
  let x_4064 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4061) + x_4064);
  let x_4068 : f32 = u_xlat1.y;
  let x_4070 : f32 = u_xlat3.z;
  u_xlat1.x = (x_4068 * x_4070);
  let x_4073 : vec2<f32> = u_xlat68;
  let x_4074 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4073 + x_4074);
  let x_4077 : f32 = u_xlat84.z;
  let x_4079 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4077, x_4079);
  let x_4082 : f32 = u_xlat16.z;
  let x_4083 : f32 = u_xlat0;
  let x_4085 : f32 = u_xlat204;
  u_xlat1.x = ((x_4082 * x_4083) + -(x_4085));
  let x_4089 : f32 = u_xlat204;
  let x_4092 : vec3<f32> = u_xlat2;
  let x_4094 : vec2<f32> = (-(vec2<f32>(x_4089, x_4089)) + vec2<f32>(x_4092.x, x_4092.z));
  let x_4095 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4094.x, x_4094.y, x_4095.z);
  let x_4098 : f32 = u_xlat1.x;
  let x_4100 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4098, x_4100);
  let x_4104 : f32 = u_xlat1.y;
  let x_4107 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4104) + x_4107);
  let x_4111 : f32 = u_xlat1.y;
  let x_4113 : f32 = u_xlat3.w;
  u_xlat1.x = (x_4111 * x_4113);
  let x_4116 : vec2<f32> = u_xlat68;
  let x_4117 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4116 + x_4117);
  let x_4120 : f32 = u_xlat85.x;
  let x_4122 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4120, x_4122);
  let x_4125 : f32 = u_xlat17.x;
  let x_4126 : f32 = u_xlat0;
  let x_4128 : f32 = u_xlat204;
  u_xlat1.x = ((x_4125 * x_4126) + -(x_4128));
  let x_4132 : f32 = u_xlat204;
  let x_4135 : vec3<f32> = u_xlat2;
  let x_4137 : vec2<f32> = (-(vec2<f32>(x_4132, x_4132)) + vec2<f32>(x_4135.x, x_4135.z));
  let x_4138 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4137.x, x_4137.y, x_4138.z);
  let x_4141 : f32 = u_xlat1.x;
  let x_4143 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4141, x_4143);
  let x_4147 : f32 = u_xlat1.y;
  let x_4150 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4147) + x_4150);
  let x_4154 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_4154.y, x_4154.y, x_4154.y, x_4154.y)) + vec4<f32>(0.2578125f, 0.265625f, 0.2734375f, 0.28125f));
  let x_4163 : vec4<f32> = u_xlat3;
  let x_4165 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_4163 / vec4<f32>(x_4165.x, x_4165.x, x_4165.x, x_4165.x));
  let x_4168 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_4168);
  let x_4171 : f32 = u_xlat1.y;
  let x_4173 : f32 = u_xlat3.x;
  u_xlat1.x = (x_4171 * x_4173);
  let x_4176 : vec2<f32> = u_xlat68;
  let x_4177 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4176 + x_4177);
  let x_4180 : f32 = u_xlat85.z;
  let x_4182 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4180, x_4182);
  let x_4185 : f32 = u_xlat17.z;
  let x_4186 : f32 = u_xlat0;
  let x_4188 : f32 = u_xlat204;
  u_xlat1.x = ((x_4185 * x_4186) + -(x_4188));
  let x_4192 : f32 = u_xlat204;
  let x_4195 : vec3<f32> = u_xlat2;
  let x_4197 : vec2<f32> = (-(vec2<f32>(x_4192, x_4192)) + vec2<f32>(x_4195.x, x_4195.z));
  let x_4198 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4197.x, x_4197.y, x_4198.z);
  let x_4201 : f32 = u_xlat1.x;
  let x_4203 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4201, x_4203);
  let x_4207 : f32 = u_xlat1.y;
  let x_4210 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4207) + x_4210);
  let x_4214 : f32 = u_xlat1.y;
  let x_4216 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4214 * x_4216);
  let x_4219 : vec2<f32> = u_xlat68;
  let x_4220 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4219 + x_4220);
  let x_4223 : f32 = u_xlat86.x;
  let x_4225 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4223, x_4225);
  let x_4228 : f32 = u_xlat18.x;
  let x_4229 : f32 = u_xlat0;
  let x_4231 : f32 = u_xlat204;
  u_xlat1.x = ((x_4228 * x_4229) + -(x_4231));
  let x_4235 : f32 = u_xlat204;
  let x_4238 : vec3<f32> = u_xlat2;
  let x_4240 : vec2<f32> = (-(vec2<f32>(x_4235, x_4235)) + vec2<f32>(x_4238.x, x_4238.z));
  let x_4241 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4240.x, x_4240.y, x_4241.z);
  let x_4244 : f32 = u_xlat1.x;
  let x_4246 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4244, x_4246);
  let x_4250 : f32 = u_xlat1.y;
  let x_4253 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4250) + x_4253);
  let x_4257 : f32 = u_xlat1.y;
  let x_4259 : f32 = u_xlat3.z;
  u_xlat1.x = (x_4257 * x_4259);
  let x_4262 : vec2<f32> = u_xlat68;
  let x_4263 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4262 + x_4263);
  let x_4266 : f32 = u_xlat86.z;
  let x_4268 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4266, x_4268);
  let x_4271 : f32 = u_xlat18.z;
  let x_4272 : f32 = u_xlat0;
  let x_4274 : f32 = u_xlat204;
  u_xlat1.x = ((x_4271 * x_4272) + -(x_4274));
  let x_4278 : f32 = u_xlat204;
  let x_4281 : vec3<f32> = u_xlat2;
  let x_4283 : vec2<f32> = (-(vec2<f32>(x_4278, x_4278)) + vec2<f32>(x_4281.x, x_4281.z));
  let x_4284 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4283.x, x_4283.y, x_4284.z);
  let x_4287 : f32 = u_xlat1.x;
  let x_4289 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4287, x_4289);
  let x_4293 : f32 = u_xlat1.y;
  let x_4296 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4293) + x_4296);
  let x_4300 : f32 = u_xlat1.y;
  let x_4302 : f32 = u_xlat3.w;
  u_xlat1.x = (x_4300 * x_4302);
  let x_4305 : vec2<f32> = u_xlat68;
  let x_4306 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4305 + x_4306);
  let x_4309 : f32 = u_xlat87.x;
  let x_4311 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4309, x_4311);
  let x_4314 : f32 = u_xlat19.x;
  let x_4315 : f32 = u_xlat0;
  let x_4317 : f32 = u_xlat204;
  u_xlat1.x = ((x_4314 * x_4315) + -(x_4317));
  let x_4321 : f32 = u_xlat204;
  let x_4324 : vec3<f32> = u_xlat2;
  let x_4326 : vec2<f32> = (-(vec2<f32>(x_4321, x_4321)) + vec2<f32>(x_4324.x, x_4324.z));
  let x_4327 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4326.x, x_4326.y, x_4327.z);
  let x_4330 : f32 = u_xlat1.x;
  let x_4332 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4330, x_4332);
  let x_4336 : f32 = u_xlat1.y;
  let x_4339 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4336) + x_4339);
  let x_4343 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_4343.y, x_4343.y, x_4343.y, x_4343.y)) + vec4<f32>(0.2890625f, 0.296875f, 0.3046875f, 0.3125f));
  let x_4352 : vec4<f32> = u_xlat3;
  let x_4354 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_4352 / vec4<f32>(x_4354.x, x_4354.x, x_4354.x, x_4354.x));
  let x_4357 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_4357);
  let x_4360 : f32 = u_xlat1.y;
  let x_4362 : f32 = u_xlat3.x;
  u_xlat1.x = (x_4360 * x_4362);
  let x_4365 : vec2<f32> = u_xlat68;
  let x_4366 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4365 + x_4366);
  let x_4369 : f32 = u_xlat87.z;
  let x_4371 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4369, x_4371);
  let x_4374 : f32 = u_xlat19.z;
  let x_4375 : f32 = u_xlat0;
  let x_4377 : f32 = u_xlat204;
  u_xlat1.x = ((x_4374 * x_4375) + -(x_4377));
  let x_4381 : f32 = u_xlat204;
  let x_4384 : vec3<f32> = u_xlat2;
  let x_4386 : vec2<f32> = (-(vec2<f32>(x_4381, x_4381)) + vec2<f32>(x_4384.x, x_4384.z));
  let x_4387 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4386.x, x_4386.y, x_4387.z);
  let x_4390 : f32 = u_xlat1.x;
  let x_4392 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4390, x_4392);
  let x_4396 : f32 = u_xlat1.y;
  let x_4399 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4396) + x_4399);
  let x_4403 : f32 = u_xlat1.y;
  let x_4405 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4403 * x_4405);
  let x_4408 : vec2<f32> = u_xlat68;
  let x_4409 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4408 + x_4409);
  let x_4412 : f32 = u_xlat88.x;
  let x_4414 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4412, x_4414);
  let x_4417 : f32 = u_xlat20.x;
  let x_4418 : f32 = u_xlat0;
  let x_4420 : f32 = u_xlat204;
  u_xlat1.x = ((x_4417 * x_4418) + -(x_4420));
  let x_4424 : f32 = u_xlat204;
  let x_4427 : vec3<f32> = u_xlat2;
  let x_4429 : vec2<f32> = (-(vec2<f32>(x_4424, x_4424)) + vec2<f32>(x_4427.x, x_4427.z));
  let x_4430 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4429.x, x_4429.y, x_4430.z);
  let x_4433 : f32 = u_xlat1.x;
  let x_4435 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4433, x_4435);
  let x_4439 : f32 = u_xlat1.y;
  let x_4442 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4439) + x_4442);
  let x_4446 : f32 = u_xlat1.y;
  let x_4448 : f32 = u_xlat3.z;
  u_xlat1.x = (x_4446 * x_4448);
  let x_4451 : vec2<f32> = u_xlat68;
  let x_4452 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4451 + x_4452);
  let x_4455 : f32 = u_xlat88.z;
  let x_4457 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4455, x_4457);
  let x_4460 : f32 = u_xlat20.z;
  let x_4461 : f32 = u_xlat0;
  let x_4463 : f32 = u_xlat204;
  u_xlat1.x = ((x_4460 * x_4461) + -(x_4463));
  let x_4467 : f32 = u_xlat204;
  let x_4470 : vec3<f32> = u_xlat2;
  let x_4472 : vec2<f32> = (-(vec2<f32>(x_4467, x_4467)) + vec2<f32>(x_4470.x, x_4470.z));
  let x_4473 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4472.x, x_4472.y, x_4473.z);
  let x_4476 : f32 = u_xlat1.x;
  let x_4478 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4476, x_4478);
  let x_4482 : f32 = u_xlat1.y;
  let x_4485 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4482) + x_4485);
  let x_4489 : f32 = u_xlat1.y;
  let x_4491 : f32 = u_xlat3.w;
  u_xlat1.x = (x_4489 * x_4491);
  let x_4494 : vec2<f32> = u_xlat68;
  let x_4495 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4494 + x_4495);
  let x_4498 : f32 = u_xlat89.x;
  let x_4500 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4498, x_4500);
  let x_4503 : f32 = u_xlat21.x;
  let x_4504 : f32 = u_xlat0;
  let x_4506 : f32 = u_xlat204;
  u_xlat1.x = ((x_4503 * x_4504) + -(x_4506));
  let x_4510 : f32 = u_xlat204;
  let x_4513 : vec3<f32> = u_xlat2;
  let x_4515 : vec2<f32> = (-(vec2<f32>(x_4510, x_4510)) + vec2<f32>(x_4513.x, x_4513.z));
  let x_4516 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4515.x, x_4515.y, x_4516.z);
  let x_4519 : f32 = u_xlat1.x;
  let x_4521 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4519, x_4521);
  let x_4525 : f32 = u_xlat1.y;
  let x_4528 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4525) + x_4528);
  let x_4532 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_4532.y, x_4532.y, x_4532.y, x_4532.y)) + vec4<f32>(0.3203125f, 0.328125f, 0.3359375f, 0.34375f));
  let x_4541 : vec4<f32> = u_xlat3;
  let x_4543 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_4541 / vec4<f32>(x_4543.x, x_4543.x, x_4543.x, x_4543.x));
  let x_4546 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_4546);
  let x_4549 : f32 = u_xlat1.y;
  let x_4551 : f32 = u_xlat3.x;
  u_xlat1.x = (x_4549 * x_4551);
  let x_4554 : vec2<f32> = u_xlat68;
  let x_4555 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4554 + x_4555);
  let x_4558 : f32 = u_xlat89.z;
  let x_4560 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4558, x_4560);
  let x_4563 : f32 = u_xlat21.z;
  let x_4564 : f32 = u_xlat0;
  let x_4566 : f32 = u_xlat204;
  u_xlat1.x = ((x_4563 * x_4564) + -(x_4566));
  let x_4570 : f32 = u_xlat204;
  let x_4573 : vec3<f32> = u_xlat2;
  let x_4575 : vec2<f32> = (-(vec2<f32>(x_4570, x_4570)) + vec2<f32>(x_4573.x, x_4573.z));
  let x_4576 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4575.x, x_4575.y, x_4576.z);
  let x_4579 : f32 = u_xlat1.x;
  let x_4581 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4579, x_4581);
  let x_4585 : f32 = u_xlat1.y;
  let x_4588 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4585) + x_4588);
  let x_4592 : f32 = u_xlat1.y;
  let x_4594 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4592 * x_4594);
  let x_4597 : vec2<f32> = u_xlat68;
  let x_4598 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4597 + x_4598);
  let x_4601 : f32 = u_xlat90.x;
  let x_4603 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4601, x_4603);
  let x_4606 : f32 = u_xlat22.x;
  let x_4607 : f32 = u_xlat0;
  let x_4609 : f32 = u_xlat204;
  u_xlat1.x = ((x_4606 * x_4607) + -(x_4609));
  let x_4613 : f32 = u_xlat204;
  let x_4616 : vec3<f32> = u_xlat2;
  let x_4618 : vec2<f32> = (-(vec2<f32>(x_4613, x_4613)) + vec2<f32>(x_4616.x, x_4616.z));
  let x_4619 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4618.x, x_4618.y, x_4619.z);
  let x_4622 : f32 = u_xlat1.x;
  let x_4624 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4622, x_4624);
  let x_4628 : f32 = u_xlat1.y;
  let x_4631 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4628) + x_4631);
  let x_4635 : f32 = u_xlat1.y;
  let x_4637 : f32 = u_xlat3.z;
  u_xlat1.x = (x_4635 * x_4637);
  let x_4640 : vec2<f32> = u_xlat68;
  let x_4641 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4640 + x_4641);
  let x_4644 : f32 = u_xlat90.z;
  let x_4646 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4644, x_4646);
  let x_4649 : f32 = u_xlat22.z;
  let x_4650 : f32 = u_xlat0;
  let x_4652 : f32 = u_xlat204;
  u_xlat1.x = ((x_4649 * x_4650) + -(x_4652));
  let x_4656 : f32 = u_xlat204;
  let x_4659 : vec3<f32> = u_xlat2;
  let x_4661 : vec2<f32> = (-(vec2<f32>(x_4656, x_4656)) + vec2<f32>(x_4659.x, x_4659.z));
  let x_4662 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4661.x, x_4661.y, x_4662.z);
  let x_4665 : f32 = u_xlat1.x;
  let x_4667 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4665, x_4667);
  let x_4671 : f32 = u_xlat1.y;
  let x_4674 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4671) + x_4674);
  let x_4678 : f32 = u_xlat1.y;
  let x_4680 : f32 = u_xlat3.w;
  u_xlat1.x = (x_4678 * x_4680);
  let x_4683 : vec2<f32> = u_xlat68;
  let x_4684 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4683 + x_4684);
  let x_4687 : f32 = u_xlat91.x;
  let x_4689 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4687, x_4689);
  let x_4692 : f32 = u_xlat23.x;
  let x_4693 : f32 = u_xlat0;
  let x_4695 : f32 = u_xlat204;
  u_xlat1.x = ((x_4692 * x_4693) + -(x_4695));
  let x_4699 : f32 = u_xlat204;
  let x_4702 : vec3<f32> = u_xlat2;
  let x_4704 : vec2<f32> = (-(vec2<f32>(x_4699, x_4699)) + vec2<f32>(x_4702.x, x_4702.z));
  let x_4705 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4704.x, x_4704.y, x_4705.z);
  let x_4708 : f32 = u_xlat1.x;
  let x_4710 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4708, x_4710);
  let x_4714 : f32 = u_xlat1.y;
  let x_4717 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4714) + x_4717);
  let x_4721 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_4721.y, x_4721.y, x_4721.y, x_4721.y)) + vec4<f32>(0.3515625f, 0.359375f, 0.3671875f, 0.375f));
  let x_4730 : vec4<f32> = u_xlat3;
  let x_4732 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_4730 / vec4<f32>(x_4732.x, x_4732.x, x_4732.x, x_4732.x));
  let x_4735 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_4735);
  let x_4738 : f32 = u_xlat1.y;
  let x_4740 : f32 = u_xlat3.x;
  u_xlat1.x = (x_4738 * x_4740);
  let x_4743 : vec2<f32> = u_xlat68;
  let x_4744 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4743 + x_4744);
  let x_4747 : f32 = u_xlat91.z;
  let x_4749 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4747, x_4749);
  let x_4752 : f32 = u_xlat23.z;
  let x_4753 : f32 = u_xlat0;
  let x_4755 : f32 = u_xlat204;
  u_xlat1.x = ((x_4752 * x_4753) + -(x_4755));
  let x_4759 : f32 = u_xlat204;
  let x_4762 : vec3<f32> = u_xlat2;
  let x_4764 : vec2<f32> = (-(vec2<f32>(x_4759, x_4759)) + vec2<f32>(x_4762.x, x_4762.z));
  let x_4765 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4764.x, x_4764.y, x_4765.z);
  let x_4768 : f32 = u_xlat1.x;
  let x_4770 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4768, x_4770);
  let x_4774 : f32 = u_xlat1.y;
  let x_4777 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4774) + x_4777);
  let x_4781 : f32 = u_xlat1.y;
  let x_4783 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4781 * x_4783);
  let x_4786 : vec2<f32> = u_xlat68;
  let x_4787 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4786 + x_4787);
  let x_4790 : f32 = u_xlat92.x;
  let x_4792 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4790, x_4792);
  let x_4795 : f32 = u_xlat24.x;
  let x_4796 : f32 = u_xlat0;
  let x_4798 : f32 = u_xlat204;
  u_xlat1.x = ((x_4795 * x_4796) + -(x_4798));
  let x_4802 : f32 = u_xlat204;
  let x_4805 : vec3<f32> = u_xlat2;
  let x_4807 : vec2<f32> = (-(vec2<f32>(x_4802, x_4802)) + vec2<f32>(x_4805.x, x_4805.z));
  let x_4808 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4807.x, x_4807.y, x_4808.z);
  let x_4811 : f32 = u_xlat1.x;
  let x_4813 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4811, x_4813);
  let x_4817 : f32 = u_xlat1.y;
  let x_4820 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4817) + x_4820);
  let x_4824 : f32 = u_xlat1.y;
  let x_4826 : f32 = u_xlat3.z;
  u_xlat1.x = (x_4824 * x_4826);
  let x_4829 : vec2<f32> = u_xlat68;
  let x_4830 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4829 + x_4830);
  let x_4833 : f32 = u_xlat92.z;
  let x_4835 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4833, x_4835);
  let x_4838 : f32 = u_xlat24.z;
  let x_4839 : f32 = u_xlat0;
  let x_4841 : f32 = u_xlat204;
  u_xlat1.x = ((x_4838 * x_4839) + -(x_4841));
  let x_4845 : f32 = u_xlat204;
  let x_4848 : vec3<f32> = u_xlat2;
  let x_4850 : vec2<f32> = (-(vec2<f32>(x_4845, x_4845)) + vec2<f32>(x_4848.x, x_4848.z));
  let x_4851 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4850.x, x_4850.y, x_4851.z);
  let x_4854 : f32 = u_xlat1.x;
  let x_4856 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4854, x_4856);
  let x_4860 : f32 = u_xlat1.y;
  let x_4863 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4860) + x_4863);
  let x_4867 : f32 = u_xlat1.y;
  let x_4869 : f32 = u_xlat3.w;
  u_xlat1.x = (x_4867 * x_4869);
  let x_4872 : vec2<f32> = u_xlat68;
  let x_4873 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4872 + x_4873);
  let x_4876 : f32 = u_xlat93.x;
  let x_4878 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4876, x_4878);
  let x_4881 : f32 = u_xlat25.x;
  let x_4882 : f32 = u_xlat0;
  let x_4884 : f32 = u_xlat204;
  u_xlat1.x = ((x_4881 * x_4882) + -(x_4884));
  let x_4888 : f32 = u_xlat204;
  let x_4891 : vec3<f32> = u_xlat2;
  let x_4893 : vec2<f32> = (-(vec2<f32>(x_4888, x_4888)) + vec2<f32>(x_4891.x, x_4891.z));
  let x_4894 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4893.x, x_4893.y, x_4894.z);
  let x_4897 : f32 = u_xlat1.x;
  let x_4899 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4897, x_4899);
  let x_4903 : f32 = u_xlat1.y;
  let x_4906 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4903) + x_4906);
  let x_4910 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_4910.y, x_4910.y, x_4910.y, x_4910.y)) + vec4<f32>(0.3828125f, 0.390625f, 0.3984375f, 0.40625f));
  let x_4919 : vec4<f32> = u_xlat3;
  let x_4921 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_4919 / vec4<f32>(x_4921.x, x_4921.x, x_4921.x, x_4921.x));
  let x_4924 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_4924);
  let x_4927 : f32 = u_xlat1.y;
  let x_4929 : f32 = u_xlat3.x;
  u_xlat1.x = (x_4927 * x_4929);
  let x_4932 : vec2<f32> = u_xlat68;
  let x_4933 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4932 + x_4933);
  let x_4936 : f32 = u_xlat93.z;
  let x_4938 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4936, x_4938);
  let x_4941 : f32 = u_xlat25.z;
  let x_4942 : f32 = u_xlat0;
  let x_4944 : f32 = u_xlat204;
  u_xlat1.x = ((x_4941 * x_4942) + -(x_4944));
  let x_4948 : f32 = u_xlat204;
  let x_4951 : vec3<f32> = u_xlat2;
  let x_4953 : vec2<f32> = (-(vec2<f32>(x_4948, x_4948)) + vec2<f32>(x_4951.x, x_4951.z));
  let x_4954 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4953.x, x_4953.y, x_4954.z);
  let x_4957 : f32 = u_xlat1.x;
  let x_4959 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_4957, x_4959);
  let x_4963 : f32 = u_xlat1.y;
  let x_4966 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_4963) + x_4966);
  let x_4970 : f32 = u_xlat1.y;
  let x_4972 : f32 = u_xlat3.y;
  u_xlat1.x = (x_4970 * x_4972);
  let x_4975 : vec2<f32> = u_xlat68;
  let x_4976 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_4975 + x_4976);
  let x_4979 : f32 = u_xlat94.x;
  let x_4981 : f32 = u_xlat2.x;
  u_xlat204 = min(x_4979, x_4981);
  let x_4984 : f32 = u_xlat26.x;
  let x_4985 : f32 = u_xlat0;
  let x_4987 : f32 = u_xlat204;
  u_xlat1.x = ((x_4984 * x_4985) + -(x_4987));
  let x_4991 : f32 = u_xlat204;
  let x_4994 : vec3<f32> = u_xlat2;
  let x_4996 : vec2<f32> = (-(vec2<f32>(x_4991, x_4991)) + vec2<f32>(x_4994.x, x_4994.z));
  let x_4997 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_4996.x, x_4996.y, x_4997.z);
  let x_5000 : f32 = u_xlat1.x;
  let x_5002 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5000, x_5002);
  let x_5006 : f32 = u_xlat1.y;
  let x_5009 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5006) + x_5009);
  let x_5013 : f32 = u_xlat1.y;
  let x_5015 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5013 * x_5015);
  let x_5018 : vec2<f32> = u_xlat68;
  let x_5019 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5018 + x_5019);
  let x_5022 : f32 = u_xlat94.z;
  let x_5024 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5022, x_5024);
  let x_5027 : f32 = u_xlat26.z;
  let x_5028 : f32 = u_xlat0;
  let x_5030 : f32 = u_xlat204;
  u_xlat1.x = ((x_5027 * x_5028) + -(x_5030));
  let x_5034 : f32 = u_xlat204;
  let x_5037 : vec3<f32> = u_xlat2;
  let x_5039 : vec2<f32> = (-(vec2<f32>(x_5034, x_5034)) + vec2<f32>(x_5037.x, x_5037.z));
  let x_5040 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5039.x, x_5039.y, x_5040.z);
  let x_5043 : f32 = u_xlat1.x;
  let x_5045 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5043, x_5045);
  let x_5049 : f32 = u_xlat1.y;
  let x_5052 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5049) + x_5052);
  let x_5056 : f32 = u_xlat1.y;
  let x_5058 : f32 = u_xlat3.w;
  u_xlat1.x = (x_5056 * x_5058);
  let x_5061 : vec2<f32> = u_xlat68;
  let x_5062 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5061 + x_5062);
  let x_5065 : f32 = u_xlat95.x;
  let x_5067 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5065, x_5067);
  let x_5070 : f32 = u_xlat27.x;
  let x_5071 : f32 = u_xlat0;
  let x_5073 : f32 = u_xlat204;
  u_xlat1.x = ((x_5070 * x_5071) + -(x_5073));
  let x_5077 : f32 = u_xlat204;
  let x_5080 : vec3<f32> = u_xlat2;
  let x_5082 : vec2<f32> = (-(vec2<f32>(x_5077, x_5077)) + vec2<f32>(x_5080.x, x_5080.z));
  let x_5083 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5082.x, x_5082.y, x_5083.z);
  let x_5086 : f32 = u_xlat1.x;
  let x_5088 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5086, x_5088);
  let x_5092 : f32 = u_xlat1.y;
  let x_5095 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5092) + x_5095);
  let x_5099 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_5099.y, x_5099.y, x_5099.y, x_5099.y)) + vec4<f32>(0.4140625f, 0.421875f, 0.4296875f, 0.4375f));
  let x_5108 : vec4<f32> = u_xlat3;
  let x_5110 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_5108 / vec4<f32>(x_5110.x, x_5110.x, x_5110.x, x_5110.x));
  let x_5113 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_5113);
  let x_5116 : f32 = u_xlat1.y;
  let x_5118 : f32 = u_xlat3.x;
  u_xlat1.x = (x_5116 * x_5118);
  let x_5121 : vec2<f32> = u_xlat68;
  let x_5122 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5121 + x_5122);
  let x_5125 : f32 = u_xlat95.z;
  let x_5127 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5125, x_5127);
  let x_5130 : f32 = u_xlat27.z;
  let x_5131 : f32 = u_xlat0;
  let x_5133 : f32 = u_xlat204;
  u_xlat1.x = ((x_5130 * x_5131) + -(x_5133));
  let x_5137 : f32 = u_xlat204;
  let x_5140 : vec3<f32> = u_xlat2;
  let x_5142 : vec2<f32> = (-(vec2<f32>(x_5137, x_5137)) + vec2<f32>(x_5140.x, x_5140.z));
  let x_5143 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5142.x, x_5142.y, x_5143.z);
  let x_5146 : f32 = u_xlat1.x;
  let x_5148 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5146, x_5148);
  let x_5152 : f32 = u_xlat1.y;
  let x_5155 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5152) + x_5155);
  let x_5159 : f32 = u_xlat1.y;
  let x_5161 : f32 = u_xlat3.y;
  u_xlat1.x = (x_5159 * x_5161);
  let x_5164 : vec2<f32> = u_xlat68;
  let x_5165 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5164 + x_5165);
  let x_5168 : f32 = u_xlat96.x;
  let x_5170 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5168, x_5170);
  let x_5173 : f32 = u_xlat28.x;
  let x_5174 : f32 = u_xlat0;
  let x_5176 : f32 = u_xlat204;
  u_xlat1.x = ((x_5173 * x_5174) + -(x_5176));
  let x_5180 : f32 = u_xlat204;
  let x_5183 : vec3<f32> = u_xlat2;
  let x_5185 : vec2<f32> = (-(vec2<f32>(x_5180, x_5180)) + vec2<f32>(x_5183.x, x_5183.z));
  let x_5186 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5185.x, x_5185.y, x_5186.z);
  let x_5189 : f32 = u_xlat1.x;
  let x_5191 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5189, x_5191);
  let x_5195 : f32 = u_xlat1.y;
  let x_5198 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5195) + x_5198);
  let x_5202 : f32 = u_xlat1.y;
  let x_5204 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5202 * x_5204);
  let x_5207 : vec2<f32> = u_xlat68;
  let x_5208 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5207 + x_5208);
  let x_5211 : f32 = u_xlat96.z;
  let x_5213 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5211, x_5213);
  let x_5216 : f32 = u_xlat28.z;
  let x_5217 : f32 = u_xlat0;
  let x_5219 : f32 = u_xlat204;
  u_xlat1.x = ((x_5216 * x_5217) + -(x_5219));
  let x_5223 : f32 = u_xlat204;
  let x_5226 : vec3<f32> = u_xlat2;
  let x_5228 : vec2<f32> = (-(vec2<f32>(x_5223, x_5223)) + vec2<f32>(x_5226.x, x_5226.z));
  let x_5229 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5228.x, x_5228.y, x_5229.z);
  let x_5232 : f32 = u_xlat1.x;
  let x_5234 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5232, x_5234);
  let x_5238 : f32 = u_xlat1.y;
  let x_5241 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5238) + x_5241);
  let x_5245 : f32 = u_xlat1.y;
  let x_5247 : f32 = u_xlat3.w;
  u_xlat1.x = (x_5245 * x_5247);
  let x_5250 : vec2<f32> = u_xlat68;
  let x_5251 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5250 + x_5251);
  let x_5254 : f32 = u_xlat97.x;
  let x_5256 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5254, x_5256);
  let x_5259 : f32 = u_xlat29.x;
  let x_5260 : f32 = u_xlat0;
  let x_5262 : f32 = u_xlat204;
  u_xlat1.x = ((x_5259 * x_5260) + -(x_5262));
  let x_5266 : f32 = u_xlat204;
  let x_5269 : vec3<f32> = u_xlat2;
  let x_5271 : vec2<f32> = (-(vec2<f32>(x_5266, x_5266)) + vec2<f32>(x_5269.x, x_5269.z));
  let x_5272 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5271.x, x_5271.y, x_5272.z);
  let x_5275 : f32 = u_xlat1.x;
  let x_5277 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5275, x_5277);
  let x_5281 : f32 = u_xlat1.y;
  let x_5284 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5281) + x_5284);
  let x_5288 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_5288.y, x_5288.y, x_5288.y, x_5288.y)) + vec4<f32>(0.4453125f, 0.453125f, 0.4609375f, 0.46875f));
  let x_5297 : vec4<f32> = u_xlat3;
  let x_5299 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_5297 / vec4<f32>(x_5299.x, x_5299.x, x_5299.x, x_5299.x));
  let x_5302 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_5302);
  let x_5305 : f32 = u_xlat1.y;
  let x_5307 : f32 = u_xlat3.x;
  u_xlat1.x = (x_5305 * x_5307);
  let x_5310 : vec2<f32> = u_xlat68;
  let x_5311 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5310 + x_5311);
  let x_5314 : f32 = u_xlat97.z;
  let x_5316 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5314, x_5316);
  let x_5319 : f32 = u_xlat29.z;
  let x_5320 : f32 = u_xlat0;
  let x_5322 : f32 = u_xlat204;
  u_xlat1.x = ((x_5319 * x_5320) + -(x_5322));
  let x_5326 : f32 = u_xlat204;
  let x_5329 : vec3<f32> = u_xlat2;
  let x_5331 : vec2<f32> = (-(vec2<f32>(x_5326, x_5326)) + vec2<f32>(x_5329.x, x_5329.z));
  let x_5332 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5331.x, x_5331.y, x_5332.z);
  let x_5335 : f32 = u_xlat1.x;
  let x_5337 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5335, x_5337);
  let x_5341 : f32 = u_xlat1.y;
  let x_5344 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5341) + x_5344);
  let x_5348 : f32 = u_xlat1.y;
  let x_5350 : f32 = u_xlat3.y;
  u_xlat1.x = (x_5348 * x_5350);
  let x_5353 : vec2<f32> = u_xlat68;
  let x_5354 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5353 + x_5354);
  let x_5357 : f32 = u_xlat98.x;
  let x_5359 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5357, x_5359);
  let x_5362 : f32 = u_xlat30.x;
  let x_5363 : f32 = u_xlat0;
  let x_5365 : f32 = u_xlat204;
  u_xlat1.x = ((x_5362 * x_5363) + -(x_5365));
  let x_5369 : f32 = u_xlat204;
  let x_5372 : vec3<f32> = u_xlat2;
  let x_5374 : vec2<f32> = (-(vec2<f32>(x_5369, x_5369)) + vec2<f32>(x_5372.x, x_5372.z));
  let x_5375 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5374.x, x_5374.y, x_5375.z);
  let x_5378 : f32 = u_xlat1.x;
  let x_5380 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5378, x_5380);
  let x_5384 : f32 = u_xlat1.y;
  let x_5387 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5384) + x_5387);
  let x_5391 : f32 = u_xlat1.y;
  let x_5393 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5391 * x_5393);
  let x_5396 : vec2<f32> = u_xlat68;
  let x_5397 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5396 + x_5397);
  let x_5400 : f32 = u_xlat98.z;
  let x_5402 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5400, x_5402);
  let x_5405 : f32 = u_xlat30.z;
  let x_5406 : f32 = u_xlat0;
  let x_5408 : f32 = u_xlat204;
  u_xlat1.x = ((x_5405 * x_5406) + -(x_5408));
  let x_5412 : f32 = u_xlat204;
  let x_5415 : vec3<f32> = u_xlat2;
  let x_5417 : vec2<f32> = (-(vec2<f32>(x_5412, x_5412)) + vec2<f32>(x_5415.x, x_5415.z));
  let x_5418 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5417.x, x_5417.y, x_5418.z);
  let x_5421 : f32 = u_xlat1.x;
  let x_5423 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5421, x_5423);
  let x_5427 : f32 = u_xlat1.y;
  let x_5430 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5427) + x_5430);
  let x_5434 : f32 = u_xlat1.y;
  let x_5436 : f32 = u_xlat3.w;
  u_xlat1.x = (x_5434 * x_5436);
  let x_5439 : vec2<f32> = u_xlat68;
  let x_5440 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5439 + x_5440);
  let x_5443 : f32 = u_xlat99.x;
  let x_5445 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5443, x_5445);
  let x_5448 : f32 = u_xlat31.x;
  let x_5449 : f32 = u_xlat0;
  let x_5451 : f32 = u_xlat204;
  u_xlat1.x = ((x_5448 * x_5449) + -(x_5451));
  let x_5455 : f32 = u_xlat204;
  let x_5458 : vec3<f32> = u_xlat2;
  let x_5460 : vec2<f32> = (-(vec2<f32>(x_5455, x_5455)) + vec2<f32>(x_5458.x, x_5458.z));
  let x_5461 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5460.x, x_5460.y, x_5461.z);
  let x_5464 : f32 = u_xlat1.x;
  let x_5466 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5464, x_5466);
  let x_5470 : f32 = u_xlat1.y;
  let x_5473 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5470) + x_5473);
  let x_5477 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_5477.y, x_5477.y, x_5477.y, x_5477.y)) + vec4<f32>(0.4765625f, 0.484375f, 0.4921875f, 0.5f));
  let x_5486 : vec4<f32> = u_xlat3;
  let x_5488 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_5486 / vec4<f32>(x_5488.x, x_5488.x, x_5488.x, x_5488.x));
  let x_5491 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_5491);
  let x_5494 : f32 = u_xlat1.y;
  let x_5496 : f32 = u_xlat3.x;
  u_xlat1.x = (x_5494 * x_5496);
  let x_5499 : vec2<f32> = u_xlat68;
  let x_5500 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5499 + x_5500);
  let x_5503 : f32 = u_xlat99.z;
  let x_5505 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5503, x_5505);
  let x_5508 : f32 = u_xlat31.z;
  let x_5509 : f32 = u_xlat0;
  let x_5511 : f32 = u_xlat204;
  u_xlat1.x = ((x_5508 * x_5509) + -(x_5511));
  let x_5515 : f32 = u_xlat204;
  let x_5518 : vec3<f32> = u_xlat2;
  let x_5520 : vec2<f32> = (-(vec2<f32>(x_5515, x_5515)) + vec2<f32>(x_5518.x, x_5518.z));
  let x_5521 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5520.x, x_5520.y, x_5521.z);
  let x_5524 : f32 = u_xlat1.x;
  let x_5526 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5524, x_5526);
  let x_5530 : f32 = u_xlat1.y;
  let x_5533 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5530) + x_5533);
  let x_5537 : f32 = u_xlat1.y;
  let x_5539 : f32 = u_xlat3.y;
  u_xlat1.x = (x_5537 * x_5539);
  let x_5542 : vec2<f32> = u_xlat68;
  let x_5543 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5542 + x_5543);
  let x_5546 : f32 = u_xlat100.x;
  let x_5548 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5546, x_5548);
  let x_5551 : f32 = u_xlat32.x;
  let x_5552 : f32 = u_xlat0;
  let x_5554 : f32 = u_xlat204;
  u_xlat1.x = ((x_5551 * x_5552) + -(x_5554));
  let x_5558 : f32 = u_xlat204;
  let x_5561 : vec3<f32> = u_xlat2;
  let x_5563 : vec2<f32> = (-(vec2<f32>(x_5558, x_5558)) + vec2<f32>(x_5561.x, x_5561.z));
  let x_5564 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5563.x, x_5563.y, x_5564.z);
  let x_5567 : f32 = u_xlat1.x;
  let x_5569 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5567, x_5569);
  let x_5573 : f32 = u_xlat1.y;
  let x_5576 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5573) + x_5576);
  let x_5580 : f32 = u_xlat1.y;
  let x_5582 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5580 * x_5582);
  let x_5585 : vec2<f32> = u_xlat68;
  let x_5586 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5585 + x_5586);
  let x_5589 : f32 = u_xlat100.z;
  let x_5591 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5589, x_5591);
  let x_5594 : f32 = u_xlat32.z;
  let x_5595 : f32 = u_xlat0;
  let x_5597 : f32 = u_xlat204;
  u_xlat1.x = ((x_5594 * x_5595) + -(x_5597));
  let x_5601 : f32 = u_xlat204;
  let x_5604 : vec3<f32> = u_xlat2;
  let x_5606 : vec2<f32> = (-(vec2<f32>(x_5601, x_5601)) + vec2<f32>(x_5604.x, x_5604.z));
  let x_5607 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5606.x, x_5606.y, x_5607.z);
  let x_5610 : f32 = u_xlat1.x;
  let x_5612 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5610, x_5612);
  let x_5616 : f32 = u_xlat1.y;
  let x_5619 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5616) + x_5619);
  let x_5623 : f32 = u_xlat1.y;
  let x_5625 : f32 = u_xlat3.w;
  u_xlat1.x = (x_5623 * x_5625);
  let x_5628 : vec2<f32> = u_xlat68;
  let x_5629 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5628 + x_5629);
  let x_5632 : f32 = u_xlat101.x;
  let x_5634 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5632, x_5634);
  let x_5637 : f32 = u_xlat33.x;
  let x_5638 : f32 = u_xlat0;
  let x_5640 : f32 = u_xlat204;
  u_xlat1.x = ((x_5637 * x_5638) + -(x_5640));
  let x_5644 : f32 = u_xlat204;
  let x_5647 : vec3<f32> = u_xlat2;
  let x_5649 : vec2<f32> = (-(vec2<f32>(x_5644, x_5644)) + vec2<f32>(x_5647.x, x_5647.z));
  let x_5650 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5649.x, x_5649.y, x_5650.z);
  let x_5653 : f32 = u_xlat1.x;
  let x_5655 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5653, x_5655);
  let x_5659 : f32 = u_xlat1.y;
  let x_5662 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5659) + x_5662);
  let x_5666 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_5666.y, x_5666.y, x_5666.y, x_5666.y)) + vec4<f32>(0.5078125f, 0.515625f, 0.5234375f, 0.53125f));
  let x_5675 : vec4<f32> = u_xlat3;
  let x_5677 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_5675 / vec4<f32>(x_5677.x, x_5677.x, x_5677.x, x_5677.x));
  let x_5680 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_5680);
  let x_5683 : f32 = u_xlat1.y;
  let x_5685 : f32 = u_xlat3.x;
  u_xlat1.x = (x_5683 * x_5685);
  let x_5688 : vec2<f32> = u_xlat68;
  let x_5689 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5688 + x_5689);
  let x_5692 : f32 = u_xlat101.z;
  let x_5694 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5692, x_5694);
  let x_5697 : f32 = u_xlat33.z;
  let x_5698 : f32 = u_xlat0;
  let x_5700 : f32 = u_xlat204;
  u_xlat1.x = ((x_5697 * x_5698) + -(x_5700));
  let x_5704 : f32 = u_xlat204;
  let x_5707 : vec3<f32> = u_xlat2;
  let x_5709 : vec2<f32> = (-(vec2<f32>(x_5704, x_5704)) + vec2<f32>(x_5707.x, x_5707.z));
  let x_5710 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5709.x, x_5709.y, x_5710.z);
  let x_5713 : f32 = u_xlat1.x;
  let x_5715 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5713, x_5715);
  let x_5719 : f32 = u_xlat1.y;
  let x_5722 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5719) + x_5722);
  let x_5726 : f32 = u_xlat1.y;
  let x_5728 : f32 = u_xlat3.y;
  u_xlat1.x = (x_5726 * x_5728);
  let x_5731 : vec2<f32> = u_xlat68;
  let x_5732 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5731 + x_5732);
  let x_5735 : f32 = u_xlat102.x;
  let x_5737 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5735, x_5737);
  let x_5740 : f32 = u_xlat34.x;
  let x_5741 : f32 = u_xlat0;
  let x_5743 : f32 = u_xlat204;
  u_xlat1.x = ((x_5740 * x_5741) + -(x_5743));
  let x_5747 : f32 = u_xlat204;
  let x_5750 : vec3<f32> = u_xlat2;
  let x_5752 : vec2<f32> = (-(vec2<f32>(x_5747, x_5747)) + vec2<f32>(x_5750.x, x_5750.z));
  let x_5753 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5752.x, x_5752.y, x_5753.z);
  let x_5756 : f32 = u_xlat1.x;
  let x_5758 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5756, x_5758);
  let x_5762 : f32 = u_xlat1.y;
  let x_5765 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5762) + x_5765);
  let x_5769 : f32 = u_xlat1.y;
  let x_5771 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5769 * x_5771);
  let x_5774 : vec2<f32> = u_xlat68;
  let x_5775 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5774 + x_5775);
  let x_5778 : f32 = u_xlat102.z;
  let x_5780 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5778, x_5780);
  let x_5783 : f32 = u_xlat34.z;
  let x_5784 : f32 = u_xlat0;
  let x_5786 : f32 = u_xlat204;
  u_xlat1.x = ((x_5783 * x_5784) + -(x_5786));
  let x_5790 : f32 = u_xlat204;
  let x_5793 : vec3<f32> = u_xlat2;
  let x_5795 : vec2<f32> = (-(vec2<f32>(x_5790, x_5790)) + vec2<f32>(x_5793.x, x_5793.z));
  let x_5796 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5795.x, x_5795.y, x_5796.z);
  let x_5799 : f32 = u_xlat1.x;
  let x_5801 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5799, x_5801);
  let x_5805 : f32 = u_xlat1.y;
  let x_5808 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5805) + x_5808);
  let x_5812 : f32 = u_xlat1.y;
  let x_5814 : f32 = u_xlat3.w;
  u_xlat1.x = (x_5812 * x_5814);
  let x_5817 : vec2<f32> = u_xlat68;
  let x_5818 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5817 + x_5818);
  let x_5821 : f32 = u_xlat103.x;
  let x_5823 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5821, x_5823);
  let x_5826 : f32 = u_xlat35.x;
  let x_5827 : f32 = u_xlat0;
  let x_5829 : f32 = u_xlat204;
  u_xlat1.x = ((x_5826 * x_5827) + -(x_5829));
  let x_5833 : f32 = u_xlat204;
  let x_5836 : vec3<f32> = u_xlat2;
  let x_5838 : vec2<f32> = (-(vec2<f32>(x_5833, x_5833)) + vec2<f32>(x_5836.x, x_5836.z));
  let x_5839 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5838.x, x_5838.y, x_5839.z);
  let x_5842 : f32 = u_xlat1.x;
  let x_5844 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5842, x_5844);
  let x_5848 : f32 = u_xlat1.y;
  let x_5851 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5848) + x_5851);
  let x_5855 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_5855.y, x_5855.y, x_5855.y, x_5855.y)) + vec4<f32>(0.5390625f, 0.546875f, 0.5546875f, 0.5625f));
  let x_5864 : vec4<f32> = u_xlat3;
  let x_5866 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_5864 / vec4<f32>(x_5866.x, x_5866.x, x_5866.x, x_5866.x));
  let x_5869 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_5869);
  let x_5872 : f32 = u_xlat1.y;
  let x_5874 : f32 = u_xlat3.x;
  u_xlat1.x = (x_5872 * x_5874);
  let x_5877 : vec2<f32> = u_xlat68;
  let x_5878 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5877 + x_5878);
  let x_5881 : f32 = u_xlat103.z;
  let x_5883 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5881, x_5883);
  let x_5886 : f32 = u_xlat35.z;
  let x_5887 : f32 = u_xlat0;
  let x_5889 : f32 = u_xlat204;
  u_xlat1.x = ((x_5886 * x_5887) + -(x_5889));
  let x_5893 : f32 = u_xlat204;
  let x_5896 : vec3<f32> = u_xlat2;
  let x_5898 : vec2<f32> = (-(vec2<f32>(x_5893, x_5893)) + vec2<f32>(x_5896.x, x_5896.z));
  let x_5899 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5898.x, x_5898.y, x_5899.z);
  let x_5902 : f32 = u_xlat1.x;
  let x_5904 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5902, x_5904);
  let x_5908 : f32 = u_xlat1.y;
  let x_5911 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5908) + x_5911);
  let x_5915 : f32 = u_xlat1.y;
  let x_5917 : f32 = u_xlat3.y;
  u_xlat1.x = (x_5915 * x_5917);
  let x_5920 : vec2<f32> = u_xlat68;
  let x_5921 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5920 + x_5921);
  let x_5924 : f32 = u_xlat104.x;
  let x_5926 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5924, x_5926);
  let x_5929 : f32 = u_xlat36.x;
  let x_5930 : f32 = u_xlat0;
  let x_5932 : f32 = u_xlat204;
  u_xlat1.x = ((x_5929 * x_5930) + -(x_5932));
  let x_5936 : f32 = u_xlat204;
  let x_5939 : vec3<f32> = u_xlat2;
  let x_5941 : vec2<f32> = (-(vec2<f32>(x_5936, x_5936)) + vec2<f32>(x_5939.x, x_5939.z));
  let x_5942 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5941.x, x_5941.y, x_5942.z);
  let x_5945 : f32 = u_xlat1.x;
  let x_5947 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5945, x_5947);
  let x_5951 : f32 = u_xlat1.y;
  let x_5954 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5951) + x_5954);
  let x_5958 : f32 = u_xlat1.y;
  let x_5960 : f32 = u_xlat3.z;
  u_xlat1.x = (x_5958 * x_5960);
  let x_5963 : vec2<f32> = u_xlat68;
  let x_5964 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_5963 + x_5964);
  let x_5967 : f32 = u_xlat104.z;
  let x_5969 : f32 = u_xlat2.x;
  u_xlat204 = min(x_5967, x_5969);
  let x_5972 : f32 = u_xlat36.z;
  let x_5973 : f32 = u_xlat0;
  let x_5975 : f32 = u_xlat204;
  u_xlat1.x = ((x_5972 * x_5973) + -(x_5975));
  let x_5979 : f32 = u_xlat204;
  let x_5982 : vec3<f32> = u_xlat2;
  let x_5984 : vec2<f32> = (-(vec2<f32>(x_5979, x_5979)) + vec2<f32>(x_5982.x, x_5982.z));
  let x_5985 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_5984.x, x_5984.y, x_5985.z);
  let x_5988 : f32 = u_xlat1.x;
  let x_5990 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_5988, x_5990);
  let x_5994 : f32 = u_xlat1.y;
  let x_5997 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_5994) + x_5997);
  let x_6001 : f32 = u_xlat1.y;
  let x_6003 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6001 * x_6003);
  let x_6006 : vec2<f32> = u_xlat68;
  let x_6007 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6006 + x_6007);
  let x_6010 : f32 = u_xlat105.x;
  let x_6012 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6010, x_6012);
  let x_6015 : f32 = u_xlat37.x;
  let x_6016 : f32 = u_xlat0;
  let x_6018 : f32 = u_xlat204;
  u_xlat1.x = ((x_6015 * x_6016) + -(x_6018));
  let x_6022 : f32 = u_xlat204;
  let x_6025 : vec3<f32> = u_xlat2;
  let x_6027 : vec2<f32> = (-(vec2<f32>(x_6022, x_6022)) + vec2<f32>(x_6025.x, x_6025.z));
  let x_6028 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6027.x, x_6027.y, x_6028.z);
  let x_6031 : f32 = u_xlat1.x;
  let x_6033 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6031, x_6033);
  let x_6037 : f32 = u_xlat1.y;
  let x_6040 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6037) + x_6040);
  let x_6044 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6044.y, x_6044.y, x_6044.y, x_6044.y)) + vec4<f32>(0.5703125f, 0.578125f, 0.5859375f, 0.59375f));
  let x_6053 : vec4<f32> = u_xlat3;
  let x_6055 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_6053 / vec4<f32>(x_6055.x, x_6055.x, x_6055.x, x_6055.x));
  let x_6058 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_6058);
  let x_6061 : f32 = u_xlat1.y;
  let x_6063 : f32 = u_xlat3.x;
  u_xlat1.x = (x_6061 * x_6063);
  let x_6066 : vec2<f32> = u_xlat68;
  let x_6067 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6066 + x_6067);
  let x_6070 : f32 = u_xlat105.z;
  let x_6072 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6070, x_6072);
  let x_6075 : f32 = u_xlat37.z;
  let x_6076 : f32 = u_xlat0;
  let x_6078 : f32 = u_xlat204;
  u_xlat1.x = ((x_6075 * x_6076) + -(x_6078));
  let x_6082 : f32 = u_xlat204;
  let x_6085 : vec3<f32> = u_xlat2;
  let x_6087 : vec2<f32> = (-(vec2<f32>(x_6082, x_6082)) + vec2<f32>(x_6085.x, x_6085.z));
  let x_6088 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6087.x, x_6087.y, x_6088.z);
  let x_6091 : f32 = u_xlat1.x;
  let x_6093 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6091, x_6093);
  let x_6097 : f32 = u_xlat1.y;
  let x_6100 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6097) + x_6100);
  let x_6104 : f32 = u_xlat1.y;
  let x_6106 : f32 = u_xlat3.y;
  u_xlat1.x = (x_6104 * x_6106);
  let x_6109 : vec2<f32> = u_xlat68;
  let x_6110 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6109 + x_6110);
  let x_6113 : f32 = u_xlat106.x;
  let x_6115 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6113, x_6115);
  let x_6118 : f32 = u_xlat38.x;
  let x_6119 : f32 = u_xlat0;
  let x_6121 : f32 = u_xlat204;
  u_xlat1.x = ((x_6118 * x_6119) + -(x_6121));
  let x_6125 : f32 = u_xlat204;
  let x_6128 : vec3<f32> = u_xlat2;
  let x_6130 : vec2<f32> = (-(vec2<f32>(x_6125, x_6125)) + vec2<f32>(x_6128.x, x_6128.z));
  let x_6131 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6130.x, x_6130.y, x_6131.z);
  let x_6134 : f32 = u_xlat1.x;
  let x_6136 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6134, x_6136);
  let x_6140 : f32 = u_xlat1.y;
  let x_6143 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6140) + x_6143);
  let x_6147 : f32 = u_xlat1.y;
  let x_6149 : f32 = u_xlat3.z;
  u_xlat1.x = (x_6147 * x_6149);
  let x_6152 : vec2<f32> = u_xlat68;
  let x_6153 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6152 + x_6153);
  let x_6156 : f32 = u_xlat106.z;
  let x_6158 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6156, x_6158);
  let x_6161 : f32 = u_xlat38.z;
  let x_6162 : f32 = u_xlat0;
  let x_6164 : f32 = u_xlat204;
  u_xlat1.x = ((x_6161 * x_6162) + -(x_6164));
  let x_6168 : f32 = u_xlat204;
  let x_6171 : vec3<f32> = u_xlat2;
  let x_6173 : vec2<f32> = (-(vec2<f32>(x_6168, x_6168)) + vec2<f32>(x_6171.x, x_6171.z));
  let x_6174 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6173.x, x_6173.y, x_6174.z);
  let x_6177 : f32 = u_xlat1.x;
  let x_6179 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6177, x_6179);
  let x_6183 : f32 = u_xlat1.y;
  let x_6186 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6183) + x_6186);
  let x_6190 : f32 = u_xlat1.y;
  let x_6192 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6190 * x_6192);
  let x_6195 : vec2<f32> = u_xlat68;
  let x_6196 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6195 + x_6196);
  let x_6199 : f32 = u_xlat107.x;
  let x_6201 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6199, x_6201);
  let x_6204 : f32 = u_xlat39.x;
  let x_6205 : f32 = u_xlat0;
  let x_6207 : f32 = u_xlat204;
  u_xlat1.x = ((x_6204 * x_6205) + -(x_6207));
  let x_6211 : f32 = u_xlat204;
  let x_6214 : vec3<f32> = u_xlat2;
  let x_6216 : vec2<f32> = (-(vec2<f32>(x_6211, x_6211)) + vec2<f32>(x_6214.x, x_6214.z));
  let x_6217 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6216.x, x_6216.y, x_6217.z);
  let x_6220 : f32 = u_xlat1.x;
  let x_6222 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6220, x_6222);
  let x_6226 : f32 = u_xlat1.y;
  let x_6229 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6226) + x_6229);
  let x_6233 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6233.y, x_6233.y, x_6233.y, x_6233.y)) + vec4<f32>(0.6015625f, 0.609375f, 0.6171875f, 0.625f));
  let x_6242 : vec4<f32> = u_xlat3;
  let x_6244 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_6242 / vec4<f32>(x_6244.x, x_6244.x, x_6244.x, x_6244.x));
  let x_6247 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_6247);
  let x_6250 : f32 = u_xlat1.y;
  let x_6252 : f32 = u_xlat3.x;
  u_xlat1.x = (x_6250 * x_6252);
  let x_6255 : vec2<f32> = u_xlat68;
  let x_6256 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6255 + x_6256);
  let x_6259 : f32 = u_xlat107.z;
  let x_6261 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6259, x_6261);
  let x_6264 : f32 = u_xlat39.z;
  let x_6265 : f32 = u_xlat0;
  let x_6267 : f32 = u_xlat204;
  u_xlat1.x = ((x_6264 * x_6265) + -(x_6267));
  let x_6271 : f32 = u_xlat204;
  let x_6274 : vec3<f32> = u_xlat2;
  let x_6276 : vec2<f32> = (-(vec2<f32>(x_6271, x_6271)) + vec2<f32>(x_6274.x, x_6274.z));
  let x_6277 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6276.x, x_6276.y, x_6277.z);
  let x_6280 : f32 = u_xlat1.x;
  let x_6282 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6280, x_6282);
  let x_6286 : f32 = u_xlat1.y;
  let x_6289 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6286) + x_6289);
  let x_6293 : f32 = u_xlat1.y;
  let x_6295 : f32 = u_xlat3.y;
  u_xlat1.x = (x_6293 * x_6295);
  let x_6298 : vec2<f32> = u_xlat68;
  let x_6299 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6298 + x_6299);
  let x_6302 : f32 = u_xlat108.x;
  let x_6304 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6302, x_6304);
  let x_6307 : f32 = u_xlat40.x;
  let x_6308 : f32 = u_xlat0;
  let x_6310 : f32 = u_xlat204;
  u_xlat1.x = ((x_6307 * x_6308) + -(x_6310));
  let x_6314 : f32 = u_xlat204;
  let x_6317 : vec3<f32> = u_xlat2;
  let x_6319 : vec2<f32> = (-(vec2<f32>(x_6314, x_6314)) + vec2<f32>(x_6317.x, x_6317.z));
  let x_6320 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6319.x, x_6319.y, x_6320.z);
  let x_6323 : f32 = u_xlat1.x;
  let x_6325 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6323, x_6325);
  let x_6329 : f32 = u_xlat1.y;
  let x_6332 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6329) + x_6332);
  let x_6336 : f32 = u_xlat1.y;
  let x_6338 : f32 = u_xlat3.z;
  u_xlat1.x = (x_6336 * x_6338);
  let x_6341 : vec2<f32> = u_xlat68;
  let x_6342 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6341 + x_6342);
  let x_6345 : f32 = u_xlat108.z;
  let x_6347 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6345, x_6347);
  let x_6350 : f32 = u_xlat40.z;
  let x_6351 : f32 = u_xlat0;
  let x_6353 : f32 = u_xlat204;
  u_xlat1.x = ((x_6350 * x_6351) + -(x_6353));
  let x_6357 : f32 = u_xlat204;
  let x_6360 : vec3<f32> = u_xlat2;
  let x_6362 : vec2<f32> = (-(vec2<f32>(x_6357, x_6357)) + vec2<f32>(x_6360.x, x_6360.z));
  let x_6363 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6362.x, x_6362.y, x_6363.z);
  let x_6366 : f32 = u_xlat1.x;
  let x_6368 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6366, x_6368);
  let x_6372 : f32 = u_xlat1.y;
  let x_6375 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6372) + x_6375);
  let x_6379 : f32 = u_xlat1.y;
  let x_6381 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6379 * x_6381);
  let x_6384 : vec2<f32> = u_xlat68;
  let x_6385 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6384 + x_6385);
  let x_6388 : f32 = u_xlat109.x;
  let x_6390 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6388, x_6390);
  let x_6393 : f32 = u_xlat41.x;
  let x_6394 : f32 = u_xlat0;
  let x_6396 : f32 = u_xlat204;
  u_xlat1.x = ((x_6393 * x_6394) + -(x_6396));
  let x_6400 : f32 = u_xlat204;
  let x_6403 : vec3<f32> = u_xlat2;
  let x_6405 : vec2<f32> = (-(vec2<f32>(x_6400, x_6400)) + vec2<f32>(x_6403.x, x_6403.z));
  let x_6406 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6405.x, x_6405.y, x_6406.z);
  let x_6409 : f32 = u_xlat1.x;
  let x_6411 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6409, x_6411);
  let x_6415 : f32 = u_xlat1.y;
  let x_6418 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6415) + x_6418);
  let x_6422 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6422.y, x_6422.y, x_6422.y, x_6422.y)) + vec4<f32>(0.6328125f, 0.640625f, 0.6484375f, 0.65625f));
  let x_6431 : vec4<f32> = u_xlat3;
  let x_6433 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_6431 / vec4<f32>(x_6433.x, x_6433.x, x_6433.x, x_6433.x));
  let x_6436 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_6436);
  let x_6439 : f32 = u_xlat1.y;
  let x_6441 : f32 = u_xlat3.x;
  u_xlat1.x = (x_6439 * x_6441);
  let x_6444 : vec2<f32> = u_xlat68;
  let x_6445 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6444 + x_6445);
  let x_6448 : f32 = u_xlat109.z;
  let x_6450 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6448, x_6450);
  let x_6453 : f32 = u_xlat41.z;
  let x_6454 : f32 = u_xlat0;
  let x_6456 : f32 = u_xlat204;
  u_xlat1.x = ((x_6453 * x_6454) + -(x_6456));
  let x_6460 : f32 = u_xlat204;
  let x_6463 : vec3<f32> = u_xlat2;
  let x_6465 : vec2<f32> = (-(vec2<f32>(x_6460, x_6460)) + vec2<f32>(x_6463.x, x_6463.z));
  let x_6466 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6465.x, x_6465.y, x_6466.z);
  let x_6469 : f32 = u_xlat1.x;
  let x_6471 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6469, x_6471);
  let x_6475 : f32 = u_xlat1.y;
  let x_6478 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6475) + x_6478);
  let x_6482 : f32 = u_xlat1.y;
  let x_6484 : f32 = u_xlat3.y;
  u_xlat1.x = (x_6482 * x_6484);
  let x_6487 : vec2<f32> = u_xlat68;
  let x_6488 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6487 + x_6488);
  let x_6491 : f32 = u_xlat110.x;
  let x_6493 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6491, x_6493);
  let x_6496 : f32 = u_xlat42.x;
  let x_6497 : f32 = u_xlat0;
  let x_6499 : f32 = u_xlat204;
  u_xlat1.x = ((x_6496 * x_6497) + -(x_6499));
  let x_6503 : f32 = u_xlat204;
  let x_6506 : vec3<f32> = u_xlat2;
  let x_6508 : vec2<f32> = (-(vec2<f32>(x_6503, x_6503)) + vec2<f32>(x_6506.x, x_6506.z));
  let x_6509 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6508.x, x_6508.y, x_6509.z);
  let x_6512 : f32 = u_xlat1.x;
  let x_6514 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6512, x_6514);
  let x_6518 : f32 = u_xlat1.y;
  let x_6521 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6518) + x_6521);
  let x_6525 : f32 = u_xlat1.y;
  let x_6527 : f32 = u_xlat3.z;
  u_xlat1.x = (x_6525 * x_6527);
  let x_6530 : vec2<f32> = u_xlat68;
  let x_6531 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6530 + x_6531);
  let x_6534 : f32 = u_xlat110.z;
  let x_6536 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6534, x_6536);
  let x_6539 : f32 = u_xlat42.z;
  let x_6540 : f32 = u_xlat0;
  let x_6542 : f32 = u_xlat204;
  u_xlat1.x = ((x_6539 * x_6540) + -(x_6542));
  let x_6546 : f32 = u_xlat204;
  let x_6549 : vec3<f32> = u_xlat2;
  let x_6551 : vec2<f32> = (-(vec2<f32>(x_6546, x_6546)) + vec2<f32>(x_6549.x, x_6549.z));
  let x_6552 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6551.x, x_6551.y, x_6552.z);
  let x_6555 : f32 = u_xlat1.x;
  let x_6557 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6555, x_6557);
  let x_6561 : f32 = u_xlat1.y;
  let x_6564 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6561) + x_6564);
  let x_6568 : f32 = u_xlat1.y;
  let x_6570 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6568 * x_6570);
  let x_6573 : vec2<f32> = u_xlat68;
  let x_6574 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6573 + x_6574);
  let x_6577 : f32 = u_xlat111.x;
  let x_6579 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6577, x_6579);
  let x_6582 : f32 = u_xlat43.x;
  let x_6583 : f32 = u_xlat0;
  let x_6585 : f32 = u_xlat204;
  u_xlat1.x = ((x_6582 * x_6583) + -(x_6585));
  let x_6589 : f32 = u_xlat204;
  let x_6592 : vec3<f32> = u_xlat2;
  let x_6594 : vec2<f32> = (-(vec2<f32>(x_6589, x_6589)) + vec2<f32>(x_6592.x, x_6592.z));
  let x_6595 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6594.x, x_6594.y, x_6595.z);
  let x_6598 : f32 = u_xlat1.x;
  let x_6600 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6598, x_6600);
  let x_6604 : f32 = u_xlat1.y;
  let x_6607 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6604) + x_6607);
  let x_6611 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6611.y, x_6611.y, x_6611.y, x_6611.y)) + vec4<f32>(0.6640625f, 0.671875f, 0.6796875f, 0.6875f));
  let x_6620 : vec4<f32> = u_xlat3;
  let x_6622 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_6620 / vec4<f32>(x_6622.x, x_6622.x, x_6622.x, x_6622.x));
  let x_6625 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_6625);
  let x_6628 : f32 = u_xlat1.y;
  let x_6630 : f32 = u_xlat3.x;
  u_xlat1.x = (x_6628 * x_6630);
  let x_6633 : vec2<f32> = u_xlat68;
  let x_6634 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6633 + x_6634);
  let x_6637 : f32 = u_xlat111.z;
  let x_6639 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6637, x_6639);
  let x_6642 : f32 = u_xlat43.z;
  let x_6643 : f32 = u_xlat0;
  let x_6645 : f32 = u_xlat204;
  u_xlat1.x = ((x_6642 * x_6643) + -(x_6645));
  let x_6649 : f32 = u_xlat204;
  let x_6652 : vec3<f32> = u_xlat2;
  let x_6654 : vec2<f32> = (-(vec2<f32>(x_6649, x_6649)) + vec2<f32>(x_6652.x, x_6652.z));
  let x_6655 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6654.x, x_6654.y, x_6655.z);
  let x_6658 : f32 = u_xlat1.x;
  let x_6660 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6658, x_6660);
  let x_6664 : f32 = u_xlat1.y;
  let x_6667 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6664) + x_6667);
  let x_6671 : f32 = u_xlat1.y;
  let x_6673 : f32 = u_xlat3.y;
  u_xlat1.x = (x_6671 * x_6673);
  let x_6676 : vec2<f32> = u_xlat68;
  let x_6677 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6676 + x_6677);
  let x_6680 : f32 = u_xlat112.x;
  let x_6682 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6680, x_6682);
  let x_6685 : f32 = u_xlat44.x;
  let x_6686 : f32 = u_xlat0;
  let x_6688 : f32 = u_xlat204;
  u_xlat1.x = ((x_6685 * x_6686) + -(x_6688));
  let x_6692 : f32 = u_xlat204;
  let x_6695 : vec3<f32> = u_xlat2;
  let x_6697 : vec2<f32> = (-(vec2<f32>(x_6692, x_6692)) + vec2<f32>(x_6695.x, x_6695.z));
  let x_6698 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6697.x, x_6697.y, x_6698.z);
  let x_6701 : f32 = u_xlat1.x;
  let x_6703 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6701, x_6703);
  let x_6707 : f32 = u_xlat1.y;
  let x_6710 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6707) + x_6710);
  let x_6714 : f32 = u_xlat1.y;
  let x_6716 : f32 = u_xlat3.z;
  u_xlat1.x = (x_6714 * x_6716);
  let x_6719 : vec2<f32> = u_xlat68;
  let x_6720 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6719 + x_6720);
  let x_6723 : f32 = u_xlat112.z;
  let x_6725 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6723, x_6725);
  let x_6728 : f32 = u_xlat44.z;
  let x_6729 : f32 = u_xlat0;
  let x_6731 : f32 = u_xlat204;
  u_xlat1.x = ((x_6728 * x_6729) + -(x_6731));
  let x_6735 : f32 = u_xlat204;
  let x_6738 : vec3<f32> = u_xlat2;
  let x_6740 : vec2<f32> = (-(vec2<f32>(x_6735, x_6735)) + vec2<f32>(x_6738.x, x_6738.z));
  let x_6741 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6740.x, x_6740.y, x_6741.z);
  let x_6744 : f32 = u_xlat1.x;
  let x_6746 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6744, x_6746);
  let x_6750 : f32 = u_xlat1.y;
  let x_6753 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6750) + x_6753);
  let x_6757 : f32 = u_xlat1.y;
  let x_6759 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6757 * x_6759);
  let x_6762 : vec2<f32> = u_xlat68;
  let x_6763 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6762 + x_6763);
  let x_6766 : f32 = u_xlat113.x;
  let x_6768 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6766, x_6768);
  let x_6771 : f32 = u_xlat45.x;
  let x_6772 : f32 = u_xlat0;
  let x_6774 : f32 = u_xlat204;
  u_xlat1.x = ((x_6771 * x_6772) + -(x_6774));
  let x_6778 : f32 = u_xlat204;
  let x_6781 : vec3<f32> = u_xlat2;
  let x_6783 : vec2<f32> = (-(vec2<f32>(x_6778, x_6778)) + vec2<f32>(x_6781.x, x_6781.z));
  let x_6784 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6783.x, x_6783.y, x_6784.z);
  let x_6787 : f32 = u_xlat1.x;
  let x_6789 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6787, x_6789);
  let x_6793 : f32 = u_xlat1.y;
  let x_6796 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6793) + x_6796);
  let x_6800 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6800.y, x_6800.y, x_6800.y, x_6800.y)) + vec4<f32>(0.6953125f, 0.703125f, 0.7109375f, 0.71875f));
  let x_6809 : vec4<f32> = u_xlat3;
  let x_6811 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_6809 / vec4<f32>(x_6811.x, x_6811.x, x_6811.x, x_6811.x));
  let x_6814 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_6814);
  let x_6817 : f32 = u_xlat1.y;
  let x_6819 : f32 = u_xlat3.x;
  u_xlat1.x = (x_6817 * x_6819);
  let x_6822 : vec2<f32> = u_xlat68;
  let x_6823 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6822 + x_6823);
  let x_6826 : f32 = u_xlat113.z;
  let x_6828 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6826, x_6828);
  let x_6831 : f32 = u_xlat45.z;
  let x_6832 : f32 = u_xlat0;
  let x_6834 : f32 = u_xlat204;
  u_xlat1.x = ((x_6831 * x_6832) + -(x_6834));
  let x_6838 : f32 = u_xlat204;
  let x_6841 : vec3<f32> = u_xlat2;
  let x_6843 : vec2<f32> = (-(vec2<f32>(x_6838, x_6838)) + vec2<f32>(x_6841.x, x_6841.z));
  let x_6844 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6843.x, x_6843.y, x_6844.z);
  let x_6847 : f32 = u_xlat1.x;
  let x_6849 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6847, x_6849);
  let x_6853 : f32 = u_xlat1.y;
  let x_6856 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6853) + x_6856);
  let x_6860 : f32 = u_xlat1.y;
  let x_6862 : f32 = u_xlat3.y;
  u_xlat1.x = (x_6860 * x_6862);
  let x_6865 : vec2<f32> = u_xlat68;
  let x_6866 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6865 + x_6866);
  let x_6869 : f32 = u_xlat114.x;
  let x_6871 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6869, x_6871);
  let x_6874 : f32 = u_xlat46.x;
  let x_6875 : f32 = u_xlat0;
  let x_6877 : f32 = u_xlat204;
  u_xlat1.x = ((x_6874 * x_6875) + -(x_6877));
  let x_6881 : f32 = u_xlat204;
  let x_6884 : vec3<f32> = u_xlat2;
  let x_6886 : vec2<f32> = (-(vec2<f32>(x_6881, x_6881)) + vec2<f32>(x_6884.x, x_6884.z));
  let x_6887 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6886.x, x_6886.y, x_6887.z);
  let x_6890 : f32 = u_xlat1.x;
  let x_6892 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6890, x_6892);
  let x_6896 : f32 = u_xlat1.y;
  let x_6899 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6896) + x_6899);
  let x_6903 : f32 = u_xlat1.y;
  let x_6905 : f32 = u_xlat3.z;
  u_xlat1.x = (x_6903 * x_6905);
  let x_6908 : vec2<f32> = u_xlat68;
  let x_6909 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6908 + x_6909);
  let x_6912 : f32 = u_xlat114.z;
  let x_6914 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6912, x_6914);
  let x_6917 : f32 = u_xlat46.z;
  let x_6918 : f32 = u_xlat0;
  let x_6920 : f32 = u_xlat204;
  u_xlat1.x = ((x_6917 * x_6918) + -(x_6920));
  let x_6924 : f32 = u_xlat204;
  let x_6927 : vec3<f32> = u_xlat2;
  let x_6929 : vec2<f32> = (-(vec2<f32>(x_6924, x_6924)) + vec2<f32>(x_6927.x, x_6927.z));
  let x_6930 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6929.x, x_6929.y, x_6930.z);
  let x_6933 : f32 = u_xlat1.x;
  let x_6935 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6933, x_6935);
  let x_6939 : f32 = u_xlat1.y;
  let x_6942 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6939) + x_6942);
  let x_6946 : f32 = u_xlat1.y;
  let x_6948 : f32 = u_xlat3.w;
  u_xlat1.x = (x_6946 * x_6948);
  let x_6951 : vec2<f32> = u_xlat68;
  let x_6952 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_6951 + x_6952);
  let x_6955 : f32 = u_xlat115.x;
  let x_6957 : f32 = u_xlat2.x;
  u_xlat204 = min(x_6955, x_6957);
  let x_6960 : f32 = u_xlat47.x;
  let x_6961 : f32 = u_xlat0;
  let x_6963 : f32 = u_xlat204;
  u_xlat1.x = ((x_6960 * x_6961) + -(x_6963));
  let x_6967 : f32 = u_xlat204;
  let x_6970 : vec3<f32> = u_xlat2;
  let x_6972 : vec2<f32> = (-(vec2<f32>(x_6967, x_6967)) + vec2<f32>(x_6970.x, x_6970.z));
  let x_6973 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_6972.x, x_6972.y, x_6973.z);
  let x_6976 : f32 = u_xlat1.x;
  let x_6978 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_6976, x_6978);
  let x_6982 : f32 = u_xlat1.y;
  let x_6985 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_6982) + x_6985);
  let x_6989 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_6989.y, x_6989.y, x_6989.y, x_6989.y)) + vec4<f32>(0.7265625f, 0.734375f, 0.7421875f, 0.75f));
  let x_6998 : vec4<f32> = u_xlat3;
  let x_7000 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_6998 / vec4<f32>(x_7000.x, x_7000.x, x_7000.x, x_7000.x));
  let x_7003 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7003);
  let x_7006 : f32 = u_xlat1.y;
  let x_7008 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7006 * x_7008);
  let x_7011 : vec2<f32> = u_xlat68;
  let x_7012 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7011 + x_7012);
  let x_7015 : f32 = u_xlat115.z;
  let x_7017 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7015, x_7017);
  let x_7020 : f32 = u_xlat47.z;
  let x_7021 : f32 = u_xlat0;
  let x_7023 : f32 = u_xlat204;
  u_xlat1.x = ((x_7020 * x_7021) + -(x_7023));
  let x_7027 : f32 = u_xlat204;
  let x_7030 : vec3<f32> = u_xlat2;
  let x_7032 : vec2<f32> = (-(vec2<f32>(x_7027, x_7027)) + vec2<f32>(x_7030.x, x_7030.z));
  let x_7033 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7032.x, x_7032.y, x_7033.z);
  let x_7036 : f32 = u_xlat1.x;
  let x_7038 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7036, x_7038);
  let x_7042 : f32 = u_xlat1.y;
  let x_7045 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7042) + x_7045);
  let x_7049 : f32 = u_xlat1.y;
  let x_7051 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7049 * x_7051);
  let x_7054 : vec2<f32> = u_xlat68;
  let x_7055 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7054 + x_7055);
  let x_7058 : f32 = u_xlat116.x;
  let x_7060 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7058, x_7060);
  let x_7063 : f32 = u_xlat48.x;
  let x_7064 : f32 = u_xlat0;
  let x_7066 : f32 = u_xlat204;
  u_xlat1.x = ((x_7063 * x_7064) + -(x_7066));
  let x_7070 : f32 = u_xlat204;
  let x_7073 : vec3<f32> = u_xlat2;
  let x_7075 : vec2<f32> = (-(vec2<f32>(x_7070, x_7070)) + vec2<f32>(x_7073.x, x_7073.z));
  let x_7076 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7075.x, x_7075.y, x_7076.z);
  let x_7079 : f32 = u_xlat1.x;
  let x_7081 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7079, x_7081);
  let x_7085 : f32 = u_xlat1.y;
  let x_7088 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7085) + x_7088);
  let x_7092 : f32 = u_xlat1.y;
  let x_7094 : f32 = u_xlat3.z;
  u_xlat1.x = (x_7092 * x_7094);
  let x_7097 : vec2<f32> = u_xlat68;
  let x_7098 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7097 + x_7098);
  let x_7101 : f32 = u_xlat116.z;
  let x_7103 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7101, x_7103);
  let x_7106 : f32 = u_xlat48.z;
  let x_7107 : f32 = u_xlat0;
  let x_7109 : f32 = u_xlat204;
  u_xlat1.x = ((x_7106 * x_7107) + -(x_7109));
  let x_7113 : f32 = u_xlat204;
  let x_7116 : vec3<f32> = u_xlat2;
  let x_7118 : vec2<f32> = (-(vec2<f32>(x_7113, x_7113)) + vec2<f32>(x_7116.x, x_7116.z));
  let x_7119 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7118.x, x_7118.y, x_7119.z);
  let x_7122 : f32 = u_xlat1.x;
  let x_7124 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7122, x_7124);
  let x_7128 : f32 = u_xlat1.y;
  let x_7131 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7128) + x_7131);
  let x_7135 : f32 = u_xlat1.y;
  let x_7137 : f32 = u_xlat3.w;
  u_xlat1.x = (x_7135 * x_7137);
  let x_7140 : vec2<f32> = u_xlat68;
  let x_7141 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7140 + x_7141);
  let x_7144 : f32 = u_xlat117.x;
  let x_7146 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7144, x_7146);
  let x_7149 : f32 = u_xlat49.x;
  let x_7150 : f32 = u_xlat0;
  let x_7152 : f32 = u_xlat204;
  u_xlat1.x = ((x_7149 * x_7150) + -(x_7152));
  let x_7156 : f32 = u_xlat204;
  let x_7159 : vec3<f32> = u_xlat2;
  let x_7161 : vec2<f32> = (-(vec2<f32>(x_7156, x_7156)) + vec2<f32>(x_7159.x, x_7159.z));
  let x_7162 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7161.x, x_7161.y, x_7162.z);
  let x_7165 : f32 = u_xlat1.x;
  let x_7167 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7165, x_7167);
  let x_7171 : f32 = u_xlat1.y;
  let x_7174 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7171) + x_7174);
  let x_7178 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_7178.y, x_7178.y, x_7178.y, x_7178.y)) + vec4<f32>(0.7578125f, 0.765625f, 0.7734375f, 0.78125f));
  let x_7187 : vec4<f32> = u_xlat3;
  let x_7189 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_7187 / vec4<f32>(x_7189.x, x_7189.x, x_7189.x, x_7189.x));
  let x_7192 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7192);
  let x_7195 : f32 = u_xlat1.y;
  let x_7197 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7195 * x_7197);
  let x_7200 : vec2<f32> = u_xlat68;
  let x_7201 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7200 + x_7201);
  let x_7204 : f32 = u_xlat117.z;
  let x_7206 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7204, x_7206);
  let x_7209 : f32 = u_xlat49.z;
  let x_7210 : f32 = u_xlat0;
  let x_7212 : f32 = u_xlat204;
  u_xlat1.x = ((x_7209 * x_7210) + -(x_7212));
  let x_7216 : f32 = u_xlat204;
  let x_7219 : vec3<f32> = u_xlat2;
  let x_7221 : vec2<f32> = (-(vec2<f32>(x_7216, x_7216)) + vec2<f32>(x_7219.x, x_7219.z));
  let x_7222 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7221.x, x_7221.y, x_7222.z);
  let x_7225 : f32 = u_xlat1.x;
  let x_7227 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7225, x_7227);
  let x_7231 : f32 = u_xlat1.y;
  let x_7234 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7231) + x_7234);
  let x_7238 : f32 = u_xlat1.y;
  let x_7240 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7238 * x_7240);
  let x_7243 : vec2<f32> = u_xlat68;
  let x_7244 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7243 + x_7244);
  let x_7247 : f32 = u_xlat118.x;
  let x_7249 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7247, x_7249);
  let x_7252 : f32 = u_xlat50.x;
  let x_7253 : f32 = u_xlat0;
  let x_7255 : f32 = u_xlat204;
  u_xlat1.x = ((x_7252 * x_7253) + -(x_7255));
  let x_7259 : f32 = u_xlat204;
  let x_7262 : vec3<f32> = u_xlat2;
  let x_7264 : vec2<f32> = (-(vec2<f32>(x_7259, x_7259)) + vec2<f32>(x_7262.x, x_7262.z));
  let x_7265 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7264.x, x_7264.y, x_7265.z);
  let x_7268 : f32 = u_xlat1.x;
  let x_7270 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7268, x_7270);
  let x_7274 : f32 = u_xlat1.y;
  let x_7277 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7274) + x_7277);
  let x_7281 : f32 = u_xlat1.y;
  let x_7283 : f32 = u_xlat3.z;
  u_xlat1.x = (x_7281 * x_7283);
  let x_7286 : vec2<f32> = u_xlat68;
  let x_7287 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7286 + x_7287);
  let x_7290 : f32 = u_xlat118.z;
  let x_7292 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7290, x_7292);
  let x_7295 : f32 = u_xlat50.z;
  let x_7296 : f32 = u_xlat0;
  let x_7298 : f32 = u_xlat204;
  u_xlat1.x = ((x_7295 * x_7296) + -(x_7298));
  let x_7302 : f32 = u_xlat204;
  let x_7305 : vec3<f32> = u_xlat2;
  let x_7307 : vec2<f32> = (-(vec2<f32>(x_7302, x_7302)) + vec2<f32>(x_7305.x, x_7305.z));
  let x_7308 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7307.x, x_7307.y, x_7308.z);
  let x_7311 : f32 = u_xlat1.x;
  let x_7313 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7311, x_7313);
  let x_7317 : f32 = u_xlat1.y;
  let x_7320 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7317) + x_7320);
  let x_7324 : f32 = u_xlat1.y;
  let x_7326 : f32 = u_xlat3.w;
  u_xlat1.x = (x_7324 * x_7326);
  let x_7329 : vec2<f32> = u_xlat68;
  let x_7330 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7329 + x_7330);
  let x_7333 : f32 = u_xlat119.x;
  let x_7335 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7333, x_7335);
  let x_7338 : f32 = u_xlat51.x;
  let x_7339 : f32 = u_xlat0;
  let x_7341 : f32 = u_xlat204;
  u_xlat1.x = ((x_7338 * x_7339) + -(x_7341));
  let x_7345 : f32 = u_xlat204;
  let x_7348 : vec3<f32> = u_xlat2;
  let x_7350 : vec2<f32> = (-(vec2<f32>(x_7345, x_7345)) + vec2<f32>(x_7348.x, x_7348.z));
  let x_7351 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7350.x, x_7350.y, x_7351.z);
  let x_7354 : f32 = u_xlat1.x;
  let x_7356 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7354, x_7356);
  let x_7360 : f32 = u_xlat1.y;
  let x_7363 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7360) + x_7363);
  let x_7367 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_7367.y, x_7367.y, x_7367.y, x_7367.y)) + vec4<f32>(0.7890625f, 0.796875f, 0.8046875f, 0.8125f));
  let x_7376 : vec4<f32> = u_xlat3;
  let x_7378 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_7376 / vec4<f32>(x_7378.x, x_7378.x, x_7378.x, x_7378.x));
  let x_7381 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7381);
  let x_7384 : f32 = u_xlat1.y;
  let x_7386 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7384 * x_7386);
  let x_7389 : vec2<f32> = u_xlat68;
  let x_7390 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7389 + x_7390);
  let x_7393 : f32 = u_xlat119.z;
  let x_7395 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7393, x_7395);
  let x_7398 : f32 = u_xlat51.z;
  let x_7399 : f32 = u_xlat0;
  let x_7401 : f32 = u_xlat204;
  u_xlat1.x = ((x_7398 * x_7399) + -(x_7401));
  let x_7405 : f32 = u_xlat204;
  let x_7408 : vec3<f32> = u_xlat2;
  let x_7410 : vec2<f32> = (-(vec2<f32>(x_7405, x_7405)) + vec2<f32>(x_7408.x, x_7408.z));
  let x_7411 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7410.x, x_7410.y, x_7411.z);
  let x_7414 : f32 = u_xlat1.x;
  let x_7416 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7414, x_7416);
  let x_7420 : f32 = u_xlat1.y;
  let x_7423 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7420) + x_7423);
  let x_7427 : f32 = u_xlat1.y;
  let x_7429 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7427 * x_7429);
  let x_7432 : vec2<f32> = u_xlat68;
  let x_7433 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7432 + x_7433);
  let x_7436 : f32 = u_xlat120.x;
  let x_7438 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7436, x_7438);
  let x_7441 : f32 = u_xlat52.x;
  let x_7442 : f32 = u_xlat0;
  let x_7444 : f32 = u_xlat204;
  u_xlat1.x = ((x_7441 * x_7442) + -(x_7444));
  let x_7448 : f32 = u_xlat204;
  let x_7451 : vec3<f32> = u_xlat2;
  let x_7453 : vec2<f32> = (-(vec2<f32>(x_7448, x_7448)) + vec2<f32>(x_7451.x, x_7451.z));
  let x_7454 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7453.x, x_7453.y, x_7454.z);
  let x_7457 : f32 = u_xlat1.x;
  let x_7459 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7457, x_7459);
  let x_7463 : f32 = u_xlat1.y;
  let x_7466 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7463) + x_7466);
  let x_7470 : f32 = u_xlat1.y;
  let x_7472 : f32 = u_xlat3.z;
  u_xlat1.x = (x_7470 * x_7472);
  let x_7475 : vec2<f32> = u_xlat68;
  let x_7476 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7475 + x_7476);
  let x_7479 : f32 = u_xlat120.z;
  let x_7481 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7479, x_7481);
  let x_7484 : f32 = u_xlat52.z;
  let x_7485 : f32 = u_xlat0;
  let x_7487 : f32 = u_xlat204;
  u_xlat1.x = ((x_7484 * x_7485) + -(x_7487));
  let x_7491 : f32 = u_xlat204;
  let x_7494 : vec3<f32> = u_xlat2;
  let x_7496 : vec2<f32> = (-(vec2<f32>(x_7491, x_7491)) + vec2<f32>(x_7494.x, x_7494.z));
  let x_7497 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7496.x, x_7496.y, x_7497.z);
  let x_7500 : f32 = u_xlat1.x;
  let x_7502 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7500, x_7502);
  let x_7506 : f32 = u_xlat1.y;
  let x_7509 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7506) + x_7509);
  let x_7513 : f32 = u_xlat1.y;
  let x_7515 : f32 = u_xlat3.w;
  u_xlat1.x = (x_7513 * x_7515);
  let x_7518 : vec2<f32> = u_xlat68;
  let x_7519 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7518 + x_7519);
  let x_7522 : f32 = u_xlat121.x;
  let x_7524 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7522, x_7524);
  let x_7527 : f32 = u_xlat53.x;
  let x_7528 : f32 = u_xlat0;
  let x_7530 : f32 = u_xlat204;
  u_xlat1.x = ((x_7527 * x_7528) + -(x_7530));
  let x_7534 : f32 = u_xlat204;
  let x_7537 : vec3<f32> = u_xlat2;
  let x_7539 : vec2<f32> = (-(vec2<f32>(x_7534, x_7534)) + vec2<f32>(x_7537.x, x_7537.z));
  let x_7540 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7539.x, x_7539.y, x_7540.z);
  let x_7543 : f32 = u_xlat1.x;
  let x_7545 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7543, x_7545);
  let x_7549 : f32 = u_xlat1.y;
  let x_7552 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7549) + x_7552);
  let x_7556 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_7556.y, x_7556.y, x_7556.y, x_7556.y)) + vec4<f32>(0.8203125f, 0.828125f, 0.8359375f, 0.84375f));
  let x_7565 : vec4<f32> = u_xlat3;
  let x_7567 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_7565 / vec4<f32>(x_7567.x, x_7567.x, x_7567.x, x_7567.x));
  let x_7570 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7570);
  let x_7573 : f32 = u_xlat1.y;
  let x_7575 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7573 * x_7575);
  let x_7578 : vec2<f32> = u_xlat68;
  let x_7579 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7578 + x_7579);
  let x_7582 : f32 = u_xlat121.z;
  let x_7584 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7582, x_7584);
  let x_7587 : f32 = u_xlat53.z;
  let x_7588 : f32 = u_xlat0;
  let x_7590 : f32 = u_xlat204;
  u_xlat1.x = ((x_7587 * x_7588) + -(x_7590));
  let x_7594 : f32 = u_xlat204;
  let x_7597 : vec3<f32> = u_xlat2;
  let x_7599 : vec2<f32> = (-(vec2<f32>(x_7594, x_7594)) + vec2<f32>(x_7597.x, x_7597.z));
  let x_7600 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7599.x, x_7599.y, x_7600.z);
  let x_7603 : f32 = u_xlat1.x;
  let x_7605 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7603, x_7605);
  let x_7609 : f32 = u_xlat1.y;
  let x_7612 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7609) + x_7612);
  let x_7616 : f32 = u_xlat1.y;
  let x_7618 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7616 * x_7618);
  let x_7621 : vec2<f32> = u_xlat68;
  let x_7622 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7621 + x_7622);
  let x_7625 : f32 = u_xlat122.x;
  let x_7627 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7625, x_7627);
  let x_7630 : f32 = u_xlat54.x;
  let x_7631 : f32 = u_xlat0;
  let x_7633 : f32 = u_xlat204;
  u_xlat1.x = ((x_7630 * x_7631) + -(x_7633));
  let x_7637 : f32 = u_xlat204;
  let x_7640 : vec3<f32> = u_xlat2;
  let x_7642 : vec2<f32> = (-(vec2<f32>(x_7637, x_7637)) + vec2<f32>(x_7640.x, x_7640.z));
  let x_7643 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7642.x, x_7642.y, x_7643.z);
  let x_7646 : f32 = u_xlat1.x;
  let x_7648 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7646, x_7648);
  let x_7652 : f32 = u_xlat1.y;
  let x_7655 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7652) + x_7655);
  let x_7659 : f32 = u_xlat1.y;
  let x_7661 : f32 = u_xlat3.z;
  u_xlat1.x = (x_7659 * x_7661);
  let x_7664 : vec2<f32> = u_xlat68;
  let x_7665 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7664 + x_7665);
  let x_7668 : f32 = u_xlat122.z;
  let x_7670 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7668, x_7670);
  let x_7673 : f32 = u_xlat54.z;
  let x_7674 : f32 = u_xlat0;
  let x_7676 : f32 = u_xlat204;
  u_xlat1.x = ((x_7673 * x_7674) + -(x_7676));
  let x_7680 : f32 = u_xlat204;
  let x_7683 : vec3<f32> = u_xlat2;
  let x_7685 : vec2<f32> = (-(vec2<f32>(x_7680, x_7680)) + vec2<f32>(x_7683.x, x_7683.z));
  let x_7686 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7685.x, x_7685.y, x_7686.z);
  let x_7689 : f32 = u_xlat1.x;
  let x_7691 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7689, x_7691);
  let x_7695 : f32 = u_xlat1.y;
  let x_7698 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7695) + x_7698);
  let x_7702 : f32 = u_xlat1.y;
  let x_7704 : f32 = u_xlat3.w;
  u_xlat1.x = (x_7702 * x_7704);
  let x_7707 : vec2<f32> = u_xlat68;
  let x_7708 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7707 + x_7708);
  let x_7711 : f32 = u_xlat123.x;
  let x_7713 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7711, x_7713);
  let x_7716 : f32 = u_xlat55.x;
  let x_7717 : f32 = u_xlat0;
  let x_7719 : f32 = u_xlat204;
  u_xlat1.x = ((x_7716 * x_7717) + -(x_7719));
  let x_7723 : f32 = u_xlat204;
  let x_7726 : vec3<f32> = u_xlat2;
  let x_7728 : vec2<f32> = (-(vec2<f32>(x_7723, x_7723)) + vec2<f32>(x_7726.x, x_7726.z));
  let x_7729 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7728.x, x_7728.y, x_7729.z);
  let x_7732 : f32 = u_xlat1.x;
  let x_7734 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7732, x_7734);
  let x_7738 : f32 = u_xlat1.y;
  let x_7741 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7738) + x_7741);
  let x_7745 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_7745.y, x_7745.y, x_7745.y, x_7745.y)) + vec4<f32>(0.8515625f, 0.859375f, 0.8671875f, 0.875f));
  let x_7754 : vec4<f32> = u_xlat3;
  let x_7756 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_7754 / vec4<f32>(x_7756.x, x_7756.x, x_7756.x, x_7756.x));
  let x_7759 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7759);
  let x_7762 : f32 = u_xlat1.y;
  let x_7764 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7762 * x_7764);
  let x_7767 : vec2<f32> = u_xlat68;
  let x_7768 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7767 + x_7768);
  let x_7771 : f32 = u_xlat123.z;
  let x_7773 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7771, x_7773);
  let x_7776 : f32 = u_xlat55.z;
  let x_7777 : f32 = u_xlat0;
  let x_7779 : f32 = u_xlat204;
  u_xlat1.x = ((x_7776 * x_7777) + -(x_7779));
  let x_7783 : f32 = u_xlat204;
  let x_7786 : vec3<f32> = u_xlat2;
  let x_7788 : vec2<f32> = (-(vec2<f32>(x_7783, x_7783)) + vec2<f32>(x_7786.x, x_7786.z));
  let x_7789 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7788.x, x_7788.y, x_7789.z);
  let x_7792 : f32 = u_xlat1.x;
  let x_7794 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7792, x_7794);
  let x_7798 : f32 = u_xlat1.y;
  let x_7801 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7798) + x_7801);
  let x_7805 : f32 = u_xlat1.y;
  let x_7807 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7805 * x_7807);
  let x_7810 : vec2<f32> = u_xlat68;
  let x_7811 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7810 + x_7811);
  let x_7814 : f32 = u_xlat124.x;
  let x_7816 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7814, x_7816);
  let x_7819 : f32 = u_xlat56.x;
  let x_7820 : f32 = u_xlat0;
  let x_7822 : f32 = u_xlat204;
  u_xlat1.x = ((x_7819 * x_7820) + -(x_7822));
  let x_7826 : f32 = u_xlat204;
  let x_7829 : vec3<f32> = u_xlat2;
  let x_7831 : vec2<f32> = (-(vec2<f32>(x_7826, x_7826)) + vec2<f32>(x_7829.x, x_7829.z));
  let x_7832 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7831.x, x_7831.y, x_7832.z);
  let x_7835 : f32 = u_xlat1.x;
  let x_7837 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7835, x_7837);
  let x_7841 : f32 = u_xlat1.y;
  let x_7844 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7841) + x_7844);
  let x_7848 : f32 = u_xlat1.y;
  let x_7850 : f32 = u_xlat3.z;
  u_xlat1.x = (x_7848 * x_7850);
  let x_7853 : vec2<f32> = u_xlat68;
  let x_7854 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7853 + x_7854);
  let x_7857 : f32 = u_xlat124.z;
  let x_7859 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7857, x_7859);
  let x_7862 : f32 = u_xlat56.z;
  let x_7863 : f32 = u_xlat0;
  let x_7865 : f32 = u_xlat204;
  u_xlat1.x = ((x_7862 * x_7863) + -(x_7865));
  let x_7869 : f32 = u_xlat204;
  let x_7872 : vec3<f32> = u_xlat2;
  let x_7874 : vec2<f32> = (-(vec2<f32>(x_7869, x_7869)) + vec2<f32>(x_7872.x, x_7872.z));
  let x_7875 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7874.x, x_7874.y, x_7875.z);
  let x_7878 : f32 = u_xlat1.x;
  let x_7880 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7878, x_7880);
  let x_7884 : f32 = u_xlat1.y;
  let x_7887 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7884) + x_7887);
  let x_7891 : f32 = u_xlat1.y;
  let x_7893 : f32 = u_xlat3.w;
  u_xlat1.x = (x_7891 * x_7893);
  let x_7896 : vec2<f32> = u_xlat68;
  let x_7897 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7896 + x_7897);
  let x_7900 : f32 = u_xlat125.x;
  let x_7902 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7900, x_7902);
  let x_7905 : f32 = u_xlat57.x;
  let x_7906 : f32 = u_xlat0;
  let x_7908 : f32 = u_xlat204;
  u_xlat1.x = ((x_7905 * x_7906) + -(x_7908));
  let x_7912 : f32 = u_xlat204;
  let x_7915 : vec3<f32> = u_xlat2;
  let x_7917 : vec2<f32> = (-(vec2<f32>(x_7912, x_7912)) + vec2<f32>(x_7915.x, x_7915.z));
  let x_7918 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7917.x, x_7917.y, x_7918.z);
  let x_7921 : f32 = u_xlat1.x;
  let x_7923 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7921, x_7923);
  let x_7927 : f32 = u_xlat1.y;
  let x_7930 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7927) + x_7930);
  let x_7934 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_7934.y, x_7934.y, x_7934.y, x_7934.y)) + vec4<f32>(0.8828125f, 0.890625f, 0.8984375f, 0.90625f));
  let x_7943 : vec4<f32> = u_xlat3;
  let x_7945 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_7943 / vec4<f32>(x_7945.x, x_7945.x, x_7945.x, x_7945.x));
  let x_7948 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_7948);
  let x_7951 : f32 = u_xlat1.y;
  let x_7953 : f32 = u_xlat3.x;
  u_xlat1.x = (x_7951 * x_7953);
  let x_7956 : vec2<f32> = u_xlat68;
  let x_7957 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7956 + x_7957);
  let x_7960 : f32 = u_xlat125.z;
  let x_7962 : f32 = u_xlat2.x;
  u_xlat204 = min(x_7960, x_7962);
  let x_7965 : f32 = u_xlat57.z;
  let x_7966 : f32 = u_xlat0;
  let x_7968 : f32 = u_xlat204;
  u_xlat1.x = ((x_7965 * x_7966) + -(x_7968));
  let x_7972 : f32 = u_xlat204;
  let x_7975 : vec3<f32> = u_xlat2;
  let x_7977 : vec2<f32> = (-(vec2<f32>(x_7972, x_7972)) + vec2<f32>(x_7975.x, x_7975.z));
  let x_7978 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_7977.x, x_7977.y, x_7978.z);
  let x_7981 : f32 = u_xlat1.x;
  let x_7983 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_7981, x_7983);
  let x_7987 : f32 = u_xlat1.y;
  let x_7990 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_7987) + x_7990);
  let x_7994 : f32 = u_xlat1.y;
  let x_7996 : f32 = u_xlat3.y;
  u_xlat1.x = (x_7994 * x_7996);
  let x_7999 : vec2<f32> = u_xlat68;
  let x_8000 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_7999 + x_8000);
  let x_8003 : f32 = u_xlat126.x;
  let x_8005 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8003, x_8005);
  let x_8008 : f32 = u_xlat58.x;
  let x_8009 : f32 = u_xlat0;
  let x_8011 : f32 = u_xlat204;
  u_xlat1.x = ((x_8008 * x_8009) + -(x_8011));
  let x_8015 : f32 = u_xlat204;
  let x_8018 : vec3<f32> = u_xlat2;
  let x_8020 : vec2<f32> = (-(vec2<f32>(x_8015, x_8015)) + vec2<f32>(x_8018.x, x_8018.z));
  let x_8021 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8020.x, x_8020.y, x_8021.z);
  let x_8024 : f32 = u_xlat1.x;
  let x_8026 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8024, x_8026);
  let x_8030 : f32 = u_xlat1.y;
  let x_8033 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8030) + x_8033);
  let x_8037 : f32 = u_xlat1.y;
  let x_8039 : f32 = u_xlat3.z;
  u_xlat1.x = (x_8037 * x_8039);
  let x_8042 : vec2<f32> = u_xlat68;
  let x_8043 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8042 + x_8043);
  let x_8046 : f32 = u_xlat126.z;
  let x_8048 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8046, x_8048);
  let x_8051 : f32 = u_xlat58.z;
  let x_8052 : f32 = u_xlat0;
  let x_8054 : f32 = u_xlat204;
  u_xlat1.x = ((x_8051 * x_8052) + -(x_8054));
  let x_8058 : f32 = u_xlat204;
  let x_8061 : vec3<f32> = u_xlat2;
  let x_8063 : vec2<f32> = (-(vec2<f32>(x_8058, x_8058)) + vec2<f32>(x_8061.x, x_8061.z));
  let x_8064 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8063.x, x_8063.y, x_8064.z);
  let x_8067 : f32 = u_xlat1.x;
  let x_8069 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8067, x_8069);
  let x_8073 : f32 = u_xlat1.y;
  let x_8076 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8073) + x_8076);
  let x_8080 : f32 = u_xlat1.y;
  let x_8082 : f32 = u_xlat3.w;
  u_xlat1.x = (x_8080 * x_8082);
  let x_8085 : vec2<f32> = u_xlat68;
  let x_8086 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8085 + x_8086);
  let x_8089 : f32 = u_xlat127.x;
  let x_8091 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8089, x_8091);
  let x_8094 : f32 = u_xlat59.x;
  let x_8095 : f32 = u_xlat0;
  let x_8097 : f32 = u_xlat204;
  u_xlat1.x = ((x_8094 * x_8095) + -(x_8097));
  let x_8101 : f32 = u_xlat204;
  let x_8104 : vec3<f32> = u_xlat2;
  let x_8106 : vec2<f32> = (-(vec2<f32>(x_8101, x_8101)) + vec2<f32>(x_8104.x, x_8104.z));
  let x_8107 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8106.x, x_8106.y, x_8107.z);
  let x_8110 : f32 = u_xlat1.x;
  let x_8112 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8110, x_8112);
  let x_8116 : f32 = u_xlat1.y;
  let x_8119 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8116) + x_8119);
  let x_8123 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_8123.y, x_8123.y, x_8123.y, x_8123.y)) + vec4<f32>(0.9140625f, 0.921875f, 0.9296875f, 0.9375f));
  let x_8132 : vec4<f32> = u_xlat3;
  let x_8134 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_8132 / vec4<f32>(x_8134.x, x_8134.x, x_8134.x, x_8134.x));
  let x_8137 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_8137);
  let x_8140 : f32 = u_xlat1.y;
  let x_8142 : f32 = u_xlat3.x;
  u_xlat1.x = (x_8140 * x_8142);
  let x_8145 : vec2<f32> = u_xlat68;
  let x_8146 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8145 + x_8146);
  let x_8149 : f32 = u_xlat127.z;
  let x_8151 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8149, x_8151);
  let x_8154 : f32 = u_xlat59.z;
  let x_8155 : f32 = u_xlat0;
  let x_8157 : f32 = u_xlat204;
  u_xlat1.x = ((x_8154 * x_8155) + -(x_8157));
  let x_8161 : f32 = u_xlat204;
  let x_8164 : vec3<f32> = u_xlat2;
  let x_8166 : vec2<f32> = (-(vec2<f32>(x_8161, x_8161)) + vec2<f32>(x_8164.x, x_8164.z));
  let x_8167 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8166.x, x_8166.y, x_8167.z);
  let x_8170 : f32 = u_xlat1.x;
  let x_8172 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8170, x_8172);
  let x_8176 : f32 = u_xlat1.y;
  let x_8179 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8176) + x_8179);
  let x_8183 : f32 = u_xlat1.y;
  let x_8185 : f32 = u_xlat3.y;
  u_xlat1.x = (x_8183 * x_8185);
  let x_8188 : vec2<f32> = u_xlat68;
  let x_8189 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8188 + x_8189);
  let x_8192 : f32 = u_xlat128.x;
  let x_8194 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8192, x_8194);
  let x_8197 : f32 = u_xlat60.x;
  let x_8198 : f32 = u_xlat0;
  let x_8200 : f32 = u_xlat204;
  u_xlat1.x = ((x_8197 * x_8198) + -(x_8200));
  let x_8204 : f32 = u_xlat204;
  let x_8207 : vec3<f32> = u_xlat2;
  let x_8209 : vec2<f32> = (-(vec2<f32>(x_8204, x_8204)) + vec2<f32>(x_8207.x, x_8207.z));
  let x_8210 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8209.x, x_8209.y, x_8210.z);
  let x_8213 : f32 = u_xlat1.x;
  let x_8215 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8213, x_8215);
  let x_8219 : f32 = u_xlat1.y;
  let x_8222 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8219) + x_8222);
  let x_8226 : f32 = u_xlat1.y;
  let x_8228 : f32 = u_xlat3.z;
  u_xlat1.x = (x_8226 * x_8228);
  let x_8231 : vec2<f32> = u_xlat68;
  let x_8232 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8231 + x_8232);
  let x_8235 : f32 = u_xlat128.z;
  let x_8237 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8235, x_8237);
  let x_8240 : f32 = u_xlat60.z;
  let x_8241 : f32 = u_xlat0;
  let x_8243 : f32 = u_xlat204;
  u_xlat1.x = ((x_8240 * x_8241) + -(x_8243));
  let x_8247 : f32 = u_xlat204;
  let x_8250 : vec3<f32> = u_xlat2;
  let x_8252 : vec2<f32> = (-(vec2<f32>(x_8247, x_8247)) + vec2<f32>(x_8250.x, x_8250.z));
  let x_8253 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8252.x, x_8252.y, x_8253.z);
  let x_8256 : f32 = u_xlat1.x;
  let x_8258 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8256, x_8258);
  let x_8262 : f32 = u_xlat1.y;
  let x_8265 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8262) + x_8265);
  let x_8269 : f32 = u_xlat1.y;
  let x_8271 : f32 = u_xlat3.w;
  u_xlat1.x = (x_8269 * x_8271);
  let x_8274 : vec2<f32> = u_xlat68;
  let x_8275 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8274 + x_8275);
  let x_8278 : f32 = u_xlat129.x;
  let x_8280 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8278, x_8280);
  let x_8283 : f32 = u_xlat61.x;
  let x_8284 : f32 = u_xlat0;
  let x_8286 : f32 = u_xlat204;
  u_xlat1.x = ((x_8283 * x_8284) + -(x_8286));
  let x_8290 : f32 = u_xlat204;
  let x_8293 : vec3<f32> = u_xlat2;
  let x_8295 : vec2<f32> = (-(vec2<f32>(x_8290, x_8290)) + vec2<f32>(x_8293.x, x_8293.z));
  let x_8296 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8295.x, x_8295.y, x_8296.z);
  let x_8299 : f32 = u_xlat1.x;
  let x_8301 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8299, x_8301);
  let x_8305 : f32 = u_xlat1.y;
  let x_8308 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8305) + x_8308);
  let x_8312 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (-(vec4<f32>(x_8312.y, x_8312.y, x_8312.y, x_8312.y)) + vec4<f32>(0.9453125f, 0.953125f, 0.9609375f, 0.96875f));
  let x_8321 : vec4<f32> = u_xlat3;
  let x_8323 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  u_xlat3 = (x_8321 / vec4<f32>(x_8323.x, x_8323.x, x_8323.x, x_8323.x));
  let x_8326 : vec4<f32> = u_xlat3;
  u_xlat3 = exp2(x_8326);
  let x_8329 : f32 = u_xlat1.y;
  let x_8331 : f32 = u_xlat3.x;
  u_xlat1.x = (x_8329 * x_8331);
  let x_8334 : vec2<f32> = u_xlat68;
  let x_8335 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8334 + x_8335);
  let x_8338 : f32 = u_xlat129.z;
  let x_8340 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8338, x_8340);
  let x_8343 : f32 = u_xlat61.z;
  let x_8344 : f32 = u_xlat0;
  let x_8346 : f32 = u_xlat204;
  u_xlat1.x = ((x_8343 * x_8344) + -(x_8346));
  let x_8350 : f32 = u_xlat204;
  let x_8353 : vec3<f32> = u_xlat2;
  let x_8355 : vec2<f32> = (-(vec2<f32>(x_8350, x_8350)) + vec2<f32>(x_8353.x, x_8353.z));
  let x_8356 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8355.x, x_8355.y, x_8356.z);
  let x_8359 : f32 = u_xlat1.x;
  let x_8361 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8359, x_8361);
  let x_8365 : f32 = u_xlat1.y;
  let x_8368 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8365) + x_8368);
  let x_8372 : f32 = u_xlat1.y;
  let x_8374 : f32 = u_xlat3.y;
  u_xlat1.x = (x_8372 * x_8374);
  let x_8377 : vec2<f32> = u_xlat68;
  let x_8378 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8377 + x_8378);
  let x_8381 : f32 = u_xlat130.x;
  let x_8383 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8381, x_8383);
  let x_8386 : f32 = u_xlat62.x;
  let x_8387 : f32 = u_xlat0;
  let x_8389 : f32 = u_xlat204;
  u_xlat1.x = ((x_8386 * x_8387) + -(x_8389));
  let x_8393 : f32 = u_xlat204;
  let x_8396 : vec3<f32> = u_xlat2;
  let x_8398 : vec2<f32> = (-(vec2<f32>(x_8393, x_8393)) + vec2<f32>(x_8396.x, x_8396.z));
  let x_8399 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8398.x, x_8398.y, x_8399.z);
  let x_8402 : f32 = u_xlat1.x;
  let x_8404 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8402, x_8404);
  let x_8408 : f32 = u_xlat1.y;
  let x_8411 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8408) + x_8411);
  let x_8415 : f32 = u_xlat1.y;
  let x_8417 : f32 = u_xlat3.z;
  u_xlat1.x = (x_8415 * x_8417);
  let x_8420 : vec2<f32> = u_xlat68;
  let x_8421 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8420 + x_8421);
  let x_8424 : f32 = u_xlat130.z;
  let x_8426 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8424, x_8426);
  let x_8429 : f32 = u_xlat62.z;
  let x_8430 : f32 = u_xlat0;
  let x_8432 : f32 = u_xlat204;
  u_xlat1.x = ((x_8429 * x_8430) + -(x_8432));
  let x_8436 : f32 = u_xlat204;
  let x_8439 : vec3<f32> = u_xlat2;
  let x_8441 : vec2<f32> = (-(vec2<f32>(x_8436, x_8436)) + vec2<f32>(x_8439.x, x_8439.z));
  let x_8442 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8441.x, x_8441.y, x_8442.z);
  let x_8445 : f32 = u_xlat1.x;
  let x_8447 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8445, x_8447);
  let x_8451 : f32 = u_xlat1.y;
  let x_8454 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8451) + x_8454);
  let x_8458 : f32 = u_xlat1.y;
  let x_8460 : f32 = u_xlat3.w;
  u_xlat1.x = (x_8458 * x_8460);
  let x_8463 : vec2<f32> = u_xlat68;
  let x_8464 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8463 + x_8464);
  let x_8467 : f32 = u_xlat131.x;
  let x_8469 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8467, x_8469);
  let x_8472 : f32 = u_xlat63.x;
  let x_8473 : f32 = u_xlat0;
  let x_8475 : f32 = u_xlat204;
  u_xlat1.x = ((x_8472 * x_8473) + -(x_8475));
  let x_8479 : f32 = u_xlat204;
  let x_8482 : vec3<f32> = u_xlat2;
  let x_8484 : vec2<f32> = (-(vec2<f32>(x_8479, x_8479)) + vec2<f32>(x_8482.x, x_8482.z));
  let x_8485 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_8484.x, x_8484.y, x_8485.z);
  let x_8488 : f32 = u_xlat1.x;
  let x_8490 : f32 = u_xlat2.y;
  u_xlat1.y = min(x_8488, x_8490);
  let x_8494 : f32 = u_xlat1.y;
  let x_8497 : f32 = u_xlat2.y;
  u_xlat2.z = (-(x_8494) + x_8497);
  let x_8501 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  let x_8508 : vec3<f32> = (-(vec3<f32>(x_8501.y, x_8501.y, x_8501.y)) + vec3<f32>(0.9765625f, 0.984375f, 0.9921875f));
  let x_8509 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_8508.x, x_8508.y, x_8508.z, x_8509.w);
  let x_8511 : vec4<f32> = u_xlat3;
  let x_8514 : vec4<f32> = x_2547.x_ScaleOffsetRes;
  let x_8516 : vec3<f32> = (vec3<f32>(x_8511.x, x_8511.y, x_8511.z) / vec3<f32>(x_8514.x, x_8514.x, x_8514.x));
  let x_8517 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_8516.x, x_8516.y, x_8516.z, x_8517.w);
  let x_8519 : vec4<f32> = u_xlat3;
  let x_8521 : vec3<f32> = exp2(vec3<f32>(x_8519.x, x_8519.y, x_8519.z));
  let x_8522 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_8521.x, x_8521.y, x_8521.z, x_8522.w);
  let x_8525 : f32 = u_xlat1.y;
  let x_8527 : f32 = u_xlat3.x;
  u_xlat1.x = (x_8525 * x_8527);
  let x_8530 : vec2<f32> = u_xlat68;
  let x_8531 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8530 + x_8531);
  let x_8534 : f32 = u_xlat131.z;
  let x_8536 : f32 = u_xlat2.x;
  u_xlat204 = min(x_8534, x_8536);
  let x_8539 : f32 = u_xlat63.z;
  let x_8540 : f32 = u_xlat0;
  let x_8542 : f32 = u_xlat204;
  u_xlat1.x = ((x_8539 * x_8540) + -(x_8542));
  let x_8546 : f32 = u_xlat204;
  let x_8549 : vec3<f32> = u_xlat2;
  u_xlat69 = (-(vec2<f32>(x_8546, x_8546)) + vec2<f32>(x_8549.x, x_8549.z));
  let x_8553 : f32 = u_xlat1.x;
  let x_8555 : f32 = u_xlat69.y;
  u_xlat2.y = min(x_8553, x_8555);
  let x_8559 : f32 = u_xlat69.y;
  let x_8561 : f32 = u_xlat2.y;
  u_xlat204 = (x_8559 + -(x_8561));
  let x_8565 : f32 = u_xlat2.y;
  let x_8567 : f32 = u_xlat3.y;
  u_xlat2.x = (x_8565 * x_8567);
  let x_8570 : vec2<f32> = u_xlat68;
  let x_8571 : vec3<f32> = u_xlat2;
  u_xlat68 = (x_8570 + vec2<f32>(x_8571.x, x_8571.y));
  let x_8574 : f32 = u_xlat132;
  let x_8576 : f32 = u_xlat69.x;
  u_xlat1.x = min(x_8574, x_8576);
  let x_8579 : f32 = u_xlat64;
  let x_8580 : f32 = u_xlat0;
  let x_8583 : f32 = u_xlat1.x;
  u_xlat69.x = ((x_8579 * x_8580) + -(x_8583));
  let x_8587 : f32 = u_xlat204;
  let x_8589 : f32 = u_xlat1.x;
  u_xlat204 = (x_8587 + -(x_8589));
  let x_8593 : f32 = u_xlat69.x;
  let x_8594 : f32 = u_xlat204;
  u_xlat1.y = min(x_8593, x_8594);
  let x_8598 : f32 = u_xlat1.y;
  let x_8600 : f32 = u_xlat3.z;
  u_xlat1.x = (x_8598 * x_8600);
  let x_8603 : vec2<f32> = u_xlat68;
  let x_8604 : vec2<f32> = u_xlat1;
  u_xlat68 = (x_8603 + x_8604);
  let x_8607 : f32 = u_xlat68.y;
  u_xlat136 = max(x_8607, 0.0001f);
  let x_8611 : f32 = u_xlat68.x;
  let x_8612 : f32 = u_xlat136;
  u_xlat68.x = (x_8611 / x_8612);
  let x_8616 : f32 = u_xlat68.x;
  let x_8618 : f32 = x_2547.x_Params.z;
  u_xlat68.x = max(x_8616, x_8618);
  let x_8624 : f32 = u_xlat68.x;
  let x_8626 : f32 = x_2547.x_Params.w;
  vs_TEXCOORD2 = min(x_8624, x_8626);
  let x_8634 : vec3<f32> = in_POSITION0;
  let x_8635 : vec2<f32> = vec2<f32>(x_8634.x, x_8634.y);
  let x_8638 : vec4<f32> = gl_Position;
  gl_Position = vec4<f32>(x_8635.x, x_8635.y, x_8638.z, x_8638.w);
  let x_8643 : vec4<f32> = gl_Position;
  gl_Position = vec4<f32>(x_8643.x, x_8643.y, vec2<f32>(0.0f, 1.0f).x, vec2<f32>(0.0f, 1.0f).y);
  let x_8647 : vec3<f32> = in_POSITION0;
  vs_TEXCOORD0 = ((vec2<f32>(x_8647.x, x_8647.y) * vec2<f32>(0.5f, -0.5f)) + vec2<f32>(0.5f, 0.5f));
  let x_8655 : f32 = u_xlat0;
  vs_TEXCOORD1 = x_8655;
  return;
}

struct main_out {
  @location(2)
  vs_TEXCOORD2_1 : f32,
  @builtin(position)
  gl_Position : vec4<f32>,
  @location(0)
  vs_TEXCOORD0_1 : vec2<f32>,
  @location(1)
  vs_TEXCOORD1_1 : f32,
}

@vertex
fn main(@location(0) in_POSITION0_param : vec3<f32>) -> main_out {
  in_POSITION0 = in_POSITION0_param;
  main_1();
  return main_out(vs_TEXCOORD2, gl_Position, vs_TEXCOORD0, vs_TEXCOORD1);
}

