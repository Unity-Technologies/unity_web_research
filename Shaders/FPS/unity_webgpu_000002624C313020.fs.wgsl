type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  unity_CameraInvProjection : mat4x4<f32>,
  unity_CameraToWorld : mat4x4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
}

var<private> u_xlat0 : vec4<f32>;

@group(0) @binding(1) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

var<private> u_xlat1 : vec4<f32>;

@group(0) @binding(0) var<uniform> x_61 : PGlobals;

var<private> u_xlat17 : vec2<f32>;

var<private> u_xlat2 : vec4<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlat4 : vec4<f32>;

var<private> u_xlat5 : vec4<f32>;

var<private> u_xlat6 : vec4<f32>;

var<private> u_xlat7 : vec4<f32>;

@group(0) @binding(2) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(3) var sampler_ShadowMapTexture : sampler_comparison;

var<private> u_xlat8 : vec3<f32>;

var<private> u_xlat24 : f32;

var<private> u_xlat16 : f32;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec4<f32> = vs_TEXCOORD0;
  let x_25 : vec4<f32> = textureSample(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_23.x, x_23.y));
  u_xlat0.x = x_25.x;
  let x_32 : f32 = u_xlat0.x;
  u_xlat0.z = (-(x_32) + 1.0f);
  let x_38 : vec4<f32> = vs_TEXCOORD0;
  let x_39 : vec2<f32> = vec2<f32>(x_38.z, x_38.w);
  let x_40 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_39.x, x_39.y, x_40.z, x_40.w);
  let x_43 : vec4<f32> = u_xlat0;
  let x_50 : vec3<f32> = ((vec3<f32>(x_43.x, x_43.y, x_43.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_51 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_50.x, x_50.y, x_50.z, x_51.w);
  let x_54 : vec4<f32> = u_xlat0;
  let x_67 : vec4<f32> = x_61.unity_CameraInvProjection[1i];
  u_xlat1 = (vec4<f32>(x_54.y, x_54.y, x_54.y, x_54.y) * x_67);
  let x_70 : vec4<f32> = x_61.unity_CameraInvProjection[0i];
  let x_71 : vec4<f32> = u_xlat0;
  let x_74 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_70 * vec4<f32>(x_71.x, x_71.x, x_71.x, x_71.x)) + x_74);
  let x_78 : vec4<f32> = x_61.unity_CameraInvProjection[2i];
  let x_79 : vec4<f32> = u_xlat0;
  let x_82 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_78 * vec4<f32>(x_79.z, x_79.z, x_79.z, x_79.z)) + x_82);
  let x_84 : vec4<f32> = u_xlat0;
  let x_87 : vec4<f32> = x_61.unity_CameraInvProjection[3i];
  u_xlat0 = (x_84 + x_87);
  let x_89 : vec4<f32> = u_xlat0;
  let x_91 : vec4<f32> = u_xlat0;
  let x_93 : vec3<f32> = (vec3<f32>(x_89.x, x_89.y, x_89.z) / vec3<f32>(x_91.w, x_91.w, x_91.w));
  let x_94 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_93.x, x_93.y, x_93.z, x_94.w);
  let x_96 : vec4<f32> = u_xlat0;
  let x_99 : vec4<f32> = x_61.unity_CameraToWorld[1i];
  u_xlat1 = (vec4<f32>(x_96.y, x_96.y, x_96.y, x_96.y) * x_99);
  let x_102 : vec4<f32> = x_61.unity_CameraToWorld[0i];
  let x_103 : vec4<f32> = u_xlat0;
  let x_106 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_102 * vec4<f32>(x_103.x, x_103.x, x_103.x, x_103.x)) + x_106);
  let x_109 : vec4<f32> = x_61.unity_CameraToWorld[2i];
  let x_110 : vec4<f32> = u_xlat0;
  let x_114 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_109 * -(vec4<f32>(x_110.z, x_110.z, x_110.z, x_110.z))) + x_114);
  let x_116 : vec4<f32> = u_xlat0;
  let x_118 : vec4<f32> = x_61.unity_CameraToWorld[3i];
  u_xlat0 = (x_116 + x_118);
  let x_120 : vec4<f32> = u_xlat0;
  let x_123 : vec4<f32> = x_61.unity_WorldToShadow[0i][1i];
  let x_125 : vec3<f32> = (vec3<f32>(x_120.y, x_120.y, x_120.y) * vec3<f32>(x_123.x, x_123.y, x_123.z));
  let x_126 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_125.x, x_125.y, x_125.z, x_126.w);
  let x_129 : vec4<f32> = x_61.unity_WorldToShadow[0i][0i];
  let x_131 : vec4<f32> = u_xlat0;
  let x_134 : vec4<f32> = u_xlat1;
  let x_136 : vec3<f32> = ((vec3<f32>(x_129.x, x_129.y, x_129.z) * vec3<f32>(x_131.x, x_131.x, x_131.x)) + vec3<f32>(x_134.x, x_134.y, x_134.z));
  let x_137 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_136.x, x_136.y, x_136.z, x_137.w);
  let x_140 : vec4<f32> = x_61.unity_WorldToShadow[0i][2i];
  let x_142 : vec4<f32> = u_xlat0;
  let x_145 : vec4<f32> = u_xlat1;
  let x_147 : vec3<f32> = ((vec3<f32>(x_140.x, x_140.y, x_140.z) * vec3<f32>(x_142.z, x_142.z, x_142.z)) + vec3<f32>(x_145.x, x_145.y, x_145.z));
  let x_148 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_147.x, x_147.y, x_147.z, x_148.w);
  let x_151 : vec4<f32> = x_61.unity_WorldToShadow[0i][3i];
  let x_153 : vec4<f32> = u_xlat0;
  let x_156 : vec4<f32> = u_xlat0;
  let x_158 : vec3<f32> = ((vec3<f32>(x_151.x, x_151.y, x_151.z) * vec3<f32>(x_153.w, x_153.w, x_153.w)) + vec3<f32>(x_156.x, x_156.y, x_156.z));
  let x_159 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_158.x, x_158.y, x_158.z, x_159.w);
  let x_161 : vec4<f32> = u_xlat0;
  let x_165 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_170 : vec2<f32> = ((vec2<f32>(x_161.x, x_161.y) * vec2<f32>(x_165.z, x_165.w)) + vec2<f32>(0.5f, 0.5f));
  let x_171 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_170.x, x_170.y, x_171.z, x_171.w);
  let x_173 : vec4<f32> = u_xlat1;
  let x_175 : vec2<f32> = floor(vec2<f32>(x_173.x, x_173.y));
  let x_176 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_175.x, x_175.y, x_176.z, x_176.w);
  let x_178 : vec4<f32> = u_xlat0;
  let x_181 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_184 : vec4<f32> = u_xlat1;
  let x_187 : vec2<f32> = ((vec2<f32>(x_178.x, x_178.y) * vec2<f32>(x_181.z, x_181.w)) + -(vec2<f32>(x_184.x, x_184.y)));
  let x_188 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_187.x, x_187.y, x_188.z, x_188.w);
  let x_192 : vec4<f32> = u_xlat0;
  u_xlat17 = (-(vec2<f32>(x_192.x, x_192.y)) + vec2<f32>(1.0f, 1.0f));
  let x_198 : vec4<f32> = u_xlat0;
  let x_202 : vec2<f32> = min(vec2<f32>(x_198.x, x_198.y), vec2<f32>(0.0f, 0.0f));
  let x_203 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_202.x, x_202.y, x_203.z, x_203.w);
  let x_205 : vec4<f32> = u_xlat2;
  let x_208 : vec4<f32> = u_xlat2;
  let x_211 : vec2<f32> = u_xlat17;
  u_xlat17 = ((-(vec2<f32>(x_205.x, x_205.y)) * vec2<f32>(x_208.x, x_208.y)) + x_211);
  let x_213 : vec2<f32> = u_xlat17;
  u_xlat17 = (x_213 + vec2<f32>(2.0f, 2.0f));
  let x_216 : vec2<f32> = u_xlat17;
  let x_219 : vec2<f32> = (x_216 * vec2<f32>(0.081632003f, 0.081632003f));
  let x_220 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_219.x, x_219.y, x_220.z, x_220.w);
  let x_224 : f32 = u_xlat2.x;
  u_xlat3.y = x_224;
  let x_227 : vec4<f32> = u_xlat0;
  u_xlat17 = max(vec2<f32>(x_227.x, x_227.y), vec2<f32>(0.0f, 0.0f));
  let x_231 : vec4<f32> = u_xlat0;
  u_xlat4 = (vec4<f32>(x_231.x, x_231.x, x_231.y, x_231.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
  let x_235 : vec2<f32> = u_xlat17;
  let x_237 : vec2<f32> = u_xlat17;
  let x_239 : vec4<f32> = u_xlat4;
  u_xlat17 = ((-(x_235) * x_237) + vec2<f32>(x_239.y, x_239.w));
  let x_242 : vec4<f32> = u_xlat4;
  let x_244 : vec4<f32> = u_xlat4;
  u_xlat4 = (vec4<f32>(x_242.x, x_242.x, x_242.z, x_242.z) * vec4<f32>(x_244.x, x_244.x, x_244.z, x_244.z));
  let x_247 : vec2<f32> = u_xlat17;
  u_xlat17 = (x_247 + vec2<f32>(2.0f, 2.0f));
  let x_251 : f32 = u_xlat17.x;
  u_xlat5.z = (x_251 * 0.081632003f);
  let x_256 : f32 = u_xlat17.y;
  u_xlat6.z = (x_256 * 0.081632003f);
  let x_259 : vec4<f32> = u_xlat4;
  let x_262 : vec4<f32> = u_xlat0;
  u_xlat17 = ((vec2<f32>(x_259.x, x_259.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_262.x, x_262.y)));
  let x_266 : vec4<f32> = u_xlat4;
  let x_270 : vec2<f32> = (vec2<f32>(x_266.w, x_266.y) * vec2<f32>(0.040816002f, 0.040816002f));
  let x_271 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_271.x, x_271.y, x_270.x, x_270.y);
  let x_273 : vec2<f32> = u_xlat17;
  let x_275 : vec2<f32> = (vec2<f32>(x_273.y, x_273.x) * vec2<f32>(0.081632003f, 0.081632003f));
  let x_276 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_275.x, x_275.y, x_276.z, x_276.w);
  let x_279 : f32 = u_xlat6.y;
  u_xlat5.x = x_279;
  let x_282 : f32 = u_xlat3.z;
  u_xlat2.w = x_282;
  let x_285 : vec4<f32> = u_xlat0;
  let x_292 : vec2<f32> = ((vec2<f32>(x_285.x, x_285.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_293 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_293.x, x_292.x, x_293.z, x_292.y);
  let x_295 : vec4<f32> = u_xlat0;
  let x_299 : vec2<f32> = ((vec2<f32>(x_295.x, x_295.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_300 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_299.x, x_300.y, x_299.y, x_300.w);
  let x_302 : vec4<f32> = u_xlat3;
  let x_303 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_302 + x_303);
  let x_305 : vec4<f32> = u_xlat3;
  let x_306 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_305 / x_306);
  let x_308 : vec4<f32> = u_xlat3;
  u_xlat3 = (x_308 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_314 : vec4<f32> = u_xlat3;
  let x_317 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  u_xlat3 = (vec4<f32>(x_314.w, x_314.x, x_314.y, x_314.z) * vec4<f32>(x_317.x, x_317.x, x_317.x, x_317.x));
  let x_320 : vec4<f32> = u_xlat3;
  let x_321 : vec3<f32> = vec3<f32>(x_320.y, x_320.z, x_320.w);
  let x_322 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_321.x, x_322.y, x_321.y, x_321.z);
  let x_324 : vec4<f32> = u_xlat0;
  let x_327 : vec2<f32> = ((vec2<f32>(x_324.y, x_324.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_328 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_328.x, x_327.x, x_328.z, x_327.y);
  let x_330 : vec4<f32> = u_xlat0;
  let x_333 : vec2<f32> = ((vec2<f32>(x_330.y, x_330.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_334 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
  let x_336 : vec4<f32> = u_xlat2;
  let x_337 : vec4<f32> = u_xlat6;
  u_xlat6 = (x_336 + x_337);
  let x_339 : vec4<f32> = u_xlat2;
  let x_340 : vec4<f32> = u_xlat6;
  u_xlat2 = (x_339 / x_340);
  let x_342 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_342 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_344 : vec4<f32> = u_xlat2;
  let x_347 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  u_xlat2 = (vec4<f32>(x_344.x, x_344.w, x_344.y, x_344.z) * vec4<f32>(x_347.y, x_347.y, x_347.y, x_347.y));
  let x_351 : f32 = u_xlat2.x;
  u_xlat5.y = x_351;
  let x_354 : vec4<f32> = u_xlat1;
  let x_357 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_360 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_354.x, x_354.y, x_354.x, x_354.y) * vec4<f32>(x_357.x, x_357.y, x_357.x, x_357.y)) + vec4<f32>(x_360.x, x_360.y, x_360.z, x_360.y));
  let x_365 : vec4<f32> = u_xlat7;
  let x_366 : vec2<f32> = vec2<f32>(x_365.z, x_365.w);
  let x_368 : f32 = u_xlat0.z;
  txVec0 = vec3<f32>(x_366.x, x_366.y, x_368);
  let x_380 : vec3<f32> = txVec0;
  let x_382 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_380.xy, x_380.z);
  u_xlat0.x = x_382;
  let x_385 : vec4<f32> = u_xlat7;
  let x_386 : vec2<f32> = vec2<f32>(x_385.x, x_385.y);
  let x_388 : f32 = u_xlat0.z;
  txVec1 = vec3<f32>(x_386.x, x_386.y, x_388);
  let x_397 : vec3<f32> = txVec1;
  let x_399 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_397.xy, x_397.z);
  u_xlat8.x = x_399;
  let x_401 : vec4<f32> = u_xlat4;
  let x_402 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_401 * vec4<f32>(x_402.x, x_402.x, x_402.x, x_402.x));
  let x_406 : f32 = u_xlat0.x;
  let x_408 : f32 = u_xlat7.y;
  u_xlat0.x = (x_406 * x_408);
  let x_412 : f32 = u_xlat7.x;
  let x_414 : f32 = u_xlat8.x;
  let x_417 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_412 * x_414) + x_417);
  let x_420 : vec4<f32> = u_xlat1;
  let x_423 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_426 : vec4<f32> = u_xlat5;
  let x_428 : vec2<f32> = ((vec2<f32>(x_420.x, x_420.y) * vec2<f32>(x_423.x, x_423.y)) + vec2<f32>(x_426.w, x_426.y));
  let x_429 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_428.x, x_429.y, x_428.y);
  let x_432 : f32 = u_xlat5.y;
  u_xlat3.y = x_432;
  let x_434 : vec4<f32> = u_xlat1;
  let x_437 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_440 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_434.x, x_434.y) * vec2<f32>(x_437.x, x_437.y)) + vec2<f32>(x_440.x, x_440.y));
  let x_444 : vec2<f32> = u_xlat17;
  let x_446 : f32 = u_xlat0.z;
  txVec2 = vec3<f32>(x_444.x, x_444.y, x_446);
  let x_453 : vec3<f32> = txVec2;
  let x_455 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_453.xy, x_453.z);
  u_xlat17.x = x_455;
  let x_458 : vec3<f32> = u_xlat8;
  let x_459 : vec2<f32> = vec2<f32>(x_458.x, x_458.z);
  let x_461 : f32 = u_xlat0.z;
  txVec3 = vec3<f32>(x_459.x, x_459.y, x_461);
  let x_468 : vec3<f32> = txVec3;
  let x_470 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_468.xy, x_468.z);
  u_xlat8.x = x_470;
  let x_473 : f32 = u_xlat7.z;
  let x_475 : f32 = u_xlat8.x;
  let x_478 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_473 * x_475) + x_478);
  let x_482 : f32 = u_xlat7.w;
  let x_484 : f32 = u_xlat17.x;
  let x_487 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_482 * x_484) + x_487);
  let x_491 : f32 = u_xlat2.z;
  u_xlat5.y = x_491;
  let x_493 : vec4<f32> = u_xlat1;
  let x_496 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_499 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y) * vec4<f32>(x_496.x, x_496.y, x_496.x, x_496.y)) + vec4<f32>(x_499.x, x_499.y, x_499.z, x_499.y));
  let x_503 : vec4<f32> = u_xlat7;
  let x_504 : vec2<f32> = vec2<f32>(x_503.x, x_503.y);
  let x_506 : f32 = u_xlat0.z;
  txVec4 = vec3<f32>(x_504.x, x_504.y, x_506);
  let x_513 : vec3<f32> = txVec4;
  let x_515 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_513.xy, x_513.z);
  u_xlat8.x = x_515;
  let x_518 : vec4<f32> = u_xlat7;
  let x_519 : vec2<f32> = vec2<f32>(x_518.z, x_518.w);
  let x_521 : f32 = u_xlat0.z;
  txVec5 = vec3<f32>(x_519.x, x_519.y, x_521);
  let x_529 : vec3<f32> = txVec5;
  let x_531 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_529.xy, x_529.z);
  u_xlat24 = x_531;
  let x_532 : vec4<f32> = u_xlat4;
  let x_533 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_532 * vec4<f32>(x_533.y, x_533.y, x_533.y, x_533.y));
  let x_537 : f32 = u_xlat7.x;
  let x_539 : f32 = u_xlat8.x;
  let x_542 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_537 * x_539) + x_542);
  let x_546 : f32 = u_xlat7.y;
  let x_547 : f32 = u_xlat24;
  let x_550 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_546 * x_547) + x_550);
  let x_553 : vec4<f32> = u_xlat1;
  let x_556 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_559 : vec4<f32> = u_xlat5;
  let x_561 : vec2<f32> = ((vec2<f32>(x_553.x, x_553.y) * vec2<f32>(x_556.x, x_556.y)) + vec2<f32>(x_559.w, x_559.y));
  let x_562 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_561.x, x_562.y, x_561.y);
  let x_565 : f32 = u_xlat5.y;
  u_xlat3.z = x_565;
  let x_567 : vec4<f32> = u_xlat1;
  let x_570 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_573 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_567.x, x_567.y) * vec2<f32>(x_570.x, x_570.y)) + vec2<f32>(x_573.x, x_573.z));
  let x_577 : vec2<f32> = u_xlat17;
  let x_579 : f32 = u_xlat0.z;
  txVec6 = vec3<f32>(x_577.x, x_577.y, x_579);
  let x_586 : vec3<f32> = txVec6;
  let x_588 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_586.xy, x_586.z);
  u_xlat17.x = x_588;
  let x_591 : vec3<f32> = u_xlat8;
  let x_592 : vec2<f32> = vec2<f32>(x_591.x, x_591.z);
  let x_594 : f32 = u_xlat0.z;
  txVec7 = vec3<f32>(x_592.x, x_592.y, x_594);
  let x_601 : vec3<f32> = txVec7;
  let x_603 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_601.xy, x_601.z);
  u_xlat8.x = x_603;
  let x_606 : f32 = u_xlat7.z;
  let x_608 : f32 = u_xlat8.x;
  let x_611 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_606 * x_608) + x_611);
  let x_615 : f32 = u_xlat7.w;
  let x_617 : f32 = u_xlat17.x;
  let x_620 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_615 * x_617) + x_620);
  let x_624 : f32 = u_xlat2.w;
  u_xlat5.y = x_624;
  let x_626 : vec4<f32> = u_xlat1;
  let x_629 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_632 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_626.x, x_626.y, x_626.x, x_626.y) * vec4<f32>(x_629.x, x_629.y, x_629.x, x_629.y)) + vec4<f32>(x_632.x, x_632.y, x_632.z, x_632.y));
  let x_636 : vec4<f32> = u_xlat7;
  let x_637 : vec2<f32> = vec2<f32>(x_636.x, x_636.y);
  let x_639 : f32 = u_xlat0.z;
  txVec8 = vec3<f32>(x_637.x, x_637.y, x_639);
  let x_646 : vec3<f32> = txVec8;
  let x_648 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_646.xy, x_646.z);
  u_xlat8.x = x_648;
  let x_651 : vec4<f32> = u_xlat7;
  let x_652 : vec2<f32> = vec2<f32>(x_651.z, x_651.w);
  let x_654 : f32 = u_xlat0.z;
  txVec9 = vec3<f32>(x_652.x, x_652.y, x_654);
  let x_661 : vec3<f32> = txVec9;
  let x_663 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_661.xy, x_661.z);
  u_xlat24 = x_663;
  let x_664 : vec4<f32> = u_xlat4;
  let x_665 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_664 * vec4<f32>(x_665.z, x_665.z, x_665.z, x_665.z));
  let x_668 : vec4<f32> = u_xlat4;
  let x_669 : vec4<f32> = u_xlat6;
  u_xlat4 = (x_668 * vec4<f32>(x_669.w, x_669.w, x_669.w, x_669.w));
  let x_673 : f32 = u_xlat7.x;
  let x_675 : f32 = u_xlat8.x;
  let x_678 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_673 * x_675) + x_678);
  let x_682 : f32 = u_xlat7.y;
  let x_683 : f32 = u_xlat24;
  let x_686 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_682 * x_683) + x_686);
  let x_689 : vec4<f32> = u_xlat1;
  let x_692 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_695 : vec4<f32> = u_xlat5;
  let x_697 : vec2<f32> = ((vec2<f32>(x_689.x, x_689.y) * vec2<f32>(x_692.x, x_692.y)) + vec2<f32>(x_695.w, x_695.y));
  let x_698 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_697.x, x_698.y, x_697.y);
  let x_700 : vec4<f32> = u_xlat5;
  let x_701 : vec3<f32> = vec3<f32>(x_700.x, x_700.z, x_700.w);
  let x_702 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_701.x, x_702.y, x_701.y, x_701.z);
  let x_705 : f32 = u_xlat5.y;
  u_xlat3.w = x_705;
  let x_707 : vec4<f32> = u_xlat1;
  let x_710 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_713 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_707.x, x_707.y) * vec2<f32>(x_710.x, x_710.y)) + vec2<f32>(x_713.x, x_713.w));
  let x_717 : vec2<f32> = u_xlat17;
  let x_719 : f32 = u_xlat0.z;
  txVec10 = vec3<f32>(x_717.x, x_717.y, x_719);
  let x_726 : vec3<f32> = txVec10;
  let x_728 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_726.xy, x_726.z);
  u_xlat17.x = x_728;
  let x_731 : vec3<f32> = u_xlat8;
  let x_732 : vec2<f32> = vec2<f32>(x_731.x, x_731.z);
  let x_734 : f32 = u_xlat0.z;
  txVec11 = vec3<f32>(x_732.x, x_732.y, x_734);
  let x_741 : vec3<f32> = txVec11;
  let x_743 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_741.xy, x_741.z);
  u_xlat8.x = x_743;
  let x_746 : f32 = u_xlat7.z;
  let x_748 : f32 = u_xlat8.x;
  let x_751 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_746 * x_748) + x_751);
  let x_755 : f32 = u_xlat7.w;
  let x_757 : f32 = u_xlat17.x;
  let x_760 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_755 * x_757) + x_760);
  let x_763 : vec4<f32> = u_xlat1;
  let x_766 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_769 : vec4<f32> = u_xlat2;
  u_xlat5 = ((vec4<f32>(x_763.x, x_763.y, x_763.x, x_763.y) * vec4<f32>(x_766.x, x_766.y, x_766.x, x_766.y)) + vec4<f32>(x_769.x, x_769.y, x_769.z, x_769.y));
  let x_772 : vec4<f32> = u_xlat1;
  let x_775 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_778 : vec4<f32> = u_xlat2;
  let x_780 : vec2<f32> = ((vec2<f32>(x_772.x, x_772.y) * vec2<f32>(x_775.x, x_775.y)) + vec2<f32>(x_778.w, x_778.y));
  let x_781 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_780.x, x_781.y, x_780.y);
  let x_784 : f32 = u_xlat2.y;
  u_xlat3.y = x_784;
  let x_786 : vec4<f32> = u_xlat1;
  let x_789 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_792 : vec4<f32> = u_xlat3;
  let x_794 : vec2<f32> = ((vec2<f32>(x_786.x, x_786.y) * vec2<f32>(x_789.x, x_789.y)) + vec2<f32>(x_792.x, x_792.y));
  let x_795 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_794.x, x_794.y, x_795.z, x_795.w);
  let x_798 : vec4<f32> = u_xlat1;
  let x_799 : vec2<f32> = vec2<f32>(x_798.x, x_798.y);
  let x_801 : f32 = u_xlat0.z;
  txVec12 = vec3<f32>(x_799.x, x_799.y, x_801);
  let x_808 : vec3<f32> = txVec12;
  let x_810 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_808.xy, x_808.z);
  u_xlat1.x = x_810;
  let x_813 : vec3<f32> = u_xlat8;
  let x_814 : vec2<f32> = vec2<f32>(x_813.x, x_813.z);
  let x_816 : f32 = u_xlat0.z;
  txVec13 = vec3<f32>(x_814.x, x_814.y, x_816);
  let x_823 : vec3<f32> = txVec13;
  let x_825 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_823.xy, x_823.z);
  u_xlat8.x = x_825;
  let x_828 : vec4<f32> = u_xlat5;
  let x_829 : vec2<f32> = vec2<f32>(x_828.x, x_828.y);
  let x_831 : f32 = u_xlat0.z;
  txVec14 = vec3<f32>(x_829.x, x_829.y, x_831);
  let x_838 : vec3<f32> = txVec14;
  let x_840 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_838.xy, x_838.z);
  u_xlat24 = x_840;
  let x_842 : vec4<f32> = u_xlat5;
  let x_843 : vec2<f32> = vec2<f32>(x_842.z, x_842.w);
  let x_845 : f32 = u_xlat0.z;
  txVec15 = vec3<f32>(x_843.x, x_843.y, x_845);
  let x_853 : vec3<f32> = txVec15;
  let x_855 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_853.xy, x_853.z);
  u_xlat16 = x_855;
  let x_857 : f32 = u_xlat4.x;
  let x_858 : f32 = u_xlat24;
  let x_861 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_857 * x_858) + x_861);
  let x_865 : f32 = u_xlat4.y;
  let x_866 : f32 = u_xlat16;
  let x_869 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_865 * x_866) + x_869);
  let x_873 : f32 = u_xlat4.z;
  let x_875 : f32 = u_xlat8.x;
  let x_878 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_873 * x_875) + x_878);
  let x_882 : f32 = u_xlat4.w;
  let x_884 : f32 = u_xlat1.x;
  let x_887 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_882 * x_884) + x_887);
  let x_892 : f32 = x_61.x_LightShadowData.x;
  u_xlat8.x = (-(x_892) + 1.0f);
  let x_898 : vec4<f32> = u_xlat0;
  let x_900 : vec3<f32> = u_xlat8;
  let x_904 : vec4<f32> = x_61.x_LightShadowData;
  SV_Target0 = ((vec4<f32>(x_898.x, x_898.x, x_898.x, x_898.x) * vec4<f32>(x_900.x, x_900.x, x_900.x, x_900.x)) + vec4<f32>(x_904.x, x_904.x, x_904.x, x_904.x));
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

