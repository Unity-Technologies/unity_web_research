type Arr = array<u32, 1u>;

struct x_HistogramBuffer_type {
  value : Arr,
}

type RTArr = array<x_HistogramBuffer_type>;

struct x_HistogramBuffer {
  x_HistogramBuffer_buf : RTArr,
}

struct S {
  value : Arr,
}

struct Params {
  x_Params1 : vec4<f32>,
  x_Params2 : vec4<f32>,
  x_ScaleOffsetRes : vec4<f32>,
}

var<private> u_xlatu0 : u32;

var<private> gl_LocalInvocationID : vec3<u32>;

var<private> u_xlatu68 : u32;

@group(0) @binding(1) var<storage, read> x_28 : x_HistogramBuffer;

var<workgroup> TGSM0 : array<S, 128u>;

var<private> u_xlatb1 : vec4<bool>;

var<private> u_xlati136 : i32;

var<private> u_xlatu136 : u32;

var<private> u_xlatb68 : vec3<bool>;

var<private> u_xlati1 : i32;

var<private> u_xlatu1 : u32;

var<private> u_xlat0 : vec2<f32>;

var<private> u_xlat68 : vec2<f32>;

var<private> u_xlat136 : f32;

var<private> u_xlatu204 : u32;

var<private> u_xlat204 : f32;

var<private> u_xlat1 : vec2<f32>;

var<private> u_xlat69 : vec2<f32>;

var<private> u_xlatu137 : u32;

var<private> u_xlat137 : f32;

var<private> u_xlat205 : f32;

var<private> u_xlatu2 : u32;

var<private> u_xlat2 : vec3<f32>;

var<private> u_xlatu138 : u32;

var<private> u_xlat70 : vec3<f32>;

var<private> u_xlatu3 : u32;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlatu139 : u32;

var<private> u_xlat71 : vec3<f32>;

var<private> u_xlatu4 : u32;

var<private> u_xlat4 : vec3<f32>;

var<private> u_xlatu140 : u32;

var<private> u_xlat72 : vec3<f32>;

var<private> u_xlatu5 : u32;

var<private> u_xlat5 : vec3<f32>;

var<private> u_xlatu141 : u32;

var<private> u_xlat73 : vec3<f32>;

var<private> u_xlatu6 : u32;

var<private> u_xlat6 : vec3<f32>;

var<private> u_xlatu142 : u32;

var<private> u_xlat74 : vec3<f32>;

var<private> u_xlatu7 : u32;

var<private> u_xlat7 : vec3<f32>;

var<private> u_xlatu143 : u32;

var<private> u_xlat75 : vec3<f32>;

var<private> u_xlatu8 : u32;

var<private> u_xlat8 : vec3<f32>;

var<private> u_xlatu144 : u32;

var<private> u_xlat76 : vec3<f32>;

var<private> u_xlatu9 : u32;

var<private> u_xlat9 : vec3<f32>;

var<private> u_xlatu145 : u32;

var<private> u_xlat77 : vec3<f32>;

var<private> u_xlatu10 : u32;

var<private> u_xlat10 : vec3<f32>;

var<private> u_xlatu146 : u32;

var<private> u_xlat78 : vec3<f32>;

var<private> u_xlatu11 : u32;

var<private> u_xlat11 : vec3<f32>;

var<private> u_xlatu147 : u32;

var<private> u_xlat79 : vec3<f32>;

var<private> u_xlatu12 : u32;

var<private> u_xlat12 : vec3<f32>;

var<private> u_xlatu148 : u32;

var<private> u_xlat80 : vec3<f32>;

var<private> u_xlatu13 : u32;

var<private> u_xlat13 : vec3<f32>;

var<private> u_xlatu149 : u32;

var<private> u_xlat81 : vec3<f32>;

var<private> u_xlatu14 : u32;

var<private> u_xlat14 : vec3<f32>;

var<private> u_xlatu150 : u32;

var<private> u_xlat82 : vec3<f32>;

var<private> u_xlatu15 : u32;

var<private> u_xlat15 : vec3<f32>;

var<private> u_xlatu151 : u32;

var<private> u_xlat83 : vec3<f32>;

var<private> u_xlatu16 : u32;

var<private> u_xlat16 : vec3<f32>;

var<private> u_xlatu152 : u32;

var<private> u_xlat84 : vec3<f32>;

var<private> u_xlatu17 : u32;

var<private> u_xlat17 : vec3<f32>;

var<private> u_xlatu153 : u32;

var<private> u_xlat85 : vec3<f32>;

var<private> u_xlatu18 : u32;

var<private> u_xlat18 : vec3<f32>;

var<private> u_xlatu154 : u32;

var<private> u_xlat86 : vec3<f32>;

var<private> u_xlatu19 : u32;

var<private> u_xlat19 : vec3<f32>;

var<private> u_xlatu155 : u32;

var<private> u_xlat87 : vec3<f32>;

var<private> u_xlatu20 : u32;

var<private> u_xlat20 : vec3<f32>;

var<private> u_xlatu156 : u32;

var<private> u_xlat88 : vec3<f32>;

var<private> u_xlatu21 : u32;

var<private> u_xlat21 : vec3<f32>;

var<private> u_xlatu157 : u32;

var<private> u_xlat89 : vec3<f32>;

var<private> u_xlatu22 : u32;

var<private> u_xlat22 : vec3<f32>;

var<private> u_xlatu158 : u32;

var<private> u_xlat90 : vec3<f32>;

var<private> u_xlatu23 : u32;

var<private> u_xlat23 : vec3<f32>;

var<private> u_xlatu159 : u32;

var<private> u_xlat91 : vec3<f32>;

var<private> u_xlatu24 : u32;

var<private> u_xlat24 : vec3<f32>;

var<private> u_xlatu160 : u32;

var<private> u_xlat92 : vec3<f32>;

var<private> u_xlatu25 : u32;

var<private> u_xlat25 : vec3<f32>;

var<private> u_xlatu161 : u32;

var<private> u_xlat93 : vec3<f32>;

var<private> u_xlatu26 : u32;

var<private> u_xlat26 : vec3<f32>;

var<private> u_xlatu162 : u32;

var<private> u_xlat94 : vec3<f32>;

var<private> u_xlatu27 : u32;

var<private> u_xlat27 : vec3<f32>;

var<private> u_xlatu163 : u32;

var<private> u_xlat95 : vec3<f32>;

var<private> u_xlatu28 : u32;

var<private> u_xlat28 : vec3<f32>;

var<private> u_xlatu164 : u32;

var<private> u_xlat96 : vec3<f32>;

var<private> u_xlatu29 : u32;

var<private> u_xlat29 : vec3<f32>;

var<private> u_xlatu165 : u32;

var<private> u_xlat97 : vec3<f32>;

var<private> u_xlatu30 : u32;

var<private> u_xlat30 : vec3<f32>;

var<private> u_xlatu166 : u32;

var<private> u_xlat98 : vec3<f32>;

var<private> u_xlatu31 : u32;

var<private> u_xlat31 : vec3<f32>;

var<private> u_xlatu167 : u32;

var<private> u_xlat99 : vec3<f32>;

var<private> u_xlatu32 : u32;

var<private> u_xlat32 : vec3<f32>;

var<private> u_xlatu168 : u32;

var<private> u_xlat100 : vec3<f32>;

var<private> u_xlatu33 : u32;

var<private> u_xlat33 : vec3<f32>;

var<private> u_xlatu169 : u32;

var<private> u_xlat101 : vec3<f32>;

var<private> u_xlatu34 : u32;

var<private> u_xlat34 : vec3<f32>;

var<private> u_xlatu170 : u32;

var<private> u_xlat102 : vec3<f32>;

var<private> u_xlatu35 : u32;

var<private> u_xlat35 : vec3<f32>;

var<private> u_xlatu171 : u32;

var<private> u_xlat103 : vec3<f32>;

var<private> u_xlatu36 : u32;

var<private> u_xlat36 : vec3<f32>;

var<private> u_xlatu172 : u32;

var<private> u_xlat104 : vec3<f32>;

var<private> u_xlatu37 : u32;

var<private> u_xlat37 : vec3<f32>;

var<private> u_xlatu173 : u32;

var<private> u_xlat105 : vec3<f32>;

var<private> u_xlatu38 : u32;

var<private> u_xlat38 : vec3<f32>;

var<private> u_xlatu174 : u32;

var<private> u_xlat106 : vec3<f32>;

var<private> u_xlatu39 : u32;

var<private> u_xlat39 : vec3<f32>;

var<private> u_xlatu175 : u32;

var<private> u_xlat107 : vec3<f32>;

var<private> u_xlatu40 : u32;

var<private> u_xlat40 : vec3<f32>;

var<private> u_xlatu176 : u32;

var<private> u_xlat108 : vec3<f32>;

var<private> u_xlatu41 : u32;

var<private> u_xlat41 : vec3<f32>;

var<private> u_xlatu177 : u32;

var<private> u_xlat109 : vec3<f32>;

var<private> u_xlatu42 : u32;

var<private> u_xlat42 : vec3<f32>;

var<private> u_xlatu178 : u32;

var<private> u_xlat110 : vec3<f32>;

var<private> u_xlatu43 : u32;

var<private> u_xlat43 : vec3<f32>;

var<private> u_xlatu179 : u32;

var<private> u_xlat111 : vec3<f32>;

var<private> u_xlatu44 : u32;

var<private> u_xlat44 : vec3<f32>;

var<private> u_xlatu180 : u32;

var<private> u_xlat112 : vec3<f32>;

var<private> u_xlatu45 : u32;

var<private> u_xlat45 : vec3<f32>;

var<private> u_xlatu181 : u32;

var<private> u_xlat113 : vec3<f32>;

var<private> u_xlatu46 : u32;

var<private> u_xlat46 : vec3<f32>;

var<private> u_xlatu182 : u32;

var<private> u_xlat114 : vec3<f32>;

var<private> u_xlatu47 : u32;

var<private> u_xlat47 : vec3<f32>;

var<private> u_xlatu183 : u32;

var<private> u_xlat115 : vec3<f32>;

var<private> u_xlatu48 : u32;

var<private> u_xlat48 : vec3<f32>;

var<private> u_xlatu184 : u32;

var<private> u_xlat116 : vec3<f32>;

var<private> u_xlatu49 : u32;

var<private> u_xlat49 : vec3<f32>;

var<private> u_xlatu185 : u32;

var<private> u_xlat117 : vec3<f32>;

var<private> u_xlatu50 : u32;

var<private> u_xlat50 : vec3<f32>;

var<private> u_xlatu186 : u32;

var<private> u_xlat118 : vec3<f32>;

var<private> u_xlatu51 : u32;

var<private> u_xlat51 : vec3<f32>;

var<private> u_xlatu187 : u32;

var<private> u_xlat119 : vec3<f32>;

var<private> u_xlatu52 : u32;

var<private> u_xlat52 : vec3<f32>;

var<private> u_xlatu188 : u32;

var<private> u_xlat120 : vec3<f32>;

var<private> u_xlatu53 : u32;

var<private> u_xlat53 : vec3<f32>;

var<private> u_xlatu189 : u32;

var<private> u_xlat121 : vec3<f32>;

var<private> u_xlatu54 : u32;

var<private> u_xlat54 : vec3<f32>;

var<private> u_xlatu190 : u32;

var<private> u_xlat122 : vec3<f32>;

var<private> u_xlatu55 : u32;

var<private> u_xlat55 : vec3<f32>;

var<private> u_xlatu191 : u32;

var<private> u_xlat123 : vec3<f32>;

var<private> u_xlatu56 : u32;

var<private> u_xlat56 : vec3<f32>;

var<private> u_xlatu192 : u32;

var<private> u_xlat124 : vec3<f32>;

var<private> u_xlatu57 : u32;

var<private> u_xlat57 : vec3<f32>;

var<private> u_xlatu193 : u32;

var<private> u_xlat125 : vec3<f32>;

var<private> u_xlatu58 : u32;

var<private> u_xlat58 : vec3<f32>;

var<private> u_xlatu194 : u32;

var<private> u_xlat126 : vec3<f32>;

var<private> u_xlatu59 : u32;

var<private> u_xlat59 : vec3<f32>;

var<private> u_xlatu195 : u32;

var<private> u_xlat127 : vec3<f32>;

var<private> u_xlatu60 : u32;

var<private> u_xlat60 : vec3<f32>;

var<private> u_xlatu196 : u32;

var<private> u_xlat128 : vec3<f32>;

var<private> u_xlatu61 : u32;

var<private> u_xlat61 : vec3<f32>;

var<private> u_xlatu197 : u32;

var<private> u_xlat129 : vec3<f32>;

var<private> u_xlatu62 : u32;

var<private> u_xlat62 : vec3<f32>;

var<private> u_xlatu198 : u32;

var<private> u_xlat130 : vec3<f32>;

var<private> u_xlatu63 : u32;

var<private> u_xlat63 : vec3<f32>;

var<private> u_xlatu199 : u32;

var<private> u_xlat131 : vec3<f32>;

var<private> u_xlatu64 : u32;

var<private> u_xlat64 : f32;

var<private> u_xlat132 : f32;

var<private> u_xlat200 : f32;

@group(0) @binding(0) var<uniform> x_2845 : Params;

var<private> u_xlat65 : vec4<f32>;

var<private> u_xlat66 : vec2<f32>;

var<private> u_xlat67 : vec4<f32>;

@group(0) @binding(2) var x_Destination_origX0X : texture_storage_2d<r32float, write>;

fn main_1() {
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_15 : u32 = gl_LocalInvocationID.y;
  let x_20 : u32 = gl_LocalInvocationID.x;
  u_xlatu0 = ((x_15 * 16u) + x_20);
  let x_31 : u32 = u_xlatu0;
  let x_34 : u32 = x_28.x_HistogramBuffer_buf[x_31].value[0i];
  u_xlatu68 = x_34;
  let x_40 : u32 = u_xlatu0;
  let x_41 : u32 = u_xlatu68;
  TGSM0[x_40].value[0i] = x_41;
  workgroupBarrier();
  let x_50 : u32 = u_xlatu0;
  u_xlatb1 = (vec4<u32>(x_50, x_50, x_50, x_50) < vec4<u32>(64u, 32u, 16u, 8u));
  let x_60 : bool = u_xlatb1.x;
  if (x_60) {
    let x_65 : u32 = u_xlatu0;
    u_xlati136 = (bitcast<i32>(x_65) + 64i);
    let x_70 : i32 = u_xlati136;
    let x_72 : u32 = TGSM0[x_70].value[0i];
    u_xlatu136 = x_72;
    let x_73 : u32 = u_xlatu136;
    let x_74 : u32 = u_xlatu68;
    u_xlatu68 = max(x_73, x_74);
    let x_76 : u32 = u_xlatu0;
    let x_77 : u32 = u_xlatu68;
    TGSM0[x_76].value[0i] = x_77;
  }
  workgroupBarrier();
  let x_80 : bool = u_xlatb1.y;
  if (x_80) {
    let x_83 : u32 = u_xlatu0;
    let x_85 : u32 = TGSM0[x_83].value[0i];
    u_xlatu68 = x_85;
    let x_86 : u32 = u_xlatu0;
    u_xlati136 = (bitcast<i32>(x_86) + 32i);
    let x_90 : i32 = u_xlati136;
    let x_92 : u32 = TGSM0[x_90].value[0i];
    u_xlatu136 = x_92;
    let x_93 : u32 = u_xlatu136;
    let x_94 : u32 = u_xlatu68;
    u_xlatu68 = max(x_93, x_94);
    let x_96 : u32 = u_xlatu0;
    let x_97 : u32 = u_xlatu68;
    TGSM0[x_96].value[0i] = x_97;
  }
  workgroupBarrier();
  let x_100 : bool = u_xlatb1.z;
  if (x_100) {
    let x_103 : u32 = u_xlatu0;
    let x_105 : u32 = TGSM0[x_103].value[0i];
    u_xlatu68 = x_105;
    let x_106 : u32 = u_xlatu0;
    u_xlati136 = (bitcast<i32>(x_106) + 16i);
    let x_110 : i32 = u_xlati136;
    let x_112 : u32 = TGSM0[x_110].value[0i];
    u_xlatu136 = x_112;
    let x_113 : u32 = u_xlatu136;
    let x_114 : u32 = u_xlatu68;
    u_xlatu68 = max(x_113, x_114);
    let x_116 : u32 = u_xlatu0;
    let x_117 : u32 = u_xlatu68;
    TGSM0[x_116].value[0i] = x_117;
  }
  workgroupBarrier();
  let x_121 : bool = u_xlatb1.w;
  if (x_121) {
    let x_124 : u32 = u_xlatu0;
    let x_126 : u32 = TGSM0[x_124].value[0i];
    u_xlatu68 = x_126;
    let x_127 : u32 = u_xlatu0;
    u_xlati136 = (bitcast<i32>(x_127) + 8i);
    let x_131 : i32 = u_xlati136;
    let x_133 : u32 = TGSM0[x_131].value[0i];
    u_xlatu136 = x_133;
    let x_134 : u32 = u_xlatu136;
    let x_135 : u32 = u_xlatu68;
    u_xlatu68 = max(x_134, x_135);
    let x_137 : u32 = u_xlatu0;
    let x_138 : u32 = u_xlatu68;
    TGSM0[x_137].value[0i] = x_138;
  }
  workgroupBarrier();
  let x_143 : u32 = u_xlatu0;
  let x_147 : vec4<bool> = (vec4<u32>(x_143, x_143, x_143, x_143) < vec4<u32>(4u, 2u, 1u, 1u));
  u_xlatb68 = vec3<bool>(x_147.x, x_147.y, x_147.z);
  let x_150 : bool = u_xlatb68.x;
  if (x_150) {
    let x_153 : u32 = u_xlatu0;
    let x_155 : u32 = TGSM0[x_153].value[0i];
    u_xlatu68 = x_155;
    let x_157 : u32 = u_xlatu0;
    u_xlati1 = (bitcast<i32>(x_157) + 4i);
    let x_162 : i32 = u_xlati1;
    let x_164 : u32 = TGSM0[x_162].value[0i];
    u_xlatu1 = x_164;
    let x_165 : u32 = u_xlatu68;
    let x_166 : u32 = u_xlatu1;
    u_xlatu68 = max(x_165, x_166);
    let x_168 : u32 = u_xlatu0;
    let x_169 : u32 = u_xlatu68;
    TGSM0[x_168].value[0i] = x_169;
  }
  workgroupBarrier();
  let x_172 : bool = u_xlatb68.y;
  if (x_172) {
    let x_175 : u32 = u_xlatu0;
    let x_177 : u32 = TGSM0[x_175].value[0i];
    u_xlatu68 = x_177;
    let x_178 : u32 = u_xlatu0;
    u_xlati136 = (bitcast<i32>(x_178) + 2i);
    let x_182 : i32 = u_xlati136;
    let x_184 : u32 = TGSM0[x_182].value[0i];
    u_xlatu136 = x_184;
    let x_185 : u32 = u_xlatu136;
    let x_186 : u32 = u_xlatu68;
    u_xlatu68 = max(x_185, x_186);
    let x_188 : u32 = u_xlatu0;
    let x_189 : u32 = u_xlatu68;
    TGSM0[x_188].value[0i] = x_189;
  }
  workgroupBarrier();
  let x_192 : bool = u_xlatb68.z;
  if (x_192) {
    let x_195 : u32 = u_xlatu0;
    let x_197 : u32 = TGSM0[x_195].value[0i];
    u_xlatu68 = x_197;
    let x_200 : u32 = TGSM0[1i].value[0i];
    u_xlatu136 = x_200;
    let x_201 : u32 = u_xlatu136;
    let x_202 : u32 = u_xlatu68;
    u_xlatu68 = max(x_201, x_202);
    let x_204 : u32 = u_xlatu0;
    let x_205 : u32 = u_xlatu68;
    TGSM0[x_204].value[0i] = x_205;
  }
  workgroupBarrier();
  let x_207 : u32 = u_xlatu0;
  if ((x_207 == 0u)) {
    let x_212 : u32 = TGSM0[0i].value[0i];
    u_xlatu0 = x_212;
    let x_217 : u32 = u_xlatu0;
    u_xlat0.x = f32(x_217);
    let x_223 : f32 = u_xlat0.x;
    u_xlat0.x = (1.0f / x_223);
    let x_227 : u32 = x_28.x_HistogramBuffer_buf[0i].value[0i];
    u_xlatu68 = x_227;
    let x_229 : u32 = u_xlatu68;
    u_xlat68.x = f32(x_229);
    let x_234 : f32 = u_xlat0.x;
    let x_236 : f32 = u_xlat68.x;
    u_xlat136 = (x_234 * x_236);
    let x_240 : u32 = x_28.x_HistogramBuffer_buf[1i].value[0i];
    u_xlatu204 = x_240;
    let x_242 : u32 = u_xlatu204;
    u_xlat204 = f32(x_242);
    let x_246 : f32 = u_xlat0.x;
    let x_247 : f32 = u_xlat204;
    u_xlat1.x = (x_246 * x_247);
    let x_252 : f32 = u_xlat68.x;
    let x_254 : f32 = u_xlat0.x;
    let x_257 : f32 = u_xlat1.x;
    u_xlat69.x = ((x_252 * x_254) + x_257);
    let x_262 : u32 = x_28.x_HistogramBuffer_buf[2i].value[0i];
    u_xlatu137 = x_262;
    let x_264 : u32 = u_xlatu137;
    u_xlat137 = f32(x_264);
    let x_268 : f32 = u_xlat0.x;
    let x_269 : f32 = u_xlat137;
    u_xlat205 = (x_268 * x_269);
    let x_271 : f32 = u_xlat137;
    let x_273 : f32 = u_xlat0.x;
    let x_276 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_271 * x_273) + x_276);
    let x_282 : u32 = x_28.x_HistogramBuffer_buf[3i].value[0i];
    u_xlatu2 = x_282;
    let x_286 : u32 = u_xlatu2;
    u_xlat2.x = f32(x_286);
    let x_290 : f32 = u_xlat2.x;
    let x_292 : f32 = u_xlat0.x;
    let x_295 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_290 * x_292) + x_295);
    let x_300 : u32 = x_28.x_HistogramBuffer_buf[4i].value[0i];
    u_xlatu138 = x_300;
    let x_301 : u32 = u_xlatu138;
    u_xlat2.z = f32(x_301);
    let x_305 : vec2<f32> = u_xlat0;
    let x_307 : vec3<f32> = u_xlat2;
    let x_309 : vec2<f32> = (vec2<f32>(x_305.x, x_305.x) * vec2<f32>(x_307.x, x_307.z));
    let x_310 : vec3<f32> = u_xlat70;
    u_xlat70 = vec3<f32>(x_309.x, x_310.y, x_309.y);
    let x_313 : f32 = u_xlat2.z;
    let x_315 : f32 = u_xlat0.x;
    let x_318 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_313 * x_315) + x_318);
    let x_324 : u32 = x_28.x_HistogramBuffer_buf[5i].value[0i];
    u_xlatu3 = x_324;
    let x_328 : u32 = u_xlatu3;
    u_xlat3.x = f32(x_328);
    let x_332 : f32 = u_xlat3.x;
    let x_334 : f32 = u_xlat0.x;
    let x_337 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_332 * x_334) + x_337);
    let x_343 : u32 = x_28.x_HistogramBuffer_buf[6i].value[0i];
    u_xlatu139 = x_343;
    let x_344 : u32 = u_xlatu139;
    u_xlat3.z = f32(x_344);
    let x_348 : vec2<f32> = u_xlat0;
    let x_350 : vec4<f32> = u_xlat3;
    let x_352 : vec2<f32> = (vec2<f32>(x_348.x, x_348.x) * vec2<f32>(x_350.x, x_350.z));
    let x_353 : vec3<f32> = u_xlat71;
    u_xlat71 = vec3<f32>(x_352.x, x_353.y, x_352.y);
    let x_356 : f32 = u_xlat3.z;
    let x_358 : f32 = u_xlat0.x;
    let x_361 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_356 * x_358) + x_361);
    let x_367 : u32 = x_28.x_HistogramBuffer_buf[7i].value[0i];
    u_xlatu4 = x_367;
    let x_369 : u32 = u_xlatu4;
    u_xlat4.x = f32(x_369);
    let x_373 : f32 = u_xlat4.x;
    let x_375 : f32 = u_xlat0.x;
    let x_378 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_373 * x_375) + x_378);
    let x_383 : u32 = x_28.x_HistogramBuffer_buf[8i].value[0i];
    u_xlatu140 = x_383;
    let x_384 : u32 = u_xlatu140;
    u_xlat4.z = f32(x_384);
    let x_388 : vec2<f32> = u_xlat0;
    let x_390 : vec3<f32> = u_xlat4;
    let x_392 : vec2<f32> = (vec2<f32>(x_388.x, x_388.x) * vec2<f32>(x_390.x, x_390.z));
    let x_393 : vec3<f32> = u_xlat72;
    u_xlat72 = vec3<f32>(x_392.x, x_393.y, x_392.y);
    let x_396 : f32 = u_xlat4.z;
    let x_398 : f32 = u_xlat0.x;
    let x_401 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_396 * x_398) + x_401);
    let x_407 : u32 = x_28.x_HistogramBuffer_buf[9i].value[0i];
    u_xlatu5 = x_407;
    let x_409 : u32 = u_xlatu5;
    u_xlat5.x = f32(x_409);
    let x_413 : f32 = u_xlat5.x;
    let x_415 : f32 = u_xlat0.x;
    let x_418 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_413 * x_415) + x_418);
    let x_424 : u32 = x_28.x_HistogramBuffer_buf[10i].value[0i];
    u_xlatu141 = x_424;
    let x_425 : u32 = u_xlatu141;
    u_xlat5.z = f32(x_425);
    let x_429 : vec2<f32> = u_xlat0;
    let x_431 : vec3<f32> = u_xlat5;
    let x_433 : vec2<f32> = (vec2<f32>(x_429.x, x_429.x) * vec2<f32>(x_431.x, x_431.z));
    let x_434 : vec3<f32> = u_xlat73;
    u_xlat73 = vec3<f32>(x_433.x, x_434.y, x_433.y);
    let x_437 : f32 = u_xlat5.z;
    let x_439 : f32 = u_xlat0.x;
    let x_442 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_437 * x_439) + x_442);
    let x_448 : u32 = x_28.x_HistogramBuffer_buf[11i].value[0i];
    u_xlatu6 = x_448;
    let x_450 : u32 = u_xlatu6;
    u_xlat6.x = f32(x_450);
    let x_454 : f32 = u_xlat6.x;
    let x_456 : f32 = u_xlat0.x;
    let x_459 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_454 * x_456) + x_459);
    let x_465 : u32 = x_28.x_HistogramBuffer_buf[12i].value[0i];
    u_xlatu142 = x_465;
    let x_466 : u32 = u_xlatu142;
    u_xlat6.z = f32(x_466);
    let x_470 : vec2<f32> = u_xlat0;
    let x_472 : vec3<f32> = u_xlat6;
    let x_474 : vec2<f32> = (vec2<f32>(x_470.x, x_470.x) * vec2<f32>(x_472.x, x_472.z));
    let x_475 : vec3<f32> = u_xlat74;
    u_xlat74 = vec3<f32>(x_474.x, x_475.y, x_474.y);
    let x_478 : f32 = u_xlat6.z;
    let x_480 : f32 = u_xlat0.x;
    let x_483 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_478 * x_480) + x_483);
    let x_489 : u32 = x_28.x_HistogramBuffer_buf[13i].value[0i];
    u_xlatu7 = x_489;
    let x_491 : u32 = u_xlatu7;
    u_xlat7.x = f32(x_491);
    let x_495 : f32 = u_xlat7.x;
    let x_497 : f32 = u_xlat0.x;
    let x_500 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_495 * x_497) + x_500);
    let x_506 : u32 = x_28.x_HistogramBuffer_buf[14i].value[0i];
    u_xlatu143 = x_506;
    let x_507 : u32 = u_xlatu143;
    u_xlat7.z = f32(x_507);
    let x_511 : vec2<f32> = u_xlat0;
    let x_513 : vec3<f32> = u_xlat7;
    let x_515 : vec2<f32> = (vec2<f32>(x_511.x, x_511.x) * vec2<f32>(x_513.x, x_513.z));
    let x_516 : vec3<f32> = u_xlat75;
    u_xlat75 = vec3<f32>(x_515.x, x_516.y, x_515.y);
    let x_519 : f32 = u_xlat7.z;
    let x_521 : f32 = u_xlat0.x;
    let x_524 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_519 * x_521) + x_524);
    let x_530 : u32 = x_28.x_HistogramBuffer_buf[15i].value[0i];
    u_xlatu8 = x_530;
    let x_532 : u32 = u_xlatu8;
    u_xlat8.x = f32(x_532);
    let x_536 : f32 = u_xlat8.x;
    let x_538 : f32 = u_xlat0.x;
    let x_541 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_536 * x_538) + x_541);
    let x_546 : u32 = x_28.x_HistogramBuffer_buf[16i].value[0i];
    u_xlatu144 = x_546;
    let x_547 : u32 = u_xlatu144;
    u_xlat8.z = f32(x_547);
    let x_551 : vec2<f32> = u_xlat0;
    let x_553 : vec3<f32> = u_xlat8;
    let x_555 : vec2<f32> = (vec2<f32>(x_551.x, x_551.x) * vec2<f32>(x_553.x, x_553.z));
    let x_556 : vec3<f32> = u_xlat76;
    u_xlat76 = vec3<f32>(x_555.x, x_556.y, x_555.y);
    let x_559 : f32 = u_xlat8.z;
    let x_561 : f32 = u_xlat0.x;
    let x_564 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_559 * x_561) + x_564);
    let x_570 : u32 = x_28.x_HistogramBuffer_buf[17i].value[0i];
    u_xlatu9 = x_570;
    let x_572 : u32 = u_xlatu9;
    u_xlat9.x = f32(x_572);
    let x_576 : f32 = u_xlat9.x;
    let x_578 : f32 = u_xlat0.x;
    let x_581 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_576 * x_578) + x_581);
    let x_587 : u32 = x_28.x_HistogramBuffer_buf[18i].value[0i];
    u_xlatu145 = x_587;
    let x_588 : u32 = u_xlatu145;
    u_xlat9.z = f32(x_588);
    let x_592 : vec2<f32> = u_xlat0;
    let x_594 : vec3<f32> = u_xlat9;
    let x_596 : vec2<f32> = (vec2<f32>(x_592.x, x_592.x) * vec2<f32>(x_594.x, x_594.z));
    let x_597 : vec3<f32> = u_xlat77;
    u_xlat77 = vec3<f32>(x_596.x, x_597.y, x_596.y);
    let x_600 : f32 = u_xlat9.z;
    let x_602 : f32 = u_xlat0.x;
    let x_605 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_600 * x_602) + x_605);
    let x_611 : u32 = x_28.x_HistogramBuffer_buf[19i].value[0i];
    u_xlatu10 = x_611;
    let x_613 : u32 = u_xlatu10;
    u_xlat10.x = f32(x_613);
    let x_617 : f32 = u_xlat10.x;
    let x_619 : f32 = u_xlat0.x;
    let x_622 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_617 * x_619) + x_622);
    let x_628 : u32 = x_28.x_HistogramBuffer_buf[20i].value[0i];
    u_xlatu146 = x_628;
    let x_629 : u32 = u_xlatu146;
    u_xlat10.z = f32(x_629);
    let x_633 : vec2<f32> = u_xlat0;
    let x_635 : vec3<f32> = u_xlat10;
    let x_637 : vec2<f32> = (vec2<f32>(x_633.x, x_633.x) * vec2<f32>(x_635.x, x_635.z));
    let x_638 : vec3<f32> = u_xlat78;
    u_xlat78 = vec3<f32>(x_637.x, x_638.y, x_637.y);
    let x_641 : f32 = u_xlat10.z;
    let x_643 : f32 = u_xlat0.x;
    let x_646 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_641 * x_643) + x_646);
    let x_652 : u32 = x_28.x_HistogramBuffer_buf[21i].value[0i];
    u_xlatu11 = x_652;
    let x_654 : u32 = u_xlatu11;
    u_xlat11.x = f32(x_654);
    let x_658 : f32 = u_xlat11.x;
    let x_660 : f32 = u_xlat0.x;
    let x_663 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_658 * x_660) + x_663);
    let x_669 : u32 = x_28.x_HistogramBuffer_buf[22i].value[0i];
    u_xlatu147 = x_669;
    let x_670 : u32 = u_xlatu147;
    u_xlat11.z = f32(x_670);
    let x_674 : vec2<f32> = u_xlat0;
    let x_676 : vec3<f32> = u_xlat11;
    let x_678 : vec2<f32> = (vec2<f32>(x_674.x, x_674.x) * vec2<f32>(x_676.x, x_676.z));
    let x_679 : vec3<f32> = u_xlat79;
    u_xlat79 = vec3<f32>(x_678.x, x_679.y, x_678.y);
    let x_682 : f32 = u_xlat11.z;
    let x_684 : f32 = u_xlat0.x;
    let x_687 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_682 * x_684) + x_687);
    let x_693 : u32 = x_28.x_HistogramBuffer_buf[23i].value[0i];
    u_xlatu12 = x_693;
    let x_695 : u32 = u_xlatu12;
    u_xlat12.x = f32(x_695);
    let x_699 : f32 = u_xlat12.x;
    let x_701 : f32 = u_xlat0.x;
    let x_704 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_699 * x_701) + x_704);
    let x_710 : u32 = x_28.x_HistogramBuffer_buf[24i].value[0i];
    u_xlatu148 = x_710;
    let x_711 : u32 = u_xlatu148;
    u_xlat12.z = f32(x_711);
    let x_715 : vec2<f32> = u_xlat0;
    let x_717 : vec3<f32> = u_xlat12;
    let x_719 : vec2<f32> = (vec2<f32>(x_715.x, x_715.x) * vec2<f32>(x_717.x, x_717.z));
    let x_720 : vec3<f32> = u_xlat80;
    u_xlat80 = vec3<f32>(x_719.x, x_720.y, x_719.y);
    let x_723 : f32 = u_xlat12.z;
    let x_725 : f32 = u_xlat0.x;
    let x_728 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_723 * x_725) + x_728);
    let x_734 : u32 = x_28.x_HistogramBuffer_buf[25i].value[0i];
    u_xlatu13 = x_734;
    let x_736 : u32 = u_xlatu13;
    u_xlat13.x = f32(x_736);
    let x_740 : f32 = u_xlat13.x;
    let x_742 : f32 = u_xlat0.x;
    let x_745 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_740 * x_742) + x_745);
    let x_751 : u32 = x_28.x_HistogramBuffer_buf[26i].value[0i];
    u_xlatu149 = x_751;
    let x_752 : u32 = u_xlatu149;
    u_xlat13.z = f32(x_752);
    let x_756 : vec2<f32> = u_xlat0;
    let x_758 : vec3<f32> = u_xlat13;
    let x_760 : vec2<f32> = (vec2<f32>(x_756.x, x_756.x) * vec2<f32>(x_758.x, x_758.z));
    let x_761 : vec3<f32> = u_xlat81;
    u_xlat81 = vec3<f32>(x_760.x, x_761.y, x_760.y);
    let x_764 : f32 = u_xlat13.z;
    let x_766 : f32 = u_xlat0.x;
    let x_769 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_764 * x_766) + x_769);
    let x_775 : u32 = x_28.x_HistogramBuffer_buf[27i].value[0i];
    u_xlatu14 = x_775;
    let x_777 : u32 = u_xlatu14;
    u_xlat14.x = f32(x_777);
    let x_781 : f32 = u_xlat14.x;
    let x_783 : f32 = u_xlat0.x;
    let x_786 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_781 * x_783) + x_786);
    let x_792 : u32 = x_28.x_HistogramBuffer_buf[28i].value[0i];
    u_xlatu150 = x_792;
    let x_793 : u32 = u_xlatu150;
    u_xlat14.z = f32(x_793);
    let x_797 : vec2<f32> = u_xlat0;
    let x_799 : vec3<f32> = u_xlat14;
    let x_801 : vec2<f32> = (vec2<f32>(x_797.x, x_797.x) * vec2<f32>(x_799.x, x_799.z));
    let x_802 : vec3<f32> = u_xlat82;
    u_xlat82 = vec3<f32>(x_801.x, x_802.y, x_801.y);
    let x_805 : f32 = u_xlat14.z;
    let x_807 : f32 = u_xlat0.x;
    let x_810 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_805 * x_807) + x_810);
    let x_816 : u32 = x_28.x_HistogramBuffer_buf[29i].value[0i];
    u_xlatu15 = x_816;
    let x_818 : u32 = u_xlatu15;
    u_xlat15.x = f32(x_818);
    let x_822 : f32 = u_xlat15.x;
    let x_824 : f32 = u_xlat0.x;
    let x_827 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_822 * x_824) + x_827);
    let x_833 : u32 = x_28.x_HistogramBuffer_buf[30i].value[0i];
    u_xlatu151 = x_833;
    let x_834 : u32 = u_xlatu151;
    u_xlat15.z = f32(x_834);
    let x_838 : vec2<f32> = u_xlat0;
    let x_840 : vec3<f32> = u_xlat15;
    let x_842 : vec2<f32> = (vec2<f32>(x_838.x, x_838.x) * vec2<f32>(x_840.x, x_840.z));
    let x_843 : vec3<f32> = u_xlat83;
    u_xlat83 = vec3<f32>(x_842.x, x_843.y, x_842.y);
    let x_846 : f32 = u_xlat15.z;
    let x_848 : f32 = u_xlat0.x;
    let x_851 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_846 * x_848) + x_851);
    let x_857 : u32 = x_28.x_HistogramBuffer_buf[31i].value[0i];
    u_xlatu16 = x_857;
    let x_859 : u32 = u_xlatu16;
    u_xlat16.x = f32(x_859);
    let x_863 : f32 = u_xlat16.x;
    let x_865 : f32 = u_xlat0.x;
    let x_868 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_863 * x_865) + x_868);
    let x_873 : u32 = x_28.x_HistogramBuffer_buf[32i].value[0i];
    u_xlatu152 = x_873;
    let x_874 : u32 = u_xlatu152;
    u_xlat16.z = f32(x_874);
    let x_878 : vec2<f32> = u_xlat0;
    let x_880 : vec3<f32> = u_xlat16;
    let x_882 : vec2<f32> = (vec2<f32>(x_878.x, x_878.x) * vec2<f32>(x_880.x, x_880.z));
    let x_883 : vec3<f32> = u_xlat84;
    u_xlat84 = vec3<f32>(x_882.x, x_883.y, x_882.y);
    let x_886 : f32 = u_xlat16.z;
    let x_888 : f32 = u_xlat0.x;
    let x_891 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_886 * x_888) + x_891);
    let x_897 : u32 = x_28.x_HistogramBuffer_buf[33i].value[0i];
    u_xlatu17 = x_897;
    let x_899 : u32 = u_xlatu17;
    u_xlat17.x = f32(x_899);
    let x_903 : f32 = u_xlat17.x;
    let x_905 : f32 = u_xlat0.x;
    let x_908 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_903 * x_905) + x_908);
    let x_914 : u32 = x_28.x_HistogramBuffer_buf[34i].value[0i];
    u_xlatu153 = x_914;
    let x_915 : u32 = u_xlatu153;
    u_xlat17.z = f32(x_915);
    let x_919 : vec2<f32> = u_xlat0;
    let x_921 : vec3<f32> = u_xlat17;
    let x_923 : vec2<f32> = (vec2<f32>(x_919.x, x_919.x) * vec2<f32>(x_921.x, x_921.z));
    let x_924 : vec3<f32> = u_xlat85;
    u_xlat85 = vec3<f32>(x_923.x, x_924.y, x_923.y);
    let x_927 : f32 = u_xlat17.z;
    let x_929 : f32 = u_xlat0.x;
    let x_932 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_927 * x_929) + x_932);
    let x_938 : u32 = x_28.x_HistogramBuffer_buf[35i].value[0i];
    u_xlatu18 = x_938;
    let x_940 : u32 = u_xlatu18;
    u_xlat18.x = f32(x_940);
    let x_944 : f32 = u_xlat18.x;
    let x_946 : f32 = u_xlat0.x;
    let x_949 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_944 * x_946) + x_949);
    let x_955 : u32 = x_28.x_HistogramBuffer_buf[36i].value[0i];
    u_xlatu154 = x_955;
    let x_956 : u32 = u_xlatu154;
    u_xlat18.z = f32(x_956);
    let x_960 : vec2<f32> = u_xlat0;
    let x_962 : vec3<f32> = u_xlat18;
    let x_964 : vec2<f32> = (vec2<f32>(x_960.x, x_960.x) * vec2<f32>(x_962.x, x_962.z));
    let x_965 : vec3<f32> = u_xlat86;
    u_xlat86 = vec3<f32>(x_964.x, x_965.y, x_964.y);
    let x_968 : f32 = u_xlat18.z;
    let x_970 : f32 = u_xlat0.x;
    let x_973 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_968 * x_970) + x_973);
    let x_979 : u32 = x_28.x_HistogramBuffer_buf[37i].value[0i];
    u_xlatu19 = x_979;
    let x_981 : u32 = u_xlatu19;
    u_xlat19.x = f32(x_981);
    let x_985 : f32 = u_xlat19.x;
    let x_987 : f32 = u_xlat0.x;
    let x_990 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_985 * x_987) + x_990);
    let x_996 : u32 = x_28.x_HistogramBuffer_buf[38i].value[0i];
    u_xlatu155 = x_996;
    let x_997 : u32 = u_xlatu155;
    u_xlat19.z = f32(x_997);
    let x_1001 : vec2<f32> = u_xlat0;
    let x_1003 : vec3<f32> = u_xlat19;
    let x_1005 : vec2<f32> = (vec2<f32>(x_1001.x, x_1001.x) * vec2<f32>(x_1003.x, x_1003.z));
    let x_1006 : vec3<f32> = u_xlat87;
    u_xlat87 = vec3<f32>(x_1005.x, x_1006.y, x_1005.y);
    let x_1009 : f32 = u_xlat19.z;
    let x_1011 : f32 = u_xlat0.x;
    let x_1014 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1009 * x_1011) + x_1014);
    let x_1020 : u32 = x_28.x_HistogramBuffer_buf[39i].value[0i];
    u_xlatu20 = x_1020;
    let x_1022 : u32 = u_xlatu20;
    u_xlat20.x = f32(x_1022);
    let x_1026 : f32 = u_xlat20.x;
    let x_1028 : f32 = u_xlat0.x;
    let x_1031 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1026 * x_1028) + x_1031);
    let x_1037 : u32 = x_28.x_HistogramBuffer_buf[40i].value[0i];
    u_xlatu156 = x_1037;
    let x_1038 : u32 = u_xlatu156;
    u_xlat20.z = f32(x_1038);
    let x_1042 : vec2<f32> = u_xlat0;
    let x_1044 : vec3<f32> = u_xlat20;
    let x_1046 : vec2<f32> = (vec2<f32>(x_1042.x, x_1042.x) * vec2<f32>(x_1044.x, x_1044.z));
    let x_1047 : vec3<f32> = u_xlat88;
    u_xlat88 = vec3<f32>(x_1046.x, x_1047.y, x_1046.y);
    let x_1050 : f32 = u_xlat20.z;
    let x_1052 : f32 = u_xlat0.x;
    let x_1055 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1050 * x_1052) + x_1055);
    let x_1061 : u32 = x_28.x_HistogramBuffer_buf[41i].value[0i];
    u_xlatu21 = x_1061;
    let x_1063 : u32 = u_xlatu21;
    u_xlat21.x = f32(x_1063);
    let x_1067 : f32 = u_xlat21.x;
    let x_1069 : f32 = u_xlat0.x;
    let x_1072 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1067 * x_1069) + x_1072);
    let x_1078 : u32 = x_28.x_HistogramBuffer_buf[42i].value[0i];
    u_xlatu157 = x_1078;
    let x_1079 : u32 = u_xlatu157;
    u_xlat21.z = f32(x_1079);
    let x_1083 : vec2<f32> = u_xlat0;
    let x_1085 : vec3<f32> = u_xlat21;
    let x_1087 : vec2<f32> = (vec2<f32>(x_1083.x, x_1083.x) * vec2<f32>(x_1085.x, x_1085.z));
    let x_1088 : vec3<f32> = u_xlat89;
    u_xlat89 = vec3<f32>(x_1087.x, x_1088.y, x_1087.y);
    let x_1091 : f32 = u_xlat21.z;
    let x_1093 : f32 = u_xlat0.x;
    let x_1096 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1091 * x_1093) + x_1096);
    let x_1102 : u32 = x_28.x_HistogramBuffer_buf[43i].value[0i];
    u_xlatu22 = x_1102;
    let x_1104 : u32 = u_xlatu22;
    u_xlat22.x = f32(x_1104);
    let x_1108 : f32 = u_xlat22.x;
    let x_1110 : f32 = u_xlat0.x;
    let x_1113 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1108 * x_1110) + x_1113);
    let x_1119 : u32 = x_28.x_HistogramBuffer_buf[44i].value[0i];
    u_xlatu158 = x_1119;
    let x_1120 : u32 = u_xlatu158;
    u_xlat22.z = f32(x_1120);
    let x_1124 : vec2<f32> = u_xlat0;
    let x_1126 : vec3<f32> = u_xlat22;
    let x_1128 : vec2<f32> = (vec2<f32>(x_1124.x, x_1124.x) * vec2<f32>(x_1126.x, x_1126.z));
    let x_1129 : vec3<f32> = u_xlat90;
    u_xlat90 = vec3<f32>(x_1128.x, x_1129.y, x_1128.y);
    let x_1132 : f32 = u_xlat22.z;
    let x_1134 : f32 = u_xlat0.x;
    let x_1137 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1132 * x_1134) + x_1137);
    let x_1143 : u32 = x_28.x_HistogramBuffer_buf[45i].value[0i];
    u_xlatu23 = x_1143;
    let x_1145 : u32 = u_xlatu23;
    u_xlat23.x = f32(x_1145);
    let x_1149 : f32 = u_xlat23.x;
    let x_1151 : f32 = u_xlat0.x;
    let x_1154 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1149 * x_1151) + x_1154);
    let x_1160 : u32 = x_28.x_HistogramBuffer_buf[46i].value[0i];
    u_xlatu159 = x_1160;
    let x_1161 : u32 = u_xlatu159;
    u_xlat23.z = f32(x_1161);
    let x_1165 : vec2<f32> = u_xlat0;
    let x_1167 : vec3<f32> = u_xlat23;
    let x_1169 : vec2<f32> = (vec2<f32>(x_1165.x, x_1165.x) * vec2<f32>(x_1167.x, x_1167.z));
    let x_1170 : vec3<f32> = u_xlat91;
    u_xlat91 = vec3<f32>(x_1169.x, x_1170.y, x_1169.y);
    let x_1173 : f32 = u_xlat23.z;
    let x_1175 : f32 = u_xlat0.x;
    let x_1178 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1173 * x_1175) + x_1178);
    let x_1184 : u32 = x_28.x_HistogramBuffer_buf[47i].value[0i];
    u_xlatu24 = x_1184;
    let x_1186 : u32 = u_xlatu24;
    u_xlat24.x = f32(x_1186);
    let x_1190 : f32 = u_xlat24.x;
    let x_1192 : f32 = u_xlat0.x;
    let x_1195 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1190 * x_1192) + x_1195);
    let x_1201 : u32 = x_28.x_HistogramBuffer_buf[48i].value[0i];
    u_xlatu160 = x_1201;
    let x_1202 : u32 = u_xlatu160;
    u_xlat24.z = f32(x_1202);
    let x_1206 : vec2<f32> = u_xlat0;
    let x_1208 : vec3<f32> = u_xlat24;
    let x_1210 : vec2<f32> = (vec2<f32>(x_1206.x, x_1206.x) * vec2<f32>(x_1208.x, x_1208.z));
    let x_1211 : vec3<f32> = u_xlat92;
    u_xlat92 = vec3<f32>(x_1210.x, x_1211.y, x_1210.y);
    let x_1214 : f32 = u_xlat24.z;
    let x_1216 : f32 = u_xlat0.x;
    let x_1219 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1214 * x_1216) + x_1219);
    let x_1225 : u32 = x_28.x_HistogramBuffer_buf[49i].value[0i];
    u_xlatu25 = x_1225;
    let x_1227 : u32 = u_xlatu25;
    u_xlat25.x = f32(x_1227);
    let x_1231 : f32 = u_xlat25.x;
    let x_1233 : f32 = u_xlat0.x;
    let x_1236 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1231 * x_1233) + x_1236);
    let x_1242 : u32 = x_28.x_HistogramBuffer_buf[50i].value[0i];
    u_xlatu161 = x_1242;
    let x_1243 : u32 = u_xlatu161;
    u_xlat25.z = f32(x_1243);
    let x_1247 : vec2<f32> = u_xlat0;
    let x_1249 : vec3<f32> = u_xlat25;
    let x_1251 : vec2<f32> = (vec2<f32>(x_1247.x, x_1247.x) * vec2<f32>(x_1249.x, x_1249.z));
    let x_1252 : vec3<f32> = u_xlat93;
    u_xlat93 = vec3<f32>(x_1251.x, x_1252.y, x_1251.y);
    let x_1255 : f32 = u_xlat25.z;
    let x_1257 : f32 = u_xlat0.x;
    let x_1260 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1255 * x_1257) + x_1260);
    let x_1266 : u32 = x_28.x_HistogramBuffer_buf[51i].value[0i];
    u_xlatu26 = x_1266;
    let x_1268 : u32 = u_xlatu26;
    u_xlat26.x = f32(x_1268);
    let x_1272 : f32 = u_xlat26.x;
    let x_1274 : f32 = u_xlat0.x;
    let x_1277 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1272 * x_1274) + x_1277);
    let x_1283 : u32 = x_28.x_HistogramBuffer_buf[52i].value[0i];
    u_xlatu162 = x_1283;
    let x_1284 : u32 = u_xlatu162;
    u_xlat26.z = f32(x_1284);
    let x_1288 : vec2<f32> = u_xlat0;
    let x_1290 : vec3<f32> = u_xlat26;
    let x_1292 : vec2<f32> = (vec2<f32>(x_1288.x, x_1288.x) * vec2<f32>(x_1290.x, x_1290.z));
    let x_1293 : vec3<f32> = u_xlat94;
    u_xlat94 = vec3<f32>(x_1292.x, x_1293.y, x_1292.y);
    let x_1296 : f32 = u_xlat26.z;
    let x_1298 : f32 = u_xlat0.x;
    let x_1301 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1296 * x_1298) + x_1301);
    let x_1307 : u32 = x_28.x_HistogramBuffer_buf[53i].value[0i];
    u_xlatu27 = x_1307;
    let x_1309 : u32 = u_xlatu27;
    u_xlat27.x = f32(x_1309);
    let x_1313 : f32 = u_xlat27.x;
    let x_1315 : f32 = u_xlat0.x;
    let x_1318 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1313 * x_1315) + x_1318);
    let x_1324 : u32 = x_28.x_HistogramBuffer_buf[54i].value[0i];
    u_xlatu163 = x_1324;
    let x_1325 : u32 = u_xlatu163;
    u_xlat27.z = f32(x_1325);
    let x_1329 : vec2<f32> = u_xlat0;
    let x_1331 : vec3<f32> = u_xlat27;
    let x_1333 : vec2<f32> = (vec2<f32>(x_1329.x, x_1329.x) * vec2<f32>(x_1331.x, x_1331.z));
    let x_1334 : vec3<f32> = u_xlat95;
    u_xlat95 = vec3<f32>(x_1333.x, x_1334.y, x_1333.y);
    let x_1337 : f32 = u_xlat27.z;
    let x_1339 : f32 = u_xlat0.x;
    let x_1342 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1337 * x_1339) + x_1342);
    let x_1348 : u32 = x_28.x_HistogramBuffer_buf[55i].value[0i];
    u_xlatu28 = x_1348;
    let x_1350 : u32 = u_xlatu28;
    u_xlat28.x = f32(x_1350);
    let x_1354 : f32 = u_xlat28.x;
    let x_1356 : f32 = u_xlat0.x;
    let x_1359 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1354 * x_1356) + x_1359);
    let x_1365 : u32 = x_28.x_HistogramBuffer_buf[56i].value[0i];
    u_xlatu164 = x_1365;
    let x_1366 : u32 = u_xlatu164;
    u_xlat28.z = f32(x_1366);
    let x_1370 : vec2<f32> = u_xlat0;
    let x_1372 : vec3<f32> = u_xlat28;
    let x_1374 : vec2<f32> = (vec2<f32>(x_1370.x, x_1370.x) * vec2<f32>(x_1372.x, x_1372.z));
    let x_1375 : vec3<f32> = u_xlat96;
    u_xlat96 = vec3<f32>(x_1374.x, x_1375.y, x_1374.y);
    let x_1378 : f32 = u_xlat28.z;
    let x_1380 : f32 = u_xlat0.x;
    let x_1383 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1378 * x_1380) + x_1383);
    let x_1389 : u32 = x_28.x_HistogramBuffer_buf[57i].value[0i];
    u_xlatu29 = x_1389;
    let x_1391 : u32 = u_xlatu29;
    u_xlat29.x = f32(x_1391);
    let x_1395 : f32 = u_xlat29.x;
    let x_1397 : f32 = u_xlat0.x;
    let x_1400 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1395 * x_1397) + x_1400);
    let x_1406 : u32 = x_28.x_HistogramBuffer_buf[58i].value[0i];
    u_xlatu165 = x_1406;
    let x_1407 : u32 = u_xlatu165;
    u_xlat29.z = f32(x_1407);
    let x_1411 : vec2<f32> = u_xlat0;
    let x_1413 : vec3<f32> = u_xlat29;
    let x_1415 : vec2<f32> = (vec2<f32>(x_1411.x, x_1411.x) * vec2<f32>(x_1413.x, x_1413.z));
    let x_1416 : vec3<f32> = u_xlat97;
    u_xlat97 = vec3<f32>(x_1415.x, x_1416.y, x_1415.y);
    let x_1419 : f32 = u_xlat29.z;
    let x_1421 : f32 = u_xlat0.x;
    let x_1424 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1419 * x_1421) + x_1424);
    let x_1430 : u32 = x_28.x_HistogramBuffer_buf[59i].value[0i];
    u_xlatu30 = x_1430;
    let x_1432 : u32 = u_xlatu30;
    u_xlat30.x = f32(x_1432);
    let x_1436 : f32 = u_xlat30.x;
    let x_1438 : f32 = u_xlat0.x;
    let x_1441 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1436 * x_1438) + x_1441);
    let x_1447 : u32 = x_28.x_HistogramBuffer_buf[60i].value[0i];
    u_xlatu166 = x_1447;
    let x_1448 : u32 = u_xlatu166;
    u_xlat30.z = f32(x_1448);
    let x_1452 : vec2<f32> = u_xlat0;
    let x_1454 : vec3<f32> = u_xlat30;
    let x_1456 : vec2<f32> = (vec2<f32>(x_1452.x, x_1452.x) * vec2<f32>(x_1454.x, x_1454.z));
    let x_1457 : vec3<f32> = u_xlat98;
    u_xlat98 = vec3<f32>(x_1456.x, x_1457.y, x_1456.y);
    let x_1460 : f32 = u_xlat30.z;
    let x_1462 : f32 = u_xlat0.x;
    let x_1465 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1460 * x_1462) + x_1465);
    let x_1471 : u32 = x_28.x_HistogramBuffer_buf[61i].value[0i];
    u_xlatu31 = x_1471;
    let x_1473 : u32 = u_xlatu31;
    u_xlat31.x = f32(x_1473);
    let x_1477 : f32 = u_xlat31.x;
    let x_1479 : f32 = u_xlat0.x;
    let x_1482 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1477 * x_1479) + x_1482);
    let x_1488 : u32 = x_28.x_HistogramBuffer_buf[62i].value[0i];
    u_xlatu167 = x_1488;
    let x_1489 : u32 = u_xlatu167;
    u_xlat31.z = f32(x_1489);
    let x_1493 : vec2<f32> = u_xlat0;
    let x_1495 : vec3<f32> = u_xlat31;
    let x_1497 : vec2<f32> = (vec2<f32>(x_1493.x, x_1493.x) * vec2<f32>(x_1495.x, x_1495.z));
    let x_1498 : vec3<f32> = u_xlat99;
    u_xlat99 = vec3<f32>(x_1497.x, x_1498.y, x_1497.y);
    let x_1501 : f32 = u_xlat31.z;
    let x_1503 : f32 = u_xlat0.x;
    let x_1506 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1501 * x_1503) + x_1506);
    let x_1512 : u32 = x_28.x_HistogramBuffer_buf[63i].value[0i];
    u_xlatu32 = x_1512;
    let x_1514 : u32 = u_xlatu32;
    u_xlat32.x = f32(x_1514);
    let x_1518 : f32 = u_xlat32.x;
    let x_1520 : f32 = u_xlat0.x;
    let x_1523 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1518 * x_1520) + x_1523);
    let x_1528 : u32 = x_28.x_HistogramBuffer_buf[64i].value[0i];
    u_xlatu168 = x_1528;
    let x_1529 : u32 = u_xlatu168;
    u_xlat32.z = f32(x_1529);
    let x_1533 : vec2<f32> = u_xlat0;
    let x_1535 : vec3<f32> = u_xlat32;
    let x_1537 : vec2<f32> = (vec2<f32>(x_1533.x, x_1533.x) * vec2<f32>(x_1535.x, x_1535.z));
    let x_1538 : vec3<f32> = u_xlat100;
    u_xlat100 = vec3<f32>(x_1537.x, x_1538.y, x_1537.y);
    let x_1541 : f32 = u_xlat32.z;
    let x_1543 : f32 = u_xlat0.x;
    let x_1546 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1541 * x_1543) + x_1546);
    let x_1552 : u32 = x_28.x_HistogramBuffer_buf[65i].value[0i];
    u_xlatu33 = x_1552;
    let x_1554 : u32 = u_xlatu33;
    u_xlat33.x = f32(x_1554);
    let x_1558 : f32 = u_xlat33.x;
    let x_1560 : f32 = u_xlat0.x;
    let x_1563 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1558 * x_1560) + x_1563);
    let x_1569 : u32 = x_28.x_HistogramBuffer_buf[66i].value[0i];
    u_xlatu169 = x_1569;
    let x_1570 : u32 = u_xlatu169;
    u_xlat33.z = f32(x_1570);
    let x_1574 : vec2<f32> = u_xlat0;
    let x_1576 : vec3<f32> = u_xlat33;
    let x_1578 : vec2<f32> = (vec2<f32>(x_1574.x, x_1574.x) * vec2<f32>(x_1576.x, x_1576.z));
    let x_1579 : vec3<f32> = u_xlat101;
    u_xlat101 = vec3<f32>(x_1578.x, x_1579.y, x_1578.y);
    let x_1582 : f32 = u_xlat33.z;
    let x_1584 : f32 = u_xlat0.x;
    let x_1587 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1582 * x_1584) + x_1587);
    let x_1593 : u32 = x_28.x_HistogramBuffer_buf[67i].value[0i];
    u_xlatu34 = x_1593;
    let x_1595 : u32 = u_xlatu34;
    u_xlat34.x = f32(x_1595);
    let x_1599 : f32 = u_xlat34.x;
    let x_1601 : f32 = u_xlat0.x;
    let x_1604 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1599 * x_1601) + x_1604);
    let x_1610 : u32 = x_28.x_HistogramBuffer_buf[68i].value[0i];
    u_xlatu170 = x_1610;
    let x_1611 : u32 = u_xlatu170;
    u_xlat34.z = f32(x_1611);
    let x_1615 : vec2<f32> = u_xlat0;
    let x_1617 : vec3<f32> = u_xlat34;
    let x_1619 : vec2<f32> = (vec2<f32>(x_1615.x, x_1615.x) * vec2<f32>(x_1617.x, x_1617.z));
    let x_1620 : vec3<f32> = u_xlat102;
    u_xlat102 = vec3<f32>(x_1619.x, x_1620.y, x_1619.y);
    let x_1623 : f32 = u_xlat34.z;
    let x_1625 : f32 = u_xlat0.x;
    let x_1628 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1623 * x_1625) + x_1628);
    let x_1634 : u32 = x_28.x_HistogramBuffer_buf[69i].value[0i];
    u_xlatu35 = x_1634;
    let x_1636 : u32 = u_xlatu35;
    u_xlat35.x = f32(x_1636);
    let x_1640 : f32 = u_xlat35.x;
    let x_1642 : f32 = u_xlat0.x;
    let x_1645 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1640 * x_1642) + x_1645);
    let x_1651 : u32 = x_28.x_HistogramBuffer_buf[70i].value[0i];
    u_xlatu171 = x_1651;
    let x_1652 : u32 = u_xlatu171;
    u_xlat35.z = f32(x_1652);
    let x_1656 : vec2<f32> = u_xlat0;
    let x_1658 : vec3<f32> = u_xlat35;
    let x_1660 : vec2<f32> = (vec2<f32>(x_1656.x, x_1656.x) * vec2<f32>(x_1658.x, x_1658.z));
    let x_1661 : vec3<f32> = u_xlat103;
    u_xlat103 = vec3<f32>(x_1660.x, x_1661.y, x_1660.y);
    let x_1664 : f32 = u_xlat35.z;
    let x_1666 : f32 = u_xlat0.x;
    let x_1669 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1664 * x_1666) + x_1669);
    let x_1675 : u32 = x_28.x_HistogramBuffer_buf[71i].value[0i];
    u_xlatu36 = x_1675;
    let x_1677 : u32 = u_xlatu36;
    u_xlat36.x = f32(x_1677);
    let x_1681 : f32 = u_xlat36.x;
    let x_1683 : f32 = u_xlat0.x;
    let x_1686 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1681 * x_1683) + x_1686);
    let x_1692 : u32 = x_28.x_HistogramBuffer_buf[72i].value[0i];
    u_xlatu172 = x_1692;
    let x_1693 : u32 = u_xlatu172;
    u_xlat36.z = f32(x_1693);
    let x_1697 : vec2<f32> = u_xlat0;
    let x_1699 : vec3<f32> = u_xlat36;
    let x_1701 : vec2<f32> = (vec2<f32>(x_1697.x, x_1697.x) * vec2<f32>(x_1699.x, x_1699.z));
    let x_1702 : vec3<f32> = u_xlat104;
    u_xlat104 = vec3<f32>(x_1701.x, x_1702.y, x_1701.y);
    let x_1705 : f32 = u_xlat36.z;
    let x_1707 : f32 = u_xlat0.x;
    let x_1710 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1705 * x_1707) + x_1710);
    let x_1716 : u32 = x_28.x_HistogramBuffer_buf[73i].value[0i];
    u_xlatu37 = x_1716;
    let x_1718 : u32 = u_xlatu37;
    u_xlat37.x = f32(x_1718);
    let x_1722 : f32 = u_xlat37.x;
    let x_1724 : f32 = u_xlat0.x;
    let x_1727 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1722 * x_1724) + x_1727);
    let x_1733 : u32 = x_28.x_HistogramBuffer_buf[74i].value[0i];
    u_xlatu173 = x_1733;
    let x_1734 : u32 = u_xlatu173;
    u_xlat37.z = f32(x_1734);
    let x_1738 : vec2<f32> = u_xlat0;
    let x_1740 : vec3<f32> = u_xlat37;
    let x_1742 : vec2<f32> = (vec2<f32>(x_1738.x, x_1738.x) * vec2<f32>(x_1740.x, x_1740.z));
    let x_1743 : vec3<f32> = u_xlat105;
    u_xlat105 = vec3<f32>(x_1742.x, x_1743.y, x_1742.y);
    let x_1746 : f32 = u_xlat37.z;
    let x_1748 : f32 = u_xlat0.x;
    let x_1751 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1746 * x_1748) + x_1751);
    let x_1757 : u32 = x_28.x_HistogramBuffer_buf[75i].value[0i];
    u_xlatu38 = x_1757;
    let x_1759 : u32 = u_xlatu38;
    u_xlat38.x = f32(x_1759);
    let x_1763 : f32 = u_xlat38.x;
    let x_1765 : f32 = u_xlat0.x;
    let x_1768 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1763 * x_1765) + x_1768);
    let x_1774 : u32 = x_28.x_HistogramBuffer_buf[76i].value[0i];
    u_xlatu174 = x_1774;
    let x_1775 : u32 = u_xlatu174;
    u_xlat38.z = f32(x_1775);
    let x_1779 : vec2<f32> = u_xlat0;
    let x_1781 : vec3<f32> = u_xlat38;
    let x_1783 : vec2<f32> = (vec2<f32>(x_1779.x, x_1779.x) * vec2<f32>(x_1781.x, x_1781.z));
    let x_1784 : vec3<f32> = u_xlat106;
    u_xlat106 = vec3<f32>(x_1783.x, x_1784.y, x_1783.y);
    let x_1787 : f32 = u_xlat38.z;
    let x_1789 : f32 = u_xlat0.x;
    let x_1792 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1787 * x_1789) + x_1792);
    let x_1798 : u32 = x_28.x_HistogramBuffer_buf[77i].value[0i];
    u_xlatu39 = x_1798;
    let x_1800 : u32 = u_xlatu39;
    u_xlat39.x = f32(x_1800);
    let x_1804 : f32 = u_xlat39.x;
    let x_1806 : f32 = u_xlat0.x;
    let x_1809 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1804 * x_1806) + x_1809);
    let x_1815 : u32 = x_28.x_HistogramBuffer_buf[78i].value[0i];
    u_xlatu175 = x_1815;
    let x_1816 : u32 = u_xlatu175;
    u_xlat39.z = f32(x_1816);
    let x_1820 : vec2<f32> = u_xlat0;
    let x_1822 : vec3<f32> = u_xlat39;
    let x_1824 : vec2<f32> = (vec2<f32>(x_1820.x, x_1820.x) * vec2<f32>(x_1822.x, x_1822.z));
    let x_1825 : vec3<f32> = u_xlat107;
    u_xlat107 = vec3<f32>(x_1824.x, x_1825.y, x_1824.y);
    let x_1828 : f32 = u_xlat39.z;
    let x_1830 : f32 = u_xlat0.x;
    let x_1833 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1828 * x_1830) + x_1833);
    let x_1839 : u32 = x_28.x_HistogramBuffer_buf[79i].value[0i];
    u_xlatu40 = x_1839;
    let x_1841 : u32 = u_xlatu40;
    u_xlat40.x = f32(x_1841);
    let x_1845 : f32 = u_xlat40.x;
    let x_1847 : f32 = u_xlat0.x;
    let x_1850 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1845 * x_1847) + x_1850);
    let x_1856 : u32 = x_28.x_HistogramBuffer_buf[80i].value[0i];
    u_xlatu176 = x_1856;
    let x_1857 : u32 = u_xlatu176;
    u_xlat40.z = f32(x_1857);
    let x_1861 : vec2<f32> = u_xlat0;
    let x_1863 : vec3<f32> = u_xlat40;
    let x_1865 : vec2<f32> = (vec2<f32>(x_1861.x, x_1861.x) * vec2<f32>(x_1863.x, x_1863.z));
    let x_1866 : vec3<f32> = u_xlat108;
    u_xlat108 = vec3<f32>(x_1865.x, x_1866.y, x_1865.y);
    let x_1869 : f32 = u_xlat40.z;
    let x_1871 : f32 = u_xlat0.x;
    let x_1874 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1869 * x_1871) + x_1874);
    let x_1880 : u32 = x_28.x_HistogramBuffer_buf[81i].value[0i];
    u_xlatu41 = x_1880;
    let x_1882 : u32 = u_xlatu41;
    u_xlat41.x = f32(x_1882);
    let x_1886 : f32 = u_xlat41.x;
    let x_1888 : f32 = u_xlat0.x;
    let x_1891 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1886 * x_1888) + x_1891);
    let x_1897 : u32 = x_28.x_HistogramBuffer_buf[82i].value[0i];
    u_xlatu177 = x_1897;
    let x_1898 : u32 = u_xlatu177;
    u_xlat41.z = f32(x_1898);
    let x_1902 : vec2<f32> = u_xlat0;
    let x_1904 : vec3<f32> = u_xlat41;
    let x_1906 : vec2<f32> = (vec2<f32>(x_1902.x, x_1902.x) * vec2<f32>(x_1904.x, x_1904.z));
    let x_1907 : vec3<f32> = u_xlat109;
    u_xlat109 = vec3<f32>(x_1906.x, x_1907.y, x_1906.y);
    let x_1910 : f32 = u_xlat41.z;
    let x_1912 : f32 = u_xlat0.x;
    let x_1915 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1910 * x_1912) + x_1915);
    let x_1921 : u32 = x_28.x_HistogramBuffer_buf[83i].value[0i];
    u_xlatu42 = x_1921;
    let x_1923 : u32 = u_xlatu42;
    u_xlat42.x = f32(x_1923);
    let x_1927 : f32 = u_xlat42.x;
    let x_1929 : f32 = u_xlat0.x;
    let x_1932 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1927 * x_1929) + x_1932);
    let x_1938 : u32 = x_28.x_HistogramBuffer_buf[84i].value[0i];
    u_xlatu178 = x_1938;
    let x_1939 : u32 = u_xlatu178;
    u_xlat42.z = f32(x_1939);
    let x_1943 : vec2<f32> = u_xlat0;
    let x_1945 : vec3<f32> = u_xlat42;
    let x_1947 : vec2<f32> = (vec2<f32>(x_1943.x, x_1943.x) * vec2<f32>(x_1945.x, x_1945.z));
    let x_1948 : vec3<f32> = u_xlat110;
    u_xlat110 = vec3<f32>(x_1947.x, x_1948.y, x_1947.y);
    let x_1951 : f32 = u_xlat42.z;
    let x_1953 : f32 = u_xlat0.x;
    let x_1956 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1951 * x_1953) + x_1956);
    let x_1962 : u32 = x_28.x_HistogramBuffer_buf[85i].value[0i];
    u_xlatu43 = x_1962;
    let x_1964 : u32 = u_xlatu43;
    u_xlat43.x = f32(x_1964);
    let x_1968 : f32 = u_xlat43.x;
    let x_1970 : f32 = u_xlat0.x;
    let x_1973 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1968 * x_1970) + x_1973);
    let x_1979 : u32 = x_28.x_HistogramBuffer_buf[86i].value[0i];
    u_xlatu179 = x_1979;
    let x_1980 : u32 = u_xlatu179;
    u_xlat43.z = f32(x_1980);
    let x_1984 : vec2<f32> = u_xlat0;
    let x_1986 : vec3<f32> = u_xlat43;
    let x_1988 : vec2<f32> = (vec2<f32>(x_1984.x, x_1984.x) * vec2<f32>(x_1986.x, x_1986.z));
    let x_1989 : vec3<f32> = u_xlat111;
    u_xlat111 = vec3<f32>(x_1988.x, x_1989.y, x_1988.y);
    let x_1992 : f32 = u_xlat43.z;
    let x_1994 : f32 = u_xlat0.x;
    let x_1997 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_1992 * x_1994) + x_1997);
    let x_2003 : u32 = x_28.x_HistogramBuffer_buf[87i].value[0i];
    u_xlatu44 = x_2003;
    let x_2005 : u32 = u_xlatu44;
    u_xlat44.x = f32(x_2005);
    let x_2009 : f32 = u_xlat44.x;
    let x_2011 : f32 = u_xlat0.x;
    let x_2014 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2009 * x_2011) + x_2014);
    let x_2020 : u32 = x_28.x_HistogramBuffer_buf[88i].value[0i];
    u_xlatu180 = x_2020;
    let x_2021 : u32 = u_xlatu180;
    u_xlat44.z = f32(x_2021);
    let x_2025 : vec2<f32> = u_xlat0;
    let x_2027 : vec3<f32> = u_xlat44;
    let x_2029 : vec2<f32> = (vec2<f32>(x_2025.x, x_2025.x) * vec2<f32>(x_2027.x, x_2027.z));
    let x_2030 : vec3<f32> = u_xlat112;
    u_xlat112 = vec3<f32>(x_2029.x, x_2030.y, x_2029.y);
    let x_2033 : f32 = u_xlat44.z;
    let x_2035 : f32 = u_xlat0.x;
    let x_2038 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2033 * x_2035) + x_2038);
    let x_2044 : u32 = x_28.x_HistogramBuffer_buf[89i].value[0i];
    u_xlatu45 = x_2044;
    let x_2046 : u32 = u_xlatu45;
    u_xlat45.x = f32(x_2046);
    let x_2050 : f32 = u_xlat45.x;
    let x_2052 : f32 = u_xlat0.x;
    let x_2055 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2050 * x_2052) + x_2055);
    let x_2061 : u32 = x_28.x_HistogramBuffer_buf[90i].value[0i];
    u_xlatu181 = x_2061;
    let x_2062 : u32 = u_xlatu181;
    u_xlat45.z = f32(x_2062);
    let x_2066 : vec2<f32> = u_xlat0;
    let x_2068 : vec3<f32> = u_xlat45;
    let x_2070 : vec2<f32> = (vec2<f32>(x_2066.x, x_2066.x) * vec2<f32>(x_2068.x, x_2068.z));
    let x_2071 : vec3<f32> = u_xlat113;
    u_xlat113 = vec3<f32>(x_2070.x, x_2071.y, x_2070.y);
    let x_2074 : f32 = u_xlat45.z;
    let x_2076 : f32 = u_xlat0.x;
    let x_2079 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2074 * x_2076) + x_2079);
    let x_2085 : u32 = x_28.x_HistogramBuffer_buf[91i].value[0i];
    u_xlatu46 = x_2085;
    let x_2087 : u32 = u_xlatu46;
    u_xlat46.x = f32(x_2087);
    let x_2091 : f32 = u_xlat46.x;
    let x_2093 : f32 = u_xlat0.x;
    let x_2096 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2091 * x_2093) + x_2096);
    let x_2102 : u32 = x_28.x_HistogramBuffer_buf[92i].value[0i];
    u_xlatu182 = x_2102;
    let x_2103 : u32 = u_xlatu182;
    u_xlat46.z = f32(x_2103);
    let x_2107 : vec2<f32> = u_xlat0;
    let x_2109 : vec3<f32> = u_xlat46;
    let x_2111 : vec2<f32> = (vec2<f32>(x_2107.x, x_2107.x) * vec2<f32>(x_2109.x, x_2109.z));
    let x_2112 : vec3<f32> = u_xlat114;
    u_xlat114 = vec3<f32>(x_2111.x, x_2112.y, x_2111.y);
    let x_2115 : f32 = u_xlat46.z;
    let x_2117 : f32 = u_xlat0.x;
    let x_2120 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2115 * x_2117) + x_2120);
    let x_2126 : u32 = x_28.x_HistogramBuffer_buf[93i].value[0i];
    u_xlatu47 = x_2126;
    let x_2128 : u32 = u_xlatu47;
    u_xlat47.x = f32(x_2128);
    let x_2132 : f32 = u_xlat47.x;
    let x_2134 : f32 = u_xlat0.x;
    let x_2137 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2132 * x_2134) + x_2137);
    let x_2143 : u32 = x_28.x_HistogramBuffer_buf[94i].value[0i];
    u_xlatu183 = x_2143;
    let x_2144 : u32 = u_xlatu183;
    u_xlat47.z = f32(x_2144);
    let x_2148 : vec2<f32> = u_xlat0;
    let x_2150 : vec3<f32> = u_xlat47;
    let x_2152 : vec2<f32> = (vec2<f32>(x_2148.x, x_2148.x) * vec2<f32>(x_2150.x, x_2150.z));
    let x_2153 : vec3<f32> = u_xlat115;
    u_xlat115 = vec3<f32>(x_2152.x, x_2153.y, x_2152.y);
    let x_2156 : f32 = u_xlat47.z;
    let x_2158 : f32 = u_xlat0.x;
    let x_2161 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2156 * x_2158) + x_2161);
    let x_2167 : u32 = x_28.x_HistogramBuffer_buf[95i].value[0i];
    u_xlatu48 = x_2167;
    let x_2169 : u32 = u_xlatu48;
    u_xlat48.x = f32(x_2169);
    let x_2173 : f32 = u_xlat48.x;
    let x_2175 : f32 = u_xlat0.x;
    let x_2178 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2173 * x_2175) + x_2178);
    let x_2184 : u32 = x_28.x_HistogramBuffer_buf[96i].value[0i];
    u_xlatu184 = x_2184;
    let x_2185 : u32 = u_xlatu184;
    u_xlat48.z = f32(x_2185);
    let x_2189 : vec2<f32> = u_xlat0;
    let x_2191 : vec3<f32> = u_xlat48;
    let x_2193 : vec2<f32> = (vec2<f32>(x_2189.x, x_2189.x) * vec2<f32>(x_2191.x, x_2191.z));
    let x_2194 : vec3<f32> = u_xlat116;
    u_xlat116 = vec3<f32>(x_2193.x, x_2194.y, x_2193.y);
    let x_2197 : f32 = u_xlat48.z;
    let x_2199 : f32 = u_xlat0.x;
    let x_2202 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2197 * x_2199) + x_2202);
    let x_2208 : u32 = x_28.x_HistogramBuffer_buf[97i].value[0i];
    u_xlatu49 = x_2208;
    let x_2210 : u32 = u_xlatu49;
    u_xlat49.x = f32(x_2210);
    let x_2214 : f32 = u_xlat49.x;
    let x_2216 : f32 = u_xlat0.x;
    let x_2219 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2214 * x_2216) + x_2219);
    let x_2225 : u32 = x_28.x_HistogramBuffer_buf[98i].value[0i];
    u_xlatu185 = x_2225;
    let x_2226 : u32 = u_xlatu185;
    u_xlat49.z = f32(x_2226);
    let x_2230 : vec2<f32> = u_xlat0;
    let x_2232 : vec3<f32> = u_xlat49;
    let x_2234 : vec2<f32> = (vec2<f32>(x_2230.x, x_2230.x) * vec2<f32>(x_2232.x, x_2232.z));
    let x_2235 : vec3<f32> = u_xlat117;
    u_xlat117 = vec3<f32>(x_2234.x, x_2235.y, x_2234.y);
    let x_2238 : f32 = u_xlat49.z;
    let x_2240 : f32 = u_xlat0.x;
    let x_2243 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2238 * x_2240) + x_2243);
    let x_2249 : u32 = x_28.x_HistogramBuffer_buf[99i].value[0i];
    u_xlatu50 = x_2249;
    let x_2251 : u32 = u_xlatu50;
    u_xlat50.x = f32(x_2251);
    let x_2255 : f32 = u_xlat50.x;
    let x_2257 : f32 = u_xlat0.x;
    let x_2260 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2255 * x_2257) + x_2260);
    let x_2266 : u32 = x_28.x_HistogramBuffer_buf[100i].value[0i];
    u_xlatu186 = x_2266;
    let x_2267 : u32 = u_xlatu186;
    u_xlat50.z = f32(x_2267);
    let x_2271 : vec2<f32> = u_xlat0;
    let x_2273 : vec3<f32> = u_xlat50;
    let x_2275 : vec2<f32> = (vec2<f32>(x_2271.x, x_2271.x) * vec2<f32>(x_2273.x, x_2273.z));
    let x_2276 : vec3<f32> = u_xlat118;
    u_xlat118 = vec3<f32>(x_2275.x, x_2276.y, x_2275.y);
    let x_2279 : f32 = u_xlat50.z;
    let x_2281 : f32 = u_xlat0.x;
    let x_2284 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2279 * x_2281) + x_2284);
    let x_2290 : u32 = x_28.x_HistogramBuffer_buf[101i].value[0i];
    u_xlatu51 = x_2290;
    let x_2292 : u32 = u_xlatu51;
    u_xlat51.x = f32(x_2292);
    let x_2296 : f32 = u_xlat51.x;
    let x_2298 : f32 = u_xlat0.x;
    let x_2301 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2296 * x_2298) + x_2301);
    let x_2307 : u32 = x_28.x_HistogramBuffer_buf[102i].value[0i];
    u_xlatu187 = x_2307;
    let x_2308 : u32 = u_xlatu187;
    u_xlat51.z = f32(x_2308);
    let x_2312 : vec2<f32> = u_xlat0;
    let x_2314 : vec3<f32> = u_xlat51;
    let x_2316 : vec2<f32> = (vec2<f32>(x_2312.x, x_2312.x) * vec2<f32>(x_2314.x, x_2314.z));
    let x_2317 : vec3<f32> = u_xlat119;
    u_xlat119 = vec3<f32>(x_2316.x, x_2317.y, x_2316.y);
    let x_2320 : f32 = u_xlat51.z;
    let x_2322 : f32 = u_xlat0.x;
    let x_2325 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2320 * x_2322) + x_2325);
    let x_2331 : u32 = x_28.x_HistogramBuffer_buf[103i].value[0i];
    u_xlatu52 = x_2331;
    let x_2333 : u32 = u_xlatu52;
    u_xlat52.x = f32(x_2333);
    let x_2337 : f32 = u_xlat52.x;
    let x_2339 : f32 = u_xlat0.x;
    let x_2342 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2337 * x_2339) + x_2342);
    let x_2348 : u32 = x_28.x_HistogramBuffer_buf[104i].value[0i];
    u_xlatu188 = x_2348;
    let x_2349 : u32 = u_xlatu188;
    u_xlat52.z = f32(x_2349);
    let x_2353 : vec2<f32> = u_xlat0;
    let x_2355 : vec3<f32> = u_xlat52;
    let x_2357 : vec2<f32> = (vec2<f32>(x_2353.x, x_2353.x) * vec2<f32>(x_2355.x, x_2355.z));
    let x_2358 : vec3<f32> = u_xlat120;
    u_xlat120 = vec3<f32>(x_2357.x, x_2358.y, x_2357.y);
    let x_2361 : f32 = u_xlat52.z;
    let x_2363 : f32 = u_xlat0.x;
    let x_2366 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2361 * x_2363) + x_2366);
    let x_2372 : u32 = x_28.x_HistogramBuffer_buf[105i].value[0i];
    u_xlatu53 = x_2372;
    let x_2374 : u32 = u_xlatu53;
    u_xlat53.x = f32(x_2374);
    let x_2378 : f32 = u_xlat53.x;
    let x_2380 : f32 = u_xlat0.x;
    let x_2383 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2378 * x_2380) + x_2383);
    let x_2389 : u32 = x_28.x_HistogramBuffer_buf[106i].value[0i];
    u_xlatu189 = x_2389;
    let x_2390 : u32 = u_xlatu189;
    u_xlat53.z = f32(x_2390);
    let x_2394 : vec2<f32> = u_xlat0;
    let x_2396 : vec3<f32> = u_xlat53;
    let x_2398 : vec2<f32> = (vec2<f32>(x_2394.x, x_2394.x) * vec2<f32>(x_2396.x, x_2396.z));
    let x_2399 : vec3<f32> = u_xlat121;
    u_xlat121 = vec3<f32>(x_2398.x, x_2399.y, x_2398.y);
    let x_2402 : f32 = u_xlat53.z;
    let x_2404 : f32 = u_xlat0.x;
    let x_2407 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2402 * x_2404) + x_2407);
    let x_2413 : u32 = x_28.x_HistogramBuffer_buf[107i].value[0i];
    u_xlatu54 = x_2413;
    let x_2415 : u32 = u_xlatu54;
    u_xlat54.x = f32(x_2415);
    let x_2419 : f32 = u_xlat54.x;
    let x_2421 : f32 = u_xlat0.x;
    let x_2424 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2419 * x_2421) + x_2424);
    let x_2430 : u32 = x_28.x_HistogramBuffer_buf[108i].value[0i];
    u_xlatu190 = x_2430;
    let x_2431 : u32 = u_xlatu190;
    u_xlat54.z = f32(x_2431);
    let x_2435 : vec2<f32> = u_xlat0;
    let x_2437 : vec3<f32> = u_xlat54;
    let x_2439 : vec2<f32> = (vec2<f32>(x_2435.x, x_2435.x) * vec2<f32>(x_2437.x, x_2437.z));
    let x_2440 : vec3<f32> = u_xlat122;
    u_xlat122 = vec3<f32>(x_2439.x, x_2440.y, x_2439.y);
    let x_2443 : f32 = u_xlat54.z;
    let x_2445 : f32 = u_xlat0.x;
    let x_2448 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2443 * x_2445) + x_2448);
    let x_2454 : u32 = x_28.x_HistogramBuffer_buf[109i].value[0i];
    u_xlatu55 = x_2454;
    let x_2456 : u32 = u_xlatu55;
    u_xlat55.x = f32(x_2456);
    let x_2460 : f32 = u_xlat55.x;
    let x_2462 : f32 = u_xlat0.x;
    let x_2465 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2460 * x_2462) + x_2465);
    let x_2471 : u32 = x_28.x_HistogramBuffer_buf[110i].value[0i];
    u_xlatu191 = x_2471;
    let x_2472 : u32 = u_xlatu191;
    u_xlat55.z = f32(x_2472);
    let x_2476 : vec2<f32> = u_xlat0;
    let x_2478 : vec3<f32> = u_xlat55;
    let x_2480 : vec2<f32> = (vec2<f32>(x_2476.x, x_2476.x) * vec2<f32>(x_2478.x, x_2478.z));
    let x_2481 : vec3<f32> = u_xlat123;
    u_xlat123 = vec3<f32>(x_2480.x, x_2481.y, x_2480.y);
    let x_2484 : f32 = u_xlat55.z;
    let x_2486 : f32 = u_xlat0.x;
    let x_2489 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2484 * x_2486) + x_2489);
    let x_2495 : u32 = x_28.x_HistogramBuffer_buf[111i].value[0i];
    u_xlatu56 = x_2495;
    let x_2497 : u32 = u_xlatu56;
    u_xlat56.x = f32(x_2497);
    let x_2501 : f32 = u_xlat56.x;
    let x_2503 : f32 = u_xlat0.x;
    let x_2506 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2501 * x_2503) + x_2506);
    let x_2512 : u32 = x_28.x_HistogramBuffer_buf[112i].value[0i];
    u_xlatu192 = x_2512;
    let x_2513 : u32 = u_xlatu192;
    u_xlat56.z = f32(x_2513);
    let x_2517 : vec2<f32> = u_xlat0;
    let x_2519 : vec3<f32> = u_xlat56;
    let x_2521 : vec2<f32> = (vec2<f32>(x_2517.x, x_2517.x) * vec2<f32>(x_2519.x, x_2519.z));
    let x_2522 : vec3<f32> = u_xlat124;
    u_xlat124 = vec3<f32>(x_2521.x, x_2522.y, x_2521.y);
    let x_2525 : f32 = u_xlat56.z;
    let x_2527 : f32 = u_xlat0.x;
    let x_2530 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2525 * x_2527) + x_2530);
    let x_2536 : u32 = x_28.x_HistogramBuffer_buf[113i].value[0i];
    u_xlatu57 = x_2536;
    let x_2538 : u32 = u_xlatu57;
    u_xlat57.x = f32(x_2538);
    let x_2542 : f32 = u_xlat57.x;
    let x_2544 : f32 = u_xlat0.x;
    let x_2547 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2542 * x_2544) + x_2547);
    let x_2553 : u32 = x_28.x_HistogramBuffer_buf[114i].value[0i];
    u_xlatu193 = x_2553;
    let x_2554 : u32 = u_xlatu193;
    u_xlat57.z = f32(x_2554);
    let x_2558 : vec2<f32> = u_xlat0;
    let x_2560 : vec3<f32> = u_xlat57;
    let x_2562 : vec2<f32> = (vec2<f32>(x_2558.x, x_2558.x) * vec2<f32>(x_2560.x, x_2560.z));
    let x_2563 : vec3<f32> = u_xlat125;
    u_xlat125 = vec3<f32>(x_2562.x, x_2563.y, x_2562.y);
    let x_2566 : f32 = u_xlat57.z;
    let x_2568 : f32 = u_xlat0.x;
    let x_2571 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2566 * x_2568) + x_2571);
    let x_2577 : u32 = x_28.x_HistogramBuffer_buf[115i].value[0i];
    u_xlatu58 = x_2577;
    let x_2579 : u32 = u_xlatu58;
    u_xlat58.x = f32(x_2579);
    let x_2583 : f32 = u_xlat58.x;
    let x_2585 : f32 = u_xlat0.x;
    let x_2588 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2583 * x_2585) + x_2588);
    let x_2594 : u32 = x_28.x_HistogramBuffer_buf[116i].value[0i];
    u_xlatu194 = x_2594;
    let x_2595 : u32 = u_xlatu194;
    u_xlat58.z = f32(x_2595);
    let x_2599 : vec2<f32> = u_xlat0;
    let x_2601 : vec3<f32> = u_xlat58;
    let x_2603 : vec2<f32> = (vec2<f32>(x_2599.x, x_2599.x) * vec2<f32>(x_2601.x, x_2601.z));
    let x_2604 : vec3<f32> = u_xlat126;
    u_xlat126 = vec3<f32>(x_2603.x, x_2604.y, x_2603.y);
    let x_2607 : f32 = u_xlat58.z;
    let x_2609 : f32 = u_xlat0.x;
    let x_2612 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2607 * x_2609) + x_2612);
    let x_2618 : u32 = x_28.x_HistogramBuffer_buf[117i].value[0i];
    u_xlatu59 = x_2618;
    let x_2620 : u32 = u_xlatu59;
    u_xlat59.x = f32(x_2620);
    let x_2624 : f32 = u_xlat59.x;
    let x_2626 : f32 = u_xlat0.x;
    let x_2629 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2624 * x_2626) + x_2629);
    let x_2635 : u32 = x_28.x_HistogramBuffer_buf[118i].value[0i];
    u_xlatu195 = x_2635;
    let x_2636 : u32 = u_xlatu195;
    u_xlat59.z = f32(x_2636);
    let x_2640 : vec2<f32> = u_xlat0;
    let x_2642 : vec3<f32> = u_xlat59;
    let x_2644 : vec2<f32> = (vec2<f32>(x_2640.x, x_2640.x) * vec2<f32>(x_2642.x, x_2642.z));
    let x_2645 : vec3<f32> = u_xlat127;
    u_xlat127 = vec3<f32>(x_2644.x, x_2645.y, x_2644.y);
    let x_2648 : f32 = u_xlat59.z;
    let x_2650 : f32 = u_xlat0.x;
    let x_2653 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2648 * x_2650) + x_2653);
    let x_2659 : u32 = x_28.x_HistogramBuffer_buf[119i].value[0i];
    u_xlatu60 = x_2659;
    let x_2661 : u32 = u_xlatu60;
    u_xlat60.x = f32(x_2661);
    let x_2665 : f32 = u_xlat60.x;
    let x_2667 : f32 = u_xlat0.x;
    let x_2670 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2665 * x_2667) + x_2670);
    let x_2676 : u32 = x_28.x_HistogramBuffer_buf[120i].value[0i];
    u_xlatu196 = x_2676;
    let x_2677 : u32 = u_xlatu196;
    u_xlat60.z = f32(x_2677);
    let x_2681 : vec2<f32> = u_xlat0;
    let x_2683 : vec3<f32> = u_xlat60;
    let x_2685 : vec2<f32> = (vec2<f32>(x_2681.x, x_2681.x) * vec2<f32>(x_2683.x, x_2683.z));
    let x_2686 : vec3<f32> = u_xlat128;
    u_xlat128 = vec3<f32>(x_2685.x, x_2686.y, x_2685.y);
    let x_2689 : f32 = u_xlat60.z;
    let x_2691 : f32 = u_xlat0.x;
    let x_2694 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2689 * x_2691) + x_2694);
    let x_2700 : u32 = x_28.x_HistogramBuffer_buf[121i].value[0i];
    u_xlatu61 = x_2700;
    let x_2702 : u32 = u_xlatu61;
    u_xlat61.x = f32(x_2702);
    let x_2706 : f32 = u_xlat61.x;
    let x_2708 : f32 = u_xlat0.x;
    let x_2711 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2706 * x_2708) + x_2711);
    let x_2717 : u32 = x_28.x_HistogramBuffer_buf[122i].value[0i];
    u_xlatu197 = x_2717;
    let x_2718 : u32 = u_xlatu197;
    u_xlat61.z = f32(x_2718);
    let x_2722 : vec2<f32> = u_xlat0;
    let x_2724 : vec3<f32> = u_xlat61;
    let x_2726 : vec2<f32> = (vec2<f32>(x_2722.x, x_2722.x) * vec2<f32>(x_2724.x, x_2724.z));
    let x_2727 : vec3<f32> = u_xlat129;
    u_xlat129 = vec3<f32>(x_2726.x, x_2727.y, x_2726.y);
    let x_2730 : f32 = u_xlat61.z;
    let x_2732 : f32 = u_xlat0.x;
    let x_2735 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2730 * x_2732) + x_2735);
    let x_2741 : u32 = x_28.x_HistogramBuffer_buf[123i].value[0i];
    u_xlatu62 = x_2741;
    let x_2743 : u32 = u_xlatu62;
    u_xlat62.x = f32(x_2743);
    let x_2747 : f32 = u_xlat62.x;
    let x_2749 : f32 = u_xlat0.x;
    let x_2752 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2747 * x_2749) + x_2752);
    let x_2758 : u32 = x_28.x_HistogramBuffer_buf[124i].value[0i];
    u_xlatu198 = x_2758;
    let x_2759 : u32 = u_xlatu198;
    u_xlat62.z = f32(x_2759);
    let x_2763 : vec2<f32> = u_xlat0;
    let x_2765 : vec3<f32> = u_xlat62;
    let x_2767 : vec2<f32> = (vec2<f32>(x_2763.x, x_2763.x) * vec2<f32>(x_2765.x, x_2765.z));
    let x_2768 : vec3<f32> = u_xlat130;
    u_xlat130 = vec3<f32>(x_2767.x, x_2768.y, x_2767.y);
    let x_2771 : f32 = u_xlat62.z;
    let x_2773 : f32 = u_xlat0.x;
    let x_2776 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2771 * x_2773) + x_2776);
    let x_2782 : u32 = x_28.x_HistogramBuffer_buf[125i].value[0i];
    u_xlatu63 = x_2782;
    let x_2784 : u32 = u_xlatu63;
    u_xlat63.x = f32(x_2784);
    let x_2788 : f32 = u_xlat63.x;
    let x_2790 : f32 = u_xlat0.x;
    let x_2793 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2788 * x_2790) + x_2793);
    let x_2799 : u32 = x_28.x_HistogramBuffer_buf[126i].value[0i];
    u_xlatu199 = x_2799;
    let x_2800 : u32 = u_xlatu199;
    u_xlat63.z = f32(x_2800);
    let x_2804 : vec2<f32> = u_xlat0;
    let x_2806 : vec3<f32> = u_xlat63;
    let x_2808 : vec2<f32> = (vec2<f32>(x_2804.x, x_2804.x) * vec2<f32>(x_2806.x, x_2806.z));
    let x_2809 : vec3<f32> = u_xlat131;
    u_xlat131 = vec3<f32>(x_2808.x, x_2809.y, x_2808.y);
    let x_2812 : f32 = u_xlat63.z;
    let x_2814 : f32 = u_xlat0.x;
    let x_2817 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2812 * x_2814) + x_2817);
    let x_2823 : u32 = x_28.x_HistogramBuffer_buf[127i].value[0i];
    u_xlatu64 = x_2823;
    let x_2825 : u32 = u_xlatu64;
    u_xlat64 = f32(x_2825);
    let x_2829 : f32 = u_xlat0.x;
    let x_2830 : f32 = u_xlat64;
    u_xlat132 = (x_2829 * x_2830);
    let x_2832 : f32 = u_xlat64;
    let x_2834 : f32 = u_xlat0.x;
    let x_2837 : f32 = u_xlat69.x;
    u_xlat69.x = ((x_2832 * x_2834) + x_2837);
    let x_2842 : f32 = u_xlat69.x;
    let x_2848 : f32 = x_2845.x_Params1.x;
    u_xlat200 = (x_2842 * x_2848);
    let x_2850 : f32 = u_xlat136;
    let x_2851 : f32 = u_xlat200;
    u_xlat136 = min(x_2850, x_2851);
    let x_2854 : f32 = u_xlat68.x;
    let x_2856 : f32 = u_xlat0.x;
    let x_2858 : f32 = u_xlat136;
    u_xlat68.x = ((x_2854 * x_2856) + -(x_2858));
    let x_2863 : vec2<f32> = u_xlat69;
    let x_2867 : vec4<f32> = x_2845.x_Params1;
    let x_2870 : f32 = u_xlat136;
    let x_2873 : vec2<f32> = ((vec2<f32>(x_2863.x, x_2863.x) * vec2<f32>(x_2867.x, x_2867.y)) + -(vec2<f32>(x_2870, x_2870)));
    let x_2874 : vec4<f32> = u_xlat65;
    u_xlat65 = vec4<f32>(x_2873.x, x_2873.y, x_2874.z, x_2874.w);
    let x_2878 : f32 = u_xlat68.x;
    let x_2880 : f32 = u_xlat65.y;
    u_xlat66.y = min(x_2878, x_2880);
    let x_2884 : f32 = u_xlat65.y;
    let x_2886 : f32 = u_xlat66.y;
    u_xlat65.z = (x_2884 + -(x_2886));
    let x_2891 : f32 = x_2845.x_ScaleOffsetRes.y;
    let x_2894 : f32 = x_2845.x_ScaleOffsetRes.x;
    u_xlat68.x = (-(x_2891) / x_2894);
    let x_2898 : f32 = u_xlat68.x;
    u_xlat68.x = exp2(x_2898);
    let x_2902 : f32 = u_xlat66.y;
    let x_2904 : f32 = u_xlat68.x;
    u_xlat66.x = (x_2902 * x_2904);
    let x_2908 : f32 = u_xlat1.x;
    let x_2910 : f32 = u_xlat65.x;
    u_xlat68.x = min(x_2908, x_2910);
    let x_2913 : f32 = u_xlat204;
    let x_2915 : f32 = u_xlat0.x;
    let x_2918 : f32 = u_xlat68.x;
    u_xlat136 = ((x_2913 * x_2915) + -(x_2918));
    let x_2921 : vec2<f32> = u_xlat68;
    let x_2924 : vec4<f32> = u_xlat65;
    let x_2926 : vec2<f32> = (-(vec2<f32>(x_2921.x, x_2921.x)) + vec2<f32>(x_2924.x, x_2924.z));
    let x_2927 : vec4<f32> = u_xlat65;
    u_xlat65 = vec4<f32>(x_2926.x, x_2926.y, x_2927.z, x_2927.w);
    let x_2929 : f32 = u_xlat136;
    let x_2931 : f32 = u_xlat65.y;
    u_xlat1.y = min(x_2929, x_2931);
    let x_2935 : f32 = u_xlat1.y;
    let x_2938 : f32 = u_xlat65.y;
    u_xlat65.z = (-(x_2935) + x_2938);
    let x_2943 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat67 = (-(vec4<f32>(x_2943.y, x_2943.y, x_2943.y, x_2943.y)) + vec4<f32>(0.0078125f, 0.015625f, 0.0234375f, 0.03125f));
    let x_2952 : vec4<f32> = u_xlat67;
    let x_2954 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat67 = (x_2952 / vec4<f32>(x_2954.x, x_2954.x, x_2954.x, x_2954.x));
    let x_2957 : vec4<f32> = u_xlat67;
    u_xlat67 = exp2(x_2957);
    let x_2960 : f32 = u_xlat1.y;
    let x_2962 : f32 = u_xlat67.x;
    u_xlat1.x = (x_2960 * x_2962);
    let x_2965 : vec2<f32> = u_xlat1;
    let x_2966 : vec2<f32> = u_xlat66;
    u_xlat68 = (x_2965 + x_2966);
    let x_2968 : f32 = u_xlat205;
    let x_2970 : f32 = u_xlat65.x;
    u_xlat204 = min(x_2968, x_2970);
    let x_2972 : f32 = u_xlat137;
    let x_2974 : f32 = u_xlat0.x;
    let x_2976 : f32 = u_xlat204;
    u_xlat1.x = ((x_2972 * x_2974) + -(x_2976));
    let x_2980 : f32 = u_xlat204;
    let x_2983 : vec4<f32> = u_xlat65;
    let x_2985 : vec2<f32> = (-(vec2<f32>(x_2980, x_2980)) + vec2<f32>(x_2983.x, x_2983.z));
    let x_2986 : vec4<f32> = u_xlat65;
    u_xlat65 = vec4<f32>(x_2985.x, x_2985.y, x_2986.z, x_2986.w);
    let x_2989 : f32 = u_xlat1.x;
    let x_2991 : f32 = u_xlat65.y;
    u_xlat1.y = min(x_2989, x_2991);
    let x_2995 : f32 = u_xlat1.y;
    let x_2998 : f32 = u_xlat65.y;
    u_xlat65.z = (-(x_2995) + x_2998);
    let x_3002 : f32 = u_xlat1.y;
    let x_3004 : f32 = u_xlat67.y;
    u_xlat1.x = (x_3002 * x_3004);
    let x_3007 : vec2<f32> = u_xlat68;
    let x_3008 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3007 + x_3008);
    let x_3011 : f32 = u_xlat70.x;
    let x_3013 : f32 = u_xlat65.x;
    u_xlat204 = min(x_3011, x_3013);
    let x_3016 : f32 = u_xlat2.x;
    let x_3018 : f32 = u_xlat0.x;
    let x_3020 : f32 = u_xlat204;
    u_xlat1.x = ((x_3016 * x_3018) + -(x_3020));
    let x_3024 : f32 = u_xlat204;
    let x_3027 : vec4<f32> = u_xlat65;
    let x_3029 : vec2<f32> = (-(vec2<f32>(x_3024, x_3024)) + vec2<f32>(x_3027.x, x_3027.z));
    let x_3030 : vec4<f32> = u_xlat65;
    u_xlat65 = vec4<f32>(x_3029.x, x_3029.y, x_3030.z, x_3030.w);
    let x_3033 : f32 = u_xlat1.x;
    let x_3035 : f32 = u_xlat65.y;
    u_xlat1.y = min(x_3033, x_3035);
    let x_3039 : f32 = u_xlat1.y;
    let x_3042 : f32 = u_xlat65.y;
    u_xlat65.z = (-(x_3039) + x_3042);
    let x_3046 : f32 = u_xlat1.y;
    let x_3048 : f32 = u_xlat67.z;
    u_xlat1.x = (x_3046 * x_3048);
    let x_3051 : vec2<f32> = u_xlat68;
    let x_3052 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3051 + x_3052);
    let x_3055 : f32 = u_xlat70.z;
    let x_3057 : f32 = u_xlat65.x;
    u_xlat204 = min(x_3055, x_3057);
    let x_3060 : f32 = u_xlat2.z;
    let x_3062 : f32 = u_xlat0.x;
    let x_3064 : f32 = u_xlat204;
    u_xlat1.x = ((x_3060 * x_3062) + -(x_3064));
    let x_3068 : f32 = u_xlat204;
    let x_3071 : vec4<f32> = u_xlat65;
    let x_3073 : vec2<f32> = (-(vec2<f32>(x_3068, x_3068)) + vec2<f32>(x_3071.x, x_3071.z));
    let x_3074 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3073.x, x_3073.y, x_3074.z);
    let x_3077 : f32 = u_xlat1.x;
    let x_3079 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3077, x_3079);
    let x_3083 : f32 = u_xlat1.y;
    let x_3086 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3083) + x_3086);
    let x_3090 : f32 = u_xlat1.y;
    let x_3092 : f32 = u_xlat67.w;
    u_xlat1.x = (x_3090 * x_3092);
    let x_3095 : vec2<f32> = u_xlat68;
    let x_3096 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3095 + x_3096);
    let x_3099 : f32 = u_xlat71.x;
    let x_3101 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3099, x_3101);
    let x_3104 : f32 = u_xlat3.x;
    let x_3106 : f32 = u_xlat0.x;
    let x_3108 : f32 = u_xlat204;
    u_xlat1.x = ((x_3104 * x_3106) + -(x_3108));
    let x_3112 : f32 = u_xlat204;
    let x_3115 : vec3<f32> = u_xlat2;
    let x_3117 : vec2<f32> = (-(vec2<f32>(x_3112, x_3112)) + vec2<f32>(x_3115.x, x_3115.z));
    let x_3118 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3117.x, x_3117.y, x_3118.z);
    let x_3121 : f32 = u_xlat1.x;
    let x_3123 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3121, x_3123);
    let x_3127 : f32 = u_xlat1.y;
    let x_3130 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3127) + x_3130);
    let x_3134 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat65 = (-(vec4<f32>(x_3134.y, x_3134.y, x_3134.y, x_3134.y)) + vec4<f32>(0.0390625f, 0.046875f, 0.0546875f, 0.0625f));
    let x_3143 : vec4<f32> = u_xlat65;
    let x_3145 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat65 = (x_3143 / vec4<f32>(x_3145.x, x_3145.x, x_3145.x, x_3145.x));
    let x_3148 : vec4<f32> = u_xlat65;
    u_xlat65 = exp2(x_3148);
    let x_3151 : f32 = u_xlat1.y;
    let x_3153 : f32 = u_xlat65.x;
    u_xlat1.x = (x_3151 * x_3153);
    let x_3156 : vec2<f32> = u_xlat68;
    let x_3157 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3156 + x_3157);
    let x_3160 : f32 = u_xlat71.z;
    let x_3162 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3160, x_3162);
    let x_3165 : f32 = u_xlat3.z;
    let x_3167 : f32 = u_xlat0.x;
    let x_3169 : f32 = u_xlat204;
    u_xlat1.x = ((x_3165 * x_3167) + -(x_3169));
    let x_3173 : f32 = u_xlat204;
    let x_3176 : vec3<f32> = u_xlat2;
    let x_3178 : vec2<f32> = (-(vec2<f32>(x_3173, x_3173)) + vec2<f32>(x_3176.x, x_3176.z));
    let x_3179 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3178.x, x_3178.y, x_3179.z);
    let x_3182 : f32 = u_xlat1.x;
    let x_3184 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3182, x_3184);
    let x_3188 : f32 = u_xlat1.y;
    let x_3191 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3188) + x_3191);
    let x_3195 : f32 = u_xlat1.y;
    let x_3197 : f32 = u_xlat65.y;
    u_xlat1.x = (x_3195 * x_3197);
    let x_3200 : vec2<f32> = u_xlat68;
    let x_3201 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3200 + x_3201);
    let x_3204 : f32 = u_xlat72.x;
    let x_3206 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3204, x_3206);
    let x_3209 : f32 = u_xlat4.x;
    let x_3211 : f32 = u_xlat0.x;
    let x_3213 : f32 = u_xlat204;
    u_xlat1.x = ((x_3209 * x_3211) + -(x_3213));
    let x_3217 : f32 = u_xlat204;
    let x_3220 : vec3<f32> = u_xlat2;
    let x_3222 : vec2<f32> = (-(vec2<f32>(x_3217, x_3217)) + vec2<f32>(x_3220.x, x_3220.z));
    let x_3223 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3222.x, x_3222.y, x_3223.z);
    let x_3226 : f32 = u_xlat1.x;
    let x_3228 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3226, x_3228);
    let x_3232 : f32 = u_xlat1.y;
    let x_3235 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3232) + x_3235);
    let x_3239 : f32 = u_xlat1.y;
    let x_3241 : f32 = u_xlat65.z;
    u_xlat1.x = (x_3239 * x_3241);
    let x_3244 : vec2<f32> = u_xlat68;
    let x_3245 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3244 + x_3245);
    let x_3248 : f32 = u_xlat72.z;
    let x_3250 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3248, x_3250);
    let x_3253 : f32 = u_xlat4.z;
    let x_3255 : f32 = u_xlat0.x;
    let x_3257 : f32 = u_xlat204;
    u_xlat1.x = ((x_3253 * x_3255) + -(x_3257));
    let x_3261 : f32 = u_xlat204;
    let x_3264 : vec3<f32> = u_xlat2;
    let x_3266 : vec2<f32> = (-(vec2<f32>(x_3261, x_3261)) + vec2<f32>(x_3264.x, x_3264.z));
    let x_3267 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3266.x, x_3266.y, x_3267.z);
    let x_3270 : f32 = u_xlat1.x;
    let x_3272 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3270, x_3272);
    let x_3276 : f32 = u_xlat1.y;
    let x_3279 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3276) + x_3279);
    let x_3283 : f32 = u_xlat1.y;
    let x_3285 : f32 = u_xlat65.w;
    u_xlat1.x = (x_3283 * x_3285);
    let x_3288 : vec2<f32> = u_xlat68;
    let x_3289 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3288 + x_3289);
    let x_3292 : f32 = u_xlat73.x;
    let x_3294 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3292, x_3294);
    let x_3297 : f32 = u_xlat5.x;
    let x_3299 : f32 = u_xlat0.x;
    let x_3301 : f32 = u_xlat204;
    u_xlat1.x = ((x_3297 * x_3299) + -(x_3301));
    let x_3305 : f32 = u_xlat204;
    let x_3308 : vec3<f32> = u_xlat2;
    let x_3310 : vec2<f32> = (-(vec2<f32>(x_3305, x_3305)) + vec2<f32>(x_3308.x, x_3308.z));
    let x_3311 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3310.x, x_3310.y, x_3311.z);
    let x_3314 : f32 = u_xlat1.x;
    let x_3316 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3314, x_3316);
    let x_3320 : f32 = u_xlat1.y;
    let x_3323 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3320) + x_3323);
    let x_3327 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_3327.y, x_3327.y, x_3327.y, x_3327.y)) + vec4<f32>(0.0703125f, 0.078125f, 0.0859375f, 0.09375f));
    let x_3336 : vec4<f32> = u_xlat3;
    let x_3338 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_3336 / vec4<f32>(x_3338.x, x_3338.x, x_3338.x, x_3338.x));
    let x_3341 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_3341);
    let x_3344 : f32 = u_xlat1.y;
    let x_3346 : f32 = u_xlat3.x;
    u_xlat1.x = (x_3344 * x_3346);
    let x_3349 : vec2<f32> = u_xlat68;
    let x_3350 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3349 + x_3350);
    let x_3353 : f32 = u_xlat73.z;
    let x_3355 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3353, x_3355);
    let x_3358 : f32 = u_xlat5.z;
    let x_3360 : f32 = u_xlat0.x;
    let x_3362 : f32 = u_xlat204;
    u_xlat1.x = ((x_3358 * x_3360) + -(x_3362));
    let x_3366 : f32 = u_xlat204;
    let x_3369 : vec3<f32> = u_xlat2;
    let x_3371 : vec2<f32> = (-(vec2<f32>(x_3366, x_3366)) + vec2<f32>(x_3369.x, x_3369.z));
    let x_3372 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3371.x, x_3371.y, x_3372.z);
    let x_3375 : f32 = u_xlat1.x;
    let x_3377 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3375, x_3377);
    let x_3381 : f32 = u_xlat1.y;
    let x_3384 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3381) + x_3384);
    let x_3388 : f32 = u_xlat1.y;
    let x_3390 : f32 = u_xlat3.y;
    u_xlat1.x = (x_3388 * x_3390);
    let x_3393 : vec2<f32> = u_xlat68;
    let x_3394 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3393 + x_3394);
    let x_3397 : f32 = u_xlat74.x;
    let x_3399 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3397, x_3399);
    let x_3402 : f32 = u_xlat6.x;
    let x_3404 : f32 = u_xlat0.x;
    let x_3406 : f32 = u_xlat204;
    u_xlat1.x = ((x_3402 * x_3404) + -(x_3406));
    let x_3410 : f32 = u_xlat204;
    let x_3413 : vec3<f32> = u_xlat2;
    let x_3415 : vec2<f32> = (-(vec2<f32>(x_3410, x_3410)) + vec2<f32>(x_3413.x, x_3413.z));
    let x_3416 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3415.x, x_3415.y, x_3416.z);
    let x_3419 : f32 = u_xlat1.x;
    let x_3421 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3419, x_3421);
    let x_3425 : f32 = u_xlat1.y;
    let x_3428 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3425) + x_3428);
    let x_3432 : f32 = u_xlat1.y;
    let x_3434 : f32 = u_xlat3.z;
    u_xlat1.x = (x_3432 * x_3434);
    let x_3437 : vec2<f32> = u_xlat68;
    let x_3438 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3437 + x_3438);
    let x_3441 : f32 = u_xlat74.z;
    let x_3443 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3441, x_3443);
    let x_3446 : f32 = u_xlat6.z;
    let x_3448 : f32 = u_xlat0.x;
    let x_3450 : f32 = u_xlat204;
    u_xlat1.x = ((x_3446 * x_3448) + -(x_3450));
    let x_3454 : f32 = u_xlat204;
    let x_3457 : vec3<f32> = u_xlat2;
    let x_3459 : vec2<f32> = (-(vec2<f32>(x_3454, x_3454)) + vec2<f32>(x_3457.x, x_3457.z));
    let x_3460 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3459.x, x_3459.y, x_3460.z);
    let x_3463 : f32 = u_xlat1.x;
    let x_3465 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3463, x_3465);
    let x_3469 : f32 = u_xlat1.y;
    let x_3472 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3469) + x_3472);
    let x_3476 : f32 = u_xlat1.y;
    let x_3478 : f32 = u_xlat3.w;
    u_xlat1.x = (x_3476 * x_3478);
    let x_3481 : vec2<f32> = u_xlat68;
    let x_3482 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3481 + x_3482);
    let x_3485 : f32 = u_xlat75.x;
    let x_3487 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3485, x_3487);
    let x_3490 : f32 = u_xlat7.x;
    let x_3492 : f32 = u_xlat0.x;
    let x_3494 : f32 = u_xlat204;
    u_xlat1.x = ((x_3490 * x_3492) + -(x_3494));
    let x_3498 : f32 = u_xlat204;
    let x_3501 : vec3<f32> = u_xlat2;
    let x_3503 : vec2<f32> = (-(vec2<f32>(x_3498, x_3498)) + vec2<f32>(x_3501.x, x_3501.z));
    let x_3504 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3503.x, x_3503.y, x_3504.z);
    let x_3507 : f32 = u_xlat1.x;
    let x_3509 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3507, x_3509);
    let x_3513 : f32 = u_xlat1.y;
    let x_3516 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3513) + x_3516);
    let x_3520 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_3520.y, x_3520.y, x_3520.y, x_3520.y)) + vec4<f32>(0.1015625f, 0.109375f, 0.1171875f, 0.125f));
    let x_3529 : vec4<f32> = u_xlat3;
    let x_3531 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_3529 / vec4<f32>(x_3531.x, x_3531.x, x_3531.x, x_3531.x));
    let x_3534 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_3534);
    let x_3537 : f32 = u_xlat1.y;
    let x_3539 : f32 = u_xlat3.x;
    u_xlat1.x = (x_3537 * x_3539);
    let x_3542 : vec2<f32> = u_xlat68;
    let x_3543 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3542 + x_3543);
    let x_3546 : f32 = u_xlat75.z;
    let x_3548 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3546, x_3548);
    let x_3551 : f32 = u_xlat7.z;
    let x_3553 : f32 = u_xlat0.x;
    let x_3555 : f32 = u_xlat204;
    u_xlat1.x = ((x_3551 * x_3553) + -(x_3555));
    let x_3559 : f32 = u_xlat204;
    let x_3562 : vec3<f32> = u_xlat2;
    let x_3564 : vec2<f32> = (-(vec2<f32>(x_3559, x_3559)) + vec2<f32>(x_3562.x, x_3562.z));
    let x_3565 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3564.x, x_3564.y, x_3565.z);
    let x_3568 : f32 = u_xlat1.x;
    let x_3570 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3568, x_3570);
    let x_3574 : f32 = u_xlat1.y;
    let x_3577 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3574) + x_3577);
    let x_3581 : f32 = u_xlat1.y;
    let x_3583 : f32 = u_xlat3.y;
    u_xlat1.x = (x_3581 * x_3583);
    let x_3586 : vec2<f32> = u_xlat68;
    let x_3587 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3586 + x_3587);
    let x_3590 : f32 = u_xlat76.x;
    let x_3592 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3590, x_3592);
    let x_3595 : f32 = u_xlat8.x;
    let x_3597 : f32 = u_xlat0.x;
    let x_3599 : f32 = u_xlat204;
    u_xlat1.x = ((x_3595 * x_3597) + -(x_3599));
    let x_3603 : f32 = u_xlat204;
    let x_3606 : vec3<f32> = u_xlat2;
    let x_3608 : vec2<f32> = (-(vec2<f32>(x_3603, x_3603)) + vec2<f32>(x_3606.x, x_3606.z));
    let x_3609 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3608.x, x_3608.y, x_3609.z);
    let x_3612 : f32 = u_xlat1.x;
    let x_3614 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3612, x_3614);
    let x_3618 : f32 = u_xlat1.y;
    let x_3621 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3618) + x_3621);
    let x_3625 : f32 = u_xlat1.y;
    let x_3627 : f32 = u_xlat3.z;
    u_xlat1.x = (x_3625 * x_3627);
    let x_3630 : vec2<f32> = u_xlat68;
    let x_3631 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3630 + x_3631);
    let x_3634 : f32 = u_xlat76.z;
    let x_3636 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3634, x_3636);
    let x_3639 : f32 = u_xlat8.z;
    let x_3641 : f32 = u_xlat0.x;
    let x_3643 : f32 = u_xlat204;
    u_xlat1.x = ((x_3639 * x_3641) + -(x_3643));
    let x_3647 : f32 = u_xlat204;
    let x_3650 : vec3<f32> = u_xlat2;
    let x_3652 : vec2<f32> = (-(vec2<f32>(x_3647, x_3647)) + vec2<f32>(x_3650.x, x_3650.z));
    let x_3653 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3652.x, x_3652.y, x_3653.z);
    let x_3656 : f32 = u_xlat1.x;
    let x_3658 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3656, x_3658);
    let x_3662 : f32 = u_xlat1.y;
    let x_3665 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3662) + x_3665);
    let x_3669 : f32 = u_xlat1.y;
    let x_3671 : f32 = u_xlat3.w;
    u_xlat1.x = (x_3669 * x_3671);
    let x_3674 : vec2<f32> = u_xlat68;
    let x_3675 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3674 + x_3675);
    let x_3678 : f32 = u_xlat77.x;
    let x_3680 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3678, x_3680);
    let x_3683 : f32 = u_xlat9.x;
    let x_3685 : f32 = u_xlat0.x;
    let x_3687 : f32 = u_xlat204;
    u_xlat1.x = ((x_3683 * x_3685) + -(x_3687));
    let x_3691 : f32 = u_xlat204;
    let x_3694 : vec3<f32> = u_xlat2;
    let x_3696 : vec2<f32> = (-(vec2<f32>(x_3691, x_3691)) + vec2<f32>(x_3694.x, x_3694.z));
    let x_3697 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3696.x, x_3696.y, x_3697.z);
    let x_3700 : f32 = u_xlat1.x;
    let x_3702 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3700, x_3702);
    let x_3706 : f32 = u_xlat1.y;
    let x_3709 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3706) + x_3709);
    let x_3713 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_3713.y, x_3713.y, x_3713.y, x_3713.y)) + vec4<f32>(0.1328125f, 0.140625f, 0.1484375f, 0.15625f));
    let x_3722 : vec4<f32> = u_xlat3;
    let x_3724 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_3722 / vec4<f32>(x_3724.x, x_3724.x, x_3724.x, x_3724.x));
    let x_3727 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_3727);
    let x_3730 : f32 = u_xlat1.y;
    let x_3732 : f32 = u_xlat3.x;
    u_xlat1.x = (x_3730 * x_3732);
    let x_3735 : vec2<f32> = u_xlat68;
    let x_3736 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3735 + x_3736);
    let x_3739 : f32 = u_xlat77.z;
    let x_3741 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3739, x_3741);
    let x_3744 : f32 = u_xlat9.z;
    let x_3746 : f32 = u_xlat0.x;
    let x_3748 : f32 = u_xlat204;
    u_xlat1.x = ((x_3744 * x_3746) + -(x_3748));
    let x_3752 : f32 = u_xlat204;
    let x_3755 : vec3<f32> = u_xlat2;
    let x_3757 : vec2<f32> = (-(vec2<f32>(x_3752, x_3752)) + vec2<f32>(x_3755.x, x_3755.z));
    let x_3758 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3757.x, x_3757.y, x_3758.z);
    let x_3761 : f32 = u_xlat1.x;
    let x_3763 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3761, x_3763);
    let x_3767 : f32 = u_xlat1.y;
    let x_3770 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3767) + x_3770);
    let x_3774 : f32 = u_xlat1.y;
    let x_3776 : f32 = u_xlat3.y;
    u_xlat1.x = (x_3774 * x_3776);
    let x_3779 : vec2<f32> = u_xlat68;
    let x_3780 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3779 + x_3780);
    let x_3783 : f32 = u_xlat78.x;
    let x_3785 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3783, x_3785);
    let x_3788 : f32 = u_xlat10.x;
    let x_3790 : f32 = u_xlat0.x;
    let x_3792 : f32 = u_xlat204;
    u_xlat1.x = ((x_3788 * x_3790) + -(x_3792));
    let x_3796 : f32 = u_xlat204;
    let x_3799 : vec3<f32> = u_xlat2;
    let x_3801 : vec2<f32> = (-(vec2<f32>(x_3796, x_3796)) + vec2<f32>(x_3799.x, x_3799.z));
    let x_3802 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3801.x, x_3801.y, x_3802.z);
    let x_3805 : f32 = u_xlat1.x;
    let x_3807 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3805, x_3807);
    let x_3811 : f32 = u_xlat1.y;
    let x_3814 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3811) + x_3814);
    let x_3818 : f32 = u_xlat1.y;
    let x_3820 : f32 = u_xlat3.z;
    u_xlat1.x = (x_3818 * x_3820);
    let x_3823 : vec2<f32> = u_xlat68;
    let x_3824 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3823 + x_3824);
    let x_3827 : f32 = u_xlat78.z;
    let x_3829 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3827, x_3829);
    let x_3832 : f32 = u_xlat10.z;
    let x_3834 : f32 = u_xlat0.x;
    let x_3836 : f32 = u_xlat204;
    u_xlat1.x = ((x_3832 * x_3834) + -(x_3836));
    let x_3840 : f32 = u_xlat204;
    let x_3843 : vec3<f32> = u_xlat2;
    let x_3845 : vec2<f32> = (-(vec2<f32>(x_3840, x_3840)) + vec2<f32>(x_3843.x, x_3843.z));
    let x_3846 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3845.x, x_3845.y, x_3846.z);
    let x_3849 : f32 = u_xlat1.x;
    let x_3851 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3849, x_3851);
    let x_3855 : f32 = u_xlat1.y;
    let x_3858 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3855) + x_3858);
    let x_3862 : f32 = u_xlat1.y;
    let x_3864 : f32 = u_xlat3.w;
    u_xlat1.x = (x_3862 * x_3864);
    let x_3867 : vec2<f32> = u_xlat68;
    let x_3868 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3867 + x_3868);
    let x_3871 : f32 = u_xlat79.x;
    let x_3873 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3871, x_3873);
    let x_3876 : f32 = u_xlat11.x;
    let x_3878 : f32 = u_xlat0.x;
    let x_3880 : f32 = u_xlat204;
    u_xlat1.x = ((x_3876 * x_3878) + -(x_3880));
    let x_3884 : f32 = u_xlat204;
    let x_3887 : vec3<f32> = u_xlat2;
    let x_3889 : vec2<f32> = (-(vec2<f32>(x_3884, x_3884)) + vec2<f32>(x_3887.x, x_3887.z));
    let x_3890 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3889.x, x_3889.y, x_3890.z);
    let x_3893 : f32 = u_xlat1.x;
    let x_3895 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3893, x_3895);
    let x_3899 : f32 = u_xlat1.y;
    let x_3902 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3899) + x_3902);
    let x_3906 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_3906.y, x_3906.y, x_3906.y, x_3906.y)) + vec4<f32>(0.1640625f, 0.171875f, 0.1796875f, 0.1875f));
    let x_3915 : vec4<f32> = u_xlat3;
    let x_3917 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_3915 / vec4<f32>(x_3917.x, x_3917.x, x_3917.x, x_3917.x));
    let x_3920 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_3920);
    let x_3923 : f32 = u_xlat1.y;
    let x_3925 : f32 = u_xlat3.x;
    u_xlat1.x = (x_3923 * x_3925);
    let x_3928 : vec2<f32> = u_xlat68;
    let x_3929 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3928 + x_3929);
    let x_3932 : f32 = u_xlat79.z;
    let x_3934 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3932, x_3934);
    let x_3937 : f32 = u_xlat11.z;
    let x_3939 : f32 = u_xlat0.x;
    let x_3941 : f32 = u_xlat204;
    u_xlat1.x = ((x_3937 * x_3939) + -(x_3941));
    let x_3945 : f32 = u_xlat204;
    let x_3948 : vec3<f32> = u_xlat2;
    let x_3950 : vec2<f32> = (-(vec2<f32>(x_3945, x_3945)) + vec2<f32>(x_3948.x, x_3948.z));
    let x_3951 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3950.x, x_3950.y, x_3951.z);
    let x_3954 : f32 = u_xlat1.x;
    let x_3956 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3954, x_3956);
    let x_3960 : f32 = u_xlat1.y;
    let x_3963 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_3960) + x_3963);
    let x_3967 : f32 = u_xlat1.y;
    let x_3969 : f32 = u_xlat3.y;
    u_xlat1.x = (x_3967 * x_3969);
    let x_3972 : vec2<f32> = u_xlat68;
    let x_3973 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_3972 + x_3973);
    let x_3976 : f32 = u_xlat80.x;
    let x_3978 : f32 = u_xlat2.x;
    u_xlat204 = min(x_3976, x_3978);
    let x_3981 : f32 = u_xlat12.x;
    let x_3983 : f32 = u_xlat0.x;
    let x_3985 : f32 = u_xlat204;
    u_xlat1.x = ((x_3981 * x_3983) + -(x_3985));
    let x_3989 : f32 = u_xlat204;
    let x_3992 : vec3<f32> = u_xlat2;
    let x_3994 : vec2<f32> = (-(vec2<f32>(x_3989, x_3989)) + vec2<f32>(x_3992.x, x_3992.z));
    let x_3995 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_3994.x, x_3994.y, x_3995.z);
    let x_3998 : f32 = u_xlat1.x;
    let x_4000 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_3998, x_4000);
    let x_4004 : f32 = u_xlat1.y;
    let x_4007 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4004) + x_4007);
    let x_4011 : f32 = u_xlat1.y;
    let x_4013 : f32 = u_xlat3.z;
    u_xlat1.x = (x_4011 * x_4013);
    let x_4016 : vec2<f32> = u_xlat68;
    let x_4017 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4016 + x_4017);
    let x_4020 : f32 = u_xlat80.z;
    let x_4022 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4020, x_4022);
    let x_4025 : f32 = u_xlat12.z;
    let x_4027 : f32 = u_xlat0.x;
    let x_4029 : f32 = u_xlat204;
    u_xlat1.x = ((x_4025 * x_4027) + -(x_4029));
    let x_4033 : f32 = u_xlat204;
    let x_4036 : vec3<f32> = u_xlat2;
    let x_4038 : vec2<f32> = (-(vec2<f32>(x_4033, x_4033)) + vec2<f32>(x_4036.x, x_4036.z));
    let x_4039 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4038.x, x_4038.y, x_4039.z);
    let x_4042 : f32 = u_xlat1.x;
    let x_4044 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4042, x_4044);
    let x_4048 : f32 = u_xlat1.y;
    let x_4051 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4048) + x_4051);
    let x_4055 : f32 = u_xlat1.y;
    let x_4057 : f32 = u_xlat3.w;
    u_xlat1.x = (x_4055 * x_4057);
    let x_4060 : vec2<f32> = u_xlat68;
    let x_4061 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4060 + x_4061);
    let x_4064 : f32 = u_xlat81.x;
    let x_4066 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4064, x_4066);
    let x_4069 : f32 = u_xlat13.x;
    let x_4071 : f32 = u_xlat0.x;
    let x_4073 : f32 = u_xlat204;
    u_xlat1.x = ((x_4069 * x_4071) + -(x_4073));
    let x_4077 : f32 = u_xlat204;
    let x_4080 : vec3<f32> = u_xlat2;
    let x_4082 : vec2<f32> = (-(vec2<f32>(x_4077, x_4077)) + vec2<f32>(x_4080.x, x_4080.z));
    let x_4083 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4082.x, x_4082.y, x_4083.z);
    let x_4086 : f32 = u_xlat1.x;
    let x_4088 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4086, x_4088);
    let x_4092 : f32 = u_xlat1.y;
    let x_4095 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4092) + x_4095);
    let x_4099 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_4099.y, x_4099.y, x_4099.y, x_4099.y)) + vec4<f32>(0.1953125f, 0.203125f, 0.2109375f, 0.21875f));
    let x_4108 : vec4<f32> = u_xlat3;
    let x_4110 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_4108 / vec4<f32>(x_4110.x, x_4110.x, x_4110.x, x_4110.x));
    let x_4113 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_4113);
    let x_4116 : f32 = u_xlat1.y;
    let x_4118 : f32 = u_xlat3.x;
    u_xlat1.x = (x_4116 * x_4118);
    let x_4121 : vec2<f32> = u_xlat68;
    let x_4122 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4121 + x_4122);
    let x_4125 : f32 = u_xlat81.z;
    let x_4127 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4125, x_4127);
    let x_4130 : f32 = u_xlat13.z;
    let x_4132 : f32 = u_xlat0.x;
    let x_4134 : f32 = u_xlat204;
    u_xlat1.x = ((x_4130 * x_4132) + -(x_4134));
    let x_4138 : f32 = u_xlat204;
    let x_4141 : vec3<f32> = u_xlat2;
    let x_4143 : vec2<f32> = (-(vec2<f32>(x_4138, x_4138)) + vec2<f32>(x_4141.x, x_4141.z));
    let x_4144 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4143.x, x_4143.y, x_4144.z);
    let x_4147 : f32 = u_xlat1.x;
    let x_4149 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4147, x_4149);
    let x_4153 : f32 = u_xlat1.y;
    let x_4156 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4153) + x_4156);
    let x_4160 : f32 = u_xlat1.y;
    let x_4162 : f32 = u_xlat3.y;
    u_xlat1.x = (x_4160 * x_4162);
    let x_4165 : vec2<f32> = u_xlat68;
    let x_4166 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4165 + x_4166);
    let x_4169 : f32 = u_xlat82.x;
    let x_4171 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4169, x_4171);
    let x_4174 : f32 = u_xlat14.x;
    let x_4176 : f32 = u_xlat0.x;
    let x_4178 : f32 = u_xlat204;
    u_xlat1.x = ((x_4174 * x_4176) + -(x_4178));
    let x_4182 : f32 = u_xlat204;
    let x_4185 : vec3<f32> = u_xlat2;
    let x_4187 : vec2<f32> = (-(vec2<f32>(x_4182, x_4182)) + vec2<f32>(x_4185.x, x_4185.z));
    let x_4188 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4187.x, x_4187.y, x_4188.z);
    let x_4191 : f32 = u_xlat1.x;
    let x_4193 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4191, x_4193);
    let x_4197 : f32 = u_xlat1.y;
    let x_4200 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4197) + x_4200);
    let x_4204 : f32 = u_xlat1.y;
    let x_4206 : f32 = u_xlat3.z;
    u_xlat1.x = (x_4204 * x_4206);
    let x_4209 : vec2<f32> = u_xlat68;
    let x_4210 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4209 + x_4210);
    let x_4213 : f32 = u_xlat82.z;
    let x_4215 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4213, x_4215);
    let x_4218 : f32 = u_xlat14.z;
    let x_4220 : f32 = u_xlat0.x;
    let x_4222 : f32 = u_xlat204;
    u_xlat1.x = ((x_4218 * x_4220) + -(x_4222));
    let x_4226 : f32 = u_xlat204;
    let x_4229 : vec3<f32> = u_xlat2;
    let x_4231 : vec2<f32> = (-(vec2<f32>(x_4226, x_4226)) + vec2<f32>(x_4229.x, x_4229.z));
    let x_4232 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4231.x, x_4231.y, x_4232.z);
    let x_4235 : f32 = u_xlat1.x;
    let x_4237 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4235, x_4237);
    let x_4241 : f32 = u_xlat1.y;
    let x_4244 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4241) + x_4244);
    let x_4248 : f32 = u_xlat1.y;
    let x_4250 : f32 = u_xlat3.w;
    u_xlat1.x = (x_4248 * x_4250);
    let x_4253 : vec2<f32> = u_xlat68;
    let x_4254 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4253 + x_4254);
    let x_4257 : f32 = u_xlat83.x;
    let x_4259 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4257, x_4259);
    let x_4262 : f32 = u_xlat15.x;
    let x_4264 : f32 = u_xlat0.x;
    let x_4266 : f32 = u_xlat204;
    u_xlat1.x = ((x_4262 * x_4264) + -(x_4266));
    let x_4270 : f32 = u_xlat204;
    let x_4273 : vec3<f32> = u_xlat2;
    let x_4275 : vec2<f32> = (-(vec2<f32>(x_4270, x_4270)) + vec2<f32>(x_4273.x, x_4273.z));
    let x_4276 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4275.x, x_4275.y, x_4276.z);
    let x_4279 : f32 = u_xlat1.x;
    let x_4281 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4279, x_4281);
    let x_4285 : f32 = u_xlat1.y;
    let x_4288 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4285) + x_4288);
    let x_4292 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_4292.y, x_4292.y, x_4292.y, x_4292.y)) + vec4<f32>(0.2265625f, 0.234375f, 0.2421875f, 0.25f));
    let x_4301 : vec4<f32> = u_xlat3;
    let x_4303 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_4301 / vec4<f32>(x_4303.x, x_4303.x, x_4303.x, x_4303.x));
    let x_4306 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_4306);
    let x_4309 : f32 = u_xlat1.y;
    let x_4311 : f32 = u_xlat3.x;
    u_xlat1.x = (x_4309 * x_4311);
    let x_4314 : vec2<f32> = u_xlat68;
    let x_4315 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4314 + x_4315);
    let x_4318 : f32 = u_xlat83.z;
    let x_4320 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4318, x_4320);
    let x_4323 : f32 = u_xlat15.z;
    let x_4325 : f32 = u_xlat0.x;
    let x_4327 : f32 = u_xlat204;
    u_xlat1.x = ((x_4323 * x_4325) + -(x_4327));
    let x_4331 : f32 = u_xlat204;
    let x_4334 : vec3<f32> = u_xlat2;
    let x_4336 : vec2<f32> = (-(vec2<f32>(x_4331, x_4331)) + vec2<f32>(x_4334.x, x_4334.z));
    let x_4337 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4336.x, x_4336.y, x_4337.z);
    let x_4340 : f32 = u_xlat1.x;
    let x_4342 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4340, x_4342);
    let x_4346 : f32 = u_xlat1.y;
    let x_4349 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4346) + x_4349);
    let x_4353 : f32 = u_xlat1.y;
    let x_4355 : f32 = u_xlat3.y;
    u_xlat1.x = (x_4353 * x_4355);
    let x_4358 : vec2<f32> = u_xlat68;
    let x_4359 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4358 + x_4359);
    let x_4362 : f32 = u_xlat84.x;
    let x_4364 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4362, x_4364);
    let x_4367 : f32 = u_xlat16.x;
    let x_4369 : f32 = u_xlat0.x;
    let x_4371 : f32 = u_xlat204;
    u_xlat1.x = ((x_4367 * x_4369) + -(x_4371));
    let x_4375 : f32 = u_xlat204;
    let x_4378 : vec3<f32> = u_xlat2;
    let x_4380 : vec2<f32> = (-(vec2<f32>(x_4375, x_4375)) + vec2<f32>(x_4378.x, x_4378.z));
    let x_4381 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4380.x, x_4380.y, x_4381.z);
    let x_4384 : f32 = u_xlat1.x;
    let x_4386 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4384, x_4386);
    let x_4390 : f32 = u_xlat1.y;
    let x_4393 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4390) + x_4393);
    let x_4397 : f32 = u_xlat1.y;
    let x_4399 : f32 = u_xlat3.z;
    u_xlat1.x = (x_4397 * x_4399);
    let x_4402 : vec2<f32> = u_xlat68;
    let x_4403 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4402 + x_4403);
    let x_4406 : f32 = u_xlat84.z;
    let x_4408 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4406, x_4408);
    let x_4411 : f32 = u_xlat16.z;
    let x_4413 : f32 = u_xlat0.x;
    let x_4415 : f32 = u_xlat204;
    u_xlat1.x = ((x_4411 * x_4413) + -(x_4415));
    let x_4419 : f32 = u_xlat204;
    let x_4422 : vec3<f32> = u_xlat2;
    let x_4424 : vec2<f32> = (-(vec2<f32>(x_4419, x_4419)) + vec2<f32>(x_4422.x, x_4422.z));
    let x_4425 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4424.x, x_4424.y, x_4425.z);
    let x_4428 : f32 = u_xlat1.x;
    let x_4430 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4428, x_4430);
    let x_4434 : f32 = u_xlat1.y;
    let x_4437 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4434) + x_4437);
    let x_4441 : f32 = u_xlat1.y;
    let x_4443 : f32 = u_xlat3.w;
    u_xlat1.x = (x_4441 * x_4443);
    let x_4446 : vec2<f32> = u_xlat68;
    let x_4447 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4446 + x_4447);
    let x_4450 : f32 = u_xlat85.x;
    let x_4452 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4450, x_4452);
    let x_4455 : f32 = u_xlat17.x;
    let x_4457 : f32 = u_xlat0.x;
    let x_4459 : f32 = u_xlat204;
    u_xlat1.x = ((x_4455 * x_4457) + -(x_4459));
    let x_4463 : f32 = u_xlat204;
    let x_4466 : vec3<f32> = u_xlat2;
    let x_4468 : vec2<f32> = (-(vec2<f32>(x_4463, x_4463)) + vec2<f32>(x_4466.x, x_4466.z));
    let x_4469 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4468.x, x_4468.y, x_4469.z);
    let x_4472 : f32 = u_xlat1.x;
    let x_4474 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4472, x_4474);
    let x_4478 : f32 = u_xlat1.y;
    let x_4481 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4478) + x_4481);
    let x_4485 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_4485.y, x_4485.y, x_4485.y, x_4485.y)) + vec4<f32>(0.2578125f, 0.265625f, 0.2734375f, 0.28125f));
    let x_4494 : vec4<f32> = u_xlat3;
    let x_4496 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_4494 / vec4<f32>(x_4496.x, x_4496.x, x_4496.x, x_4496.x));
    let x_4499 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_4499);
    let x_4502 : f32 = u_xlat1.y;
    let x_4504 : f32 = u_xlat3.x;
    u_xlat1.x = (x_4502 * x_4504);
    let x_4507 : vec2<f32> = u_xlat68;
    let x_4508 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4507 + x_4508);
    let x_4511 : f32 = u_xlat85.z;
    let x_4513 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4511, x_4513);
    let x_4516 : f32 = u_xlat17.z;
    let x_4518 : f32 = u_xlat0.x;
    let x_4520 : f32 = u_xlat204;
    u_xlat1.x = ((x_4516 * x_4518) + -(x_4520));
    let x_4524 : f32 = u_xlat204;
    let x_4527 : vec3<f32> = u_xlat2;
    let x_4529 : vec2<f32> = (-(vec2<f32>(x_4524, x_4524)) + vec2<f32>(x_4527.x, x_4527.z));
    let x_4530 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4529.x, x_4529.y, x_4530.z);
    let x_4533 : f32 = u_xlat1.x;
    let x_4535 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4533, x_4535);
    let x_4539 : f32 = u_xlat1.y;
    let x_4542 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4539) + x_4542);
    let x_4546 : f32 = u_xlat1.y;
    let x_4548 : f32 = u_xlat3.y;
    u_xlat1.x = (x_4546 * x_4548);
    let x_4551 : vec2<f32> = u_xlat68;
    let x_4552 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4551 + x_4552);
    let x_4555 : f32 = u_xlat86.x;
    let x_4557 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4555, x_4557);
    let x_4560 : f32 = u_xlat18.x;
    let x_4562 : f32 = u_xlat0.x;
    let x_4564 : f32 = u_xlat204;
    u_xlat1.x = ((x_4560 * x_4562) + -(x_4564));
    let x_4568 : f32 = u_xlat204;
    let x_4571 : vec3<f32> = u_xlat2;
    let x_4573 : vec2<f32> = (-(vec2<f32>(x_4568, x_4568)) + vec2<f32>(x_4571.x, x_4571.z));
    let x_4574 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4573.x, x_4573.y, x_4574.z);
    let x_4577 : f32 = u_xlat1.x;
    let x_4579 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4577, x_4579);
    let x_4583 : f32 = u_xlat1.y;
    let x_4586 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4583) + x_4586);
    let x_4590 : f32 = u_xlat1.y;
    let x_4592 : f32 = u_xlat3.z;
    u_xlat1.x = (x_4590 * x_4592);
    let x_4595 : vec2<f32> = u_xlat68;
    let x_4596 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4595 + x_4596);
    let x_4599 : f32 = u_xlat86.z;
    let x_4601 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4599, x_4601);
    let x_4604 : f32 = u_xlat18.z;
    let x_4606 : f32 = u_xlat0.x;
    let x_4608 : f32 = u_xlat204;
    u_xlat1.x = ((x_4604 * x_4606) + -(x_4608));
    let x_4612 : f32 = u_xlat204;
    let x_4615 : vec3<f32> = u_xlat2;
    let x_4617 : vec2<f32> = (-(vec2<f32>(x_4612, x_4612)) + vec2<f32>(x_4615.x, x_4615.z));
    let x_4618 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4617.x, x_4617.y, x_4618.z);
    let x_4621 : f32 = u_xlat1.x;
    let x_4623 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4621, x_4623);
    let x_4627 : f32 = u_xlat1.y;
    let x_4630 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4627) + x_4630);
    let x_4634 : f32 = u_xlat1.y;
    let x_4636 : f32 = u_xlat3.w;
    u_xlat1.x = (x_4634 * x_4636);
    let x_4639 : vec2<f32> = u_xlat68;
    let x_4640 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4639 + x_4640);
    let x_4643 : f32 = u_xlat87.x;
    let x_4645 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4643, x_4645);
    let x_4648 : f32 = u_xlat19.x;
    let x_4650 : f32 = u_xlat0.x;
    let x_4652 : f32 = u_xlat204;
    u_xlat1.x = ((x_4648 * x_4650) + -(x_4652));
    let x_4656 : f32 = u_xlat204;
    let x_4659 : vec3<f32> = u_xlat2;
    let x_4661 : vec2<f32> = (-(vec2<f32>(x_4656, x_4656)) + vec2<f32>(x_4659.x, x_4659.z));
    let x_4662 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4661.x, x_4661.y, x_4662.z);
    let x_4665 : f32 = u_xlat1.x;
    let x_4667 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4665, x_4667);
    let x_4671 : f32 = u_xlat1.y;
    let x_4674 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4671) + x_4674);
    let x_4678 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_4678.y, x_4678.y, x_4678.y, x_4678.y)) + vec4<f32>(0.2890625f, 0.296875f, 0.3046875f, 0.3125f));
    let x_4687 : vec4<f32> = u_xlat3;
    let x_4689 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_4687 / vec4<f32>(x_4689.x, x_4689.x, x_4689.x, x_4689.x));
    let x_4692 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_4692);
    let x_4695 : f32 = u_xlat1.y;
    let x_4697 : f32 = u_xlat3.x;
    u_xlat1.x = (x_4695 * x_4697);
    let x_4700 : vec2<f32> = u_xlat68;
    let x_4701 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4700 + x_4701);
    let x_4704 : f32 = u_xlat87.z;
    let x_4706 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4704, x_4706);
    let x_4709 : f32 = u_xlat19.z;
    let x_4711 : f32 = u_xlat0.x;
    let x_4713 : f32 = u_xlat204;
    u_xlat1.x = ((x_4709 * x_4711) + -(x_4713));
    let x_4717 : f32 = u_xlat204;
    let x_4720 : vec3<f32> = u_xlat2;
    let x_4722 : vec2<f32> = (-(vec2<f32>(x_4717, x_4717)) + vec2<f32>(x_4720.x, x_4720.z));
    let x_4723 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4722.x, x_4722.y, x_4723.z);
    let x_4726 : f32 = u_xlat1.x;
    let x_4728 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4726, x_4728);
    let x_4732 : f32 = u_xlat1.y;
    let x_4735 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4732) + x_4735);
    let x_4739 : f32 = u_xlat1.y;
    let x_4741 : f32 = u_xlat3.y;
    u_xlat1.x = (x_4739 * x_4741);
    let x_4744 : vec2<f32> = u_xlat68;
    let x_4745 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4744 + x_4745);
    let x_4748 : f32 = u_xlat88.x;
    let x_4750 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4748, x_4750);
    let x_4753 : f32 = u_xlat20.x;
    let x_4755 : f32 = u_xlat0.x;
    let x_4757 : f32 = u_xlat204;
    u_xlat1.x = ((x_4753 * x_4755) + -(x_4757));
    let x_4761 : f32 = u_xlat204;
    let x_4764 : vec3<f32> = u_xlat2;
    let x_4766 : vec2<f32> = (-(vec2<f32>(x_4761, x_4761)) + vec2<f32>(x_4764.x, x_4764.z));
    let x_4767 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4766.x, x_4766.y, x_4767.z);
    let x_4770 : f32 = u_xlat1.x;
    let x_4772 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4770, x_4772);
    let x_4776 : f32 = u_xlat1.y;
    let x_4779 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4776) + x_4779);
    let x_4783 : f32 = u_xlat1.y;
    let x_4785 : f32 = u_xlat3.z;
    u_xlat1.x = (x_4783 * x_4785);
    let x_4788 : vec2<f32> = u_xlat68;
    let x_4789 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4788 + x_4789);
    let x_4792 : f32 = u_xlat88.z;
    let x_4794 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4792, x_4794);
    let x_4797 : f32 = u_xlat20.z;
    let x_4799 : f32 = u_xlat0.x;
    let x_4801 : f32 = u_xlat204;
    u_xlat1.x = ((x_4797 * x_4799) + -(x_4801));
    let x_4805 : f32 = u_xlat204;
    let x_4808 : vec3<f32> = u_xlat2;
    let x_4810 : vec2<f32> = (-(vec2<f32>(x_4805, x_4805)) + vec2<f32>(x_4808.x, x_4808.z));
    let x_4811 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4810.x, x_4810.y, x_4811.z);
    let x_4814 : f32 = u_xlat1.x;
    let x_4816 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4814, x_4816);
    let x_4820 : f32 = u_xlat1.y;
    let x_4823 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4820) + x_4823);
    let x_4827 : f32 = u_xlat1.y;
    let x_4829 : f32 = u_xlat3.w;
    u_xlat1.x = (x_4827 * x_4829);
    let x_4832 : vec2<f32> = u_xlat68;
    let x_4833 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4832 + x_4833);
    let x_4836 : f32 = u_xlat89.x;
    let x_4838 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4836, x_4838);
    let x_4841 : f32 = u_xlat21.x;
    let x_4843 : f32 = u_xlat0.x;
    let x_4845 : f32 = u_xlat204;
    u_xlat1.x = ((x_4841 * x_4843) + -(x_4845));
    let x_4849 : f32 = u_xlat204;
    let x_4852 : vec3<f32> = u_xlat2;
    let x_4854 : vec2<f32> = (-(vec2<f32>(x_4849, x_4849)) + vec2<f32>(x_4852.x, x_4852.z));
    let x_4855 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4854.x, x_4854.y, x_4855.z);
    let x_4858 : f32 = u_xlat1.x;
    let x_4860 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4858, x_4860);
    let x_4864 : f32 = u_xlat1.y;
    let x_4867 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4864) + x_4867);
    let x_4871 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_4871.y, x_4871.y, x_4871.y, x_4871.y)) + vec4<f32>(0.3203125f, 0.328125f, 0.3359375f, 0.34375f));
    let x_4880 : vec4<f32> = u_xlat3;
    let x_4882 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_4880 / vec4<f32>(x_4882.x, x_4882.x, x_4882.x, x_4882.x));
    let x_4885 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_4885);
    let x_4888 : f32 = u_xlat1.y;
    let x_4890 : f32 = u_xlat3.x;
    u_xlat1.x = (x_4888 * x_4890);
    let x_4893 : vec2<f32> = u_xlat68;
    let x_4894 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4893 + x_4894);
    let x_4897 : f32 = u_xlat89.z;
    let x_4899 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4897, x_4899);
    let x_4902 : f32 = u_xlat21.z;
    let x_4904 : f32 = u_xlat0.x;
    let x_4906 : f32 = u_xlat204;
    u_xlat1.x = ((x_4902 * x_4904) + -(x_4906));
    let x_4910 : f32 = u_xlat204;
    let x_4913 : vec3<f32> = u_xlat2;
    let x_4915 : vec2<f32> = (-(vec2<f32>(x_4910, x_4910)) + vec2<f32>(x_4913.x, x_4913.z));
    let x_4916 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4915.x, x_4915.y, x_4916.z);
    let x_4919 : f32 = u_xlat1.x;
    let x_4921 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4919, x_4921);
    let x_4925 : f32 = u_xlat1.y;
    let x_4928 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4925) + x_4928);
    let x_4932 : f32 = u_xlat1.y;
    let x_4934 : f32 = u_xlat3.y;
    u_xlat1.x = (x_4932 * x_4934);
    let x_4937 : vec2<f32> = u_xlat68;
    let x_4938 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4937 + x_4938);
    let x_4941 : f32 = u_xlat90.x;
    let x_4943 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4941, x_4943);
    let x_4946 : f32 = u_xlat22.x;
    let x_4948 : f32 = u_xlat0.x;
    let x_4950 : f32 = u_xlat204;
    u_xlat1.x = ((x_4946 * x_4948) + -(x_4950));
    let x_4954 : f32 = u_xlat204;
    let x_4957 : vec3<f32> = u_xlat2;
    let x_4959 : vec2<f32> = (-(vec2<f32>(x_4954, x_4954)) + vec2<f32>(x_4957.x, x_4957.z));
    let x_4960 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_4959.x, x_4959.y, x_4960.z);
    let x_4963 : f32 = u_xlat1.x;
    let x_4965 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_4963, x_4965);
    let x_4969 : f32 = u_xlat1.y;
    let x_4972 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_4969) + x_4972);
    let x_4976 : f32 = u_xlat1.y;
    let x_4978 : f32 = u_xlat3.z;
    u_xlat1.x = (x_4976 * x_4978);
    let x_4981 : vec2<f32> = u_xlat68;
    let x_4982 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_4981 + x_4982);
    let x_4985 : f32 = u_xlat90.z;
    let x_4987 : f32 = u_xlat2.x;
    u_xlat204 = min(x_4985, x_4987);
    let x_4990 : f32 = u_xlat22.z;
    let x_4992 : f32 = u_xlat0.x;
    let x_4994 : f32 = u_xlat204;
    u_xlat1.x = ((x_4990 * x_4992) + -(x_4994));
    let x_4998 : f32 = u_xlat204;
    let x_5001 : vec3<f32> = u_xlat2;
    let x_5003 : vec2<f32> = (-(vec2<f32>(x_4998, x_4998)) + vec2<f32>(x_5001.x, x_5001.z));
    let x_5004 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5003.x, x_5003.y, x_5004.z);
    let x_5007 : f32 = u_xlat1.x;
    let x_5009 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5007, x_5009);
    let x_5013 : f32 = u_xlat1.y;
    let x_5016 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5013) + x_5016);
    let x_5020 : f32 = u_xlat1.y;
    let x_5022 : f32 = u_xlat3.w;
    u_xlat1.x = (x_5020 * x_5022);
    let x_5025 : vec2<f32> = u_xlat68;
    let x_5026 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5025 + x_5026);
    let x_5029 : f32 = u_xlat91.x;
    let x_5031 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5029, x_5031);
    let x_5034 : f32 = u_xlat23.x;
    let x_5036 : f32 = u_xlat0.x;
    let x_5038 : f32 = u_xlat204;
    u_xlat1.x = ((x_5034 * x_5036) + -(x_5038));
    let x_5042 : f32 = u_xlat204;
    let x_5045 : vec3<f32> = u_xlat2;
    let x_5047 : vec2<f32> = (-(vec2<f32>(x_5042, x_5042)) + vec2<f32>(x_5045.x, x_5045.z));
    let x_5048 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5047.x, x_5047.y, x_5048.z);
    let x_5051 : f32 = u_xlat1.x;
    let x_5053 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5051, x_5053);
    let x_5057 : f32 = u_xlat1.y;
    let x_5060 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5057) + x_5060);
    let x_5064 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_5064.y, x_5064.y, x_5064.y, x_5064.y)) + vec4<f32>(0.3515625f, 0.359375f, 0.3671875f, 0.375f));
    let x_5073 : vec4<f32> = u_xlat3;
    let x_5075 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_5073 / vec4<f32>(x_5075.x, x_5075.x, x_5075.x, x_5075.x));
    let x_5078 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_5078);
    let x_5081 : f32 = u_xlat1.y;
    let x_5083 : f32 = u_xlat3.x;
    u_xlat1.x = (x_5081 * x_5083);
    let x_5086 : vec2<f32> = u_xlat68;
    let x_5087 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5086 + x_5087);
    let x_5090 : f32 = u_xlat91.z;
    let x_5092 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5090, x_5092);
    let x_5095 : f32 = u_xlat23.z;
    let x_5097 : f32 = u_xlat0.x;
    let x_5099 : f32 = u_xlat204;
    u_xlat1.x = ((x_5095 * x_5097) + -(x_5099));
    let x_5103 : f32 = u_xlat204;
    let x_5106 : vec3<f32> = u_xlat2;
    let x_5108 : vec2<f32> = (-(vec2<f32>(x_5103, x_5103)) + vec2<f32>(x_5106.x, x_5106.z));
    let x_5109 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5108.x, x_5108.y, x_5109.z);
    let x_5112 : f32 = u_xlat1.x;
    let x_5114 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5112, x_5114);
    let x_5118 : f32 = u_xlat1.y;
    let x_5121 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5118) + x_5121);
    let x_5125 : f32 = u_xlat1.y;
    let x_5127 : f32 = u_xlat3.y;
    u_xlat1.x = (x_5125 * x_5127);
    let x_5130 : vec2<f32> = u_xlat68;
    let x_5131 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5130 + x_5131);
    let x_5134 : f32 = u_xlat92.x;
    let x_5136 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5134, x_5136);
    let x_5139 : f32 = u_xlat24.x;
    let x_5141 : f32 = u_xlat0.x;
    let x_5143 : f32 = u_xlat204;
    u_xlat1.x = ((x_5139 * x_5141) + -(x_5143));
    let x_5147 : f32 = u_xlat204;
    let x_5150 : vec3<f32> = u_xlat2;
    let x_5152 : vec2<f32> = (-(vec2<f32>(x_5147, x_5147)) + vec2<f32>(x_5150.x, x_5150.z));
    let x_5153 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5152.x, x_5152.y, x_5153.z);
    let x_5156 : f32 = u_xlat1.x;
    let x_5158 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5156, x_5158);
    let x_5162 : f32 = u_xlat1.y;
    let x_5165 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5162) + x_5165);
    let x_5169 : f32 = u_xlat1.y;
    let x_5171 : f32 = u_xlat3.z;
    u_xlat1.x = (x_5169 * x_5171);
    let x_5174 : vec2<f32> = u_xlat68;
    let x_5175 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5174 + x_5175);
    let x_5178 : f32 = u_xlat92.z;
    let x_5180 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5178, x_5180);
    let x_5183 : f32 = u_xlat24.z;
    let x_5185 : f32 = u_xlat0.x;
    let x_5187 : f32 = u_xlat204;
    u_xlat1.x = ((x_5183 * x_5185) + -(x_5187));
    let x_5191 : f32 = u_xlat204;
    let x_5194 : vec3<f32> = u_xlat2;
    let x_5196 : vec2<f32> = (-(vec2<f32>(x_5191, x_5191)) + vec2<f32>(x_5194.x, x_5194.z));
    let x_5197 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5196.x, x_5196.y, x_5197.z);
    let x_5200 : f32 = u_xlat1.x;
    let x_5202 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5200, x_5202);
    let x_5206 : f32 = u_xlat1.y;
    let x_5209 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5206) + x_5209);
    let x_5213 : f32 = u_xlat1.y;
    let x_5215 : f32 = u_xlat3.w;
    u_xlat1.x = (x_5213 * x_5215);
    let x_5218 : vec2<f32> = u_xlat68;
    let x_5219 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5218 + x_5219);
    let x_5222 : f32 = u_xlat93.x;
    let x_5224 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5222, x_5224);
    let x_5227 : f32 = u_xlat25.x;
    let x_5229 : f32 = u_xlat0.x;
    let x_5231 : f32 = u_xlat204;
    u_xlat1.x = ((x_5227 * x_5229) + -(x_5231));
    let x_5235 : f32 = u_xlat204;
    let x_5238 : vec3<f32> = u_xlat2;
    let x_5240 : vec2<f32> = (-(vec2<f32>(x_5235, x_5235)) + vec2<f32>(x_5238.x, x_5238.z));
    let x_5241 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5240.x, x_5240.y, x_5241.z);
    let x_5244 : f32 = u_xlat1.x;
    let x_5246 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5244, x_5246);
    let x_5250 : f32 = u_xlat1.y;
    let x_5253 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5250) + x_5253);
    let x_5257 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_5257.y, x_5257.y, x_5257.y, x_5257.y)) + vec4<f32>(0.3828125f, 0.390625f, 0.3984375f, 0.40625f));
    let x_5266 : vec4<f32> = u_xlat3;
    let x_5268 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_5266 / vec4<f32>(x_5268.x, x_5268.x, x_5268.x, x_5268.x));
    let x_5271 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_5271);
    let x_5274 : f32 = u_xlat1.y;
    let x_5276 : f32 = u_xlat3.x;
    u_xlat1.x = (x_5274 * x_5276);
    let x_5279 : vec2<f32> = u_xlat68;
    let x_5280 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5279 + x_5280);
    let x_5283 : f32 = u_xlat93.z;
    let x_5285 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5283, x_5285);
    let x_5288 : f32 = u_xlat25.z;
    let x_5290 : f32 = u_xlat0.x;
    let x_5292 : f32 = u_xlat204;
    u_xlat1.x = ((x_5288 * x_5290) + -(x_5292));
    let x_5296 : f32 = u_xlat204;
    let x_5299 : vec3<f32> = u_xlat2;
    let x_5301 : vec2<f32> = (-(vec2<f32>(x_5296, x_5296)) + vec2<f32>(x_5299.x, x_5299.z));
    let x_5302 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5301.x, x_5301.y, x_5302.z);
    let x_5305 : f32 = u_xlat1.x;
    let x_5307 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5305, x_5307);
    let x_5311 : f32 = u_xlat1.y;
    let x_5314 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5311) + x_5314);
    let x_5318 : f32 = u_xlat1.y;
    let x_5320 : f32 = u_xlat3.y;
    u_xlat1.x = (x_5318 * x_5320);
    let x_5323 : vec2<f32> = u_xlat68;
    let x_5324 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5323 + x_5324);
    let x_5327 : f32 = u_xlat94.x;
    let x_5329 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5327, x_5329);
    let x_5332 : f32 = u_xlat26.x;
    let x_5334 : f32 = u_xlat0.x;
    let x_5336 : f32 = u_xlat204;
    u_xlat1.x = ((x_5332 * x_5334) + -(x_5336));
    let x_5340 : f32 = u_xlat204;
    let x_5343 : vec3<f32> = u_xlat2;
    let x_5345 : vec2<f32> = (-(vec2<f32>(x_5340, x_5340)) + vec2<f32>(x_5343.x, x_5343.z));
    let x_5346 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5345.x, x_5345.y, x_5346.z);
    let x_5349 : f32 = u_xlat1.x;
    let x_5351 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5349, x_5351);
    let x_5355 : f32 = u_xlat1.y;
    let x_5358 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5355) + x_5358);
    let x_5362 : f32 = u_xlat1.y;
    let x_5364 : f32 = u_xlat3.z;
    u_xlat1.x = (x_5362 * x_5364);
    let x_5367 : vec2<f32> = u_xlat68;
    let x_5368 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5367 + x_5368);
    let x_5371 : f32 = u_xlat94.z;
    let x_5373 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5371, x_5373);
    let x_5376 : f32 = u_xlat26.z;
    let x_5378 : f32 = u_xlat0.x;
    let x_5380 : f32 = u_xlat204;
    u_xlat1.x = ((x_5376 * x_5378) + -(x_5380));
    let x_5384 : f32 = u_xlat204;
    let x_5387 : vec3<f32> = u_xlat2;
    let x_5389 : vec2<f32> = (-(vec2<f32>(x_5384, x_5384)) + vec2<f32>(x_5387.x, x_5387.z));
    let x_5390 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5389.x, x_5389.y, x_5390.z);
    let x_5393 : f32 = u_xlat1.x;
    let x_5395 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5393, x_5395);
    let x_5399 : f32 = u_xlat1.y;
    let x_5402 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5399) + x_5402);
    let x_5406 : f32 = u_xlat1.y;
    let x_5408 : f32 = u_xlat3.w;
    u_xlat1.x = (x_5406 * x_5408);
    let x_5411 : vec2<f32> = u_xlat68;
    let x_5412 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5411 + x_5412);
    let x_5415 : f32 = u_xlat95.x;
    let x_5417 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5415, x_5417);
    let x_5420 : f32 = u_xlat27.x;
    let x_5422 : f32 = u_xlat0.x;
    let x_5424 : f32 = u_xlat204;
    u_xlat1.x = ((x_5420 * x_5422) + -(x_5424));
    let x_5428 : f32 = u_xlat204;
    let x_5431 : vec3<f32> = u_xlat2;
    let x_5433 : vec2<f32> = (-(vec2<f32>(x_5428, x_5428)) + vec2<f32>(x_5431.x, x_5431.z));
    let x_5434 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5433.x, x_5433.y, x_5434.z);
    let x_5437 : f32 = u_xlat1.x;
    let x_5439 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5437, x_5439);
    let x_5443 : f32 = u_xlat1.y;
    let x_5446 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5443) + x_5446);
    let x_5450 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_5450.y, x_5450.y, x_5450.y, x_5450.y)) + vec4<f32>(0.4140625f, 0.421875f, 0.4296875f, 0.4375f));
    let x_5459 : vec4<f32> = u_xlat3;
    let x_5461 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_5459 / vec4<f32>(x_5461.x, x_5461.x, x_5461.x, x_5461.x));
    let x_5464 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_5464);
    let x_5467 : f32 = u_xlat1.y;
    let x_5469 : f32 = u_xlat3.x;
    u_xlat1.x = (x_5467 * x_5469);
    let x_5472 : vec2<f32> = u_xlat68;
    let x_5473 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5472 + x_5473);
    let x_5476 : f32 = u_xlat95.z;
    let x_5478 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5476, x_5478);
    let x_5481 : f32 = u_xlat27.z;
    let x_5483 : f32 = u_xlat0.x;
    let x_5485 : f32 = u_xlat204;
    u_xlat1.x = ((x_5481 * x_5483) + -(x_5485));
    let x_5489 : f32 = u_xlat204;
    let x_5492 : vec3<f32> = u_xlat2;
    let x_5494 : vec2<f32> = (-(vec2<f32>(x_5489, x_5489)) + vec2<f32>(x_5492.x, x_5492.z));
    let x_5495 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5494.x, x_5494.y, x_5495.z);
    let x_5498 : f32 = u_xlat1.x;
    let x_5500 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5498, x_5500);
    let x_5504 : f32 = u_xlat1.y;
    let x_5507 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5504) + x_5507);
    let x_5511 : f32 = u_xlat1.y;
    let x_5513 : f32 = u_xlat3.y;
    u_xlat1.x = (x_5511 * x_5513);
    let x_5516 : vec2<f32> = u_xlat68;
    let x_5517 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5516 + x_5517);
    let x_5520 : f32 = u_xlat96.x;
    let x_5522 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5520, x_5522);
    let x_5525 : f32 = u_xlat28.x;
    let x_5527 : f32 = u_xlat0.x;
    let x_5529 : f32 = u_xlat204;
    u_xlat1.x = ((x_5525 * x_5527) + -(x_5529));
    let x_5533 : f32 = u_xlat204;
    let x_5536 : vec3<f32> = u_xlat2;
    let x_5538 : vec2<f32> = (-(vec2<f32>(x_5533, x_5533)) + vec2<f32>(x_5536.x, x_5536.z));
    let x_5539 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5538.x, x_5538.y, x_5539.z);
    let x_5542 : f32 = u_xlat1.x;
    let x_5544 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5542, x_5544);
    let x_5548 : f32 = u_xlat1.y;
    let x_5551 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5548) + x_5551);
    let x_5555 : f32 = u_xlat1.y;
    let x_5557 : f32 = u_xlat3.z;
    u_xlat1.x = (x_5555 * x_5557);
    let x_5560 : vec2<f32> = u_xlat68;
    let x_5561 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5560 + x_5561);
    let x_5564 : f32 = u_xlat96.z;
    let x_5566 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5564, x_5566);
    let x_5569 : f32 = u_xlat28.z;
    let x_5571 : f32 = u_xlat0.x;
    let x_5573 : f32 = u_xlat204;
    u_xlat1.x = ((x_5569 * x_5571) + -(x_5573));
    let x_5577 : f32 = u_xlat204;
    let x_5580 : vec3<f32> = u_xlat2;
    let x_5582 : vec2<f32> = (-(vec2<f32>(x_5577, x_5577)) + vec2<f32>(x_5580.x, x_5580.z));
    let x_5583 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5582.x, x_5582.y, x_5583.z);
    let x_5586 : f32 = u_xlat1.x;
    let x_5588 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5586, x_5588);
    let x_5592 : f32 = u_xlat1.y;
    let x_5595 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5592) + x_5595);
    let x_5599 : f32 = u_xlat1.y;
    let x_5601 : f32 = u_xlat3.w;
    u_xlat1.x = (x_5599 * x_5601);
    let x_5604 : vec2<f32> = u_xlat68;
    let x_5605 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5604 + x_5605);
    let x_5608 : f32 = u_xlat97.x;
    let x_5610 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5608, x_5610);
    let x_5613 : f32 = u_xlat29.x;
    let x_5615 : f32 = u_xlat0.x;
    let x_5617 : f32 = u_xlat204;
    u_xlat1.x = ((x_5613 * x_5615) + -(x_5617));
    let x_5621 : f32 = u_xlat204;
    let x_5624 : vec3<f32> = u_xlat2;
    let x_5626 : vec2<f32> = (-(vec2<f32>(x_5621, x_5621)) + vec2<f32>(x_5624.x, x_5624.z));
    let x_5627 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5626.x, x_5626.y, x_5627.z);
    let x_5630 : f32 = u_xlat1.x;
    let x_5632 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5630, x_5632);
    let x_5636 : f32 = u_xlat1.y;
    let x_5639 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5636) + x_5639);
    let x_5643 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_5643.y, x_5643.y, x_5643.y, x_5643.y)) + vec4<f32>(0.4453125f, 0.453125f, 0.4609375f, 0.46875f));
    let x_5652 : vec4<f32> = u_xlat3;
    let x_5654 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_5652 / vec4<f32>(x_5654.x, x_5654.x, x_5654.x, x_5654.x));
    let x_5657 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_5657);
    let x_5660 : f32 = u_xlat1.y;
    let x_5662 : f32 = u_xlat3.x;
    u_xlat1.x = (x_5660 * x_5662);
    let x_5665 : vec2<f32> = u_xlat68;
    let x_5666 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5665 + x_5666);
    let x_5669 : f32 = u_xlat97.z;
    let x_5671 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5669, x_5671);
    let x_5674 : f32 = u_xlat29.z;
    let x_5676 : f32 = u_xlat0.x;
    let x_5678 : f32 = u_xlat204;
    u_xlat1.x = ((x_5674 * x_5676) + -(x_5678));
    let x_5682 : f32 = u_xlat204;
    let x_5685 : vec3<f32> = u_xlat2;
    let x_5687 : vec2<f32> = (-(vec2<f32>(x_5682, x_5682)) + vec2<f32>(x_5685.x, x_5685.z));
    let x_5688 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5687.x, x_5687.y, x_5688.z);
    let x_5691 : f32 = u_xlat1.x;
    let x_5693 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5691, x_5693);
    let x_5697 : f32 = u_xlat1.y;
    let x_5700 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5697) + x_5700);
    let x_5704 : f32 = u_xlat1.y;
    let x_5706 : f32 = u_xlat3.y;
    u_xlat1.x = (x_5704 * x_5706);
    let x_5709 : vec2<f32> = u_xlat68;
    let x_5710 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5709 + x_5710);
    let x_5713 : f32 = u_xlat98.x;
    let x_5715 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5713, x_5715);
    let x_5718 : f32 = u_xlat30.x;
    let x_5720 : f32 = u_xlat0.x;
    let x_5722 : f32 = u_xlat204;
    u_xlat1.x = ((x_5718 * x_5720) + -(x_5722));
    let x_5726 : f32 = u_xlat204;
    let x_5729 : vec3<f32> = u_xlat2;
    let x_5731 : vec2<f32> = (-(vec2<f32>(x_5726, x_5726)) + vec2<f32>(x_5729.x, x_5729.z));
    let x_5732 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5731.x, x_5731.y, x_5732.z);
    let x_5735 : f32 = u_xlat1.x;
    let x_5737 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5735, x_5737);
    let x_5741 : f32 = u_xlat1.y;
    let x_5744 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5741) + x_5744);
    let x_5748 : f32 = u_xlat1.y;
    let x_5750 : f32 = u_xlat3.z;
    u_xlat1.x = (x_5748 * x_5750);
    let x_5753 : vec2<f32> = u_xlat68;
    let x_5754 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5753 + x_5754);
    let x_5757 : f32 = u_xlat98.z;
    let x_5759 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5757, x_5759);
    let x_5762 : f32 = u_xlat30.z;
    let x_5764 : f32 = u_xlat0.x;
    let x_5766 : f32 = u_xlat204;
    u_xlat1.x = ((x_5762 * x_5764) + -(x_5766));
    let x_5770 : f32 = u_xlat204;
    let x_5773 : vec3<f32> = u_xlat2;
    let x_5775 : vec2<f32> = (-(vec2<f32>(x_5770, x_5770)) + vec2<f32>(x_5773.x, x_5773.z));
    let x_5776 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5775.x, x_5775.y, x_5776.z);
    let x_5779 : f32 = u_xlat1.x;
    let x_5781 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5779, x_5781);
    let x_5785 : f32 = u_xlat1.y;
    let x_5788 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5785) + x_5788);
    let x_5792 : f32 = u_xlat1.y;
    let x_5794 : f32 = u_xlat3.w;
    u_xlat1.x = (x_5792 * x_5794);
    let x_5797 : vec2<f32> = u_xlat68;
    let x_5798 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5797 + x_5798);
    let x_5801 : f32 = u_xlat99.x;
    let x_5803 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5801, x_5803);
    let x_5806 : f32 = u_xlat31.x;
    let x_5808 : f32 = u_xlat0.x;
    let x_5810 : f32 = u_xlat204;
    u_xlat1.x = ((x_5806 * x_5808) + -(x_5810));
    let x_5814 : f32 = u_xlat204;
    let x_5817 : vec3<f32> = u_xlat2;
    let x_5819 : vec2<f32> = (-(vec2<f32>(x_5814, x_5814)) + vec2<f32>(x_5817.x, x_5817.z));
    let x_5820 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5819.x, x_5819.y, x_5820.z);
    let x_5823 : f32 = u_xlat1.x;
    let x_5825 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5823, x_5825);
    let x_5829 : f32 = u_xlat1.y;
    let x_5832 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5829) + x_5832);
    let x_5836 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_5836.y, x_5836.y, x_5836.y, x_5836.y)) + vec4<f32>(0.4765625f, 0.484375f, 0.4921875f, 0.5f));
    let x_5845 : vec4<f32> = u_xlat3;
    let x_5847 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_5845 / vec4<f32>(x_5847.x, x_5847.x, x_5847.x, x_5847.x));
    let x_5850 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_5850);
    let x_5853 : f32 = u_xlat1.y;
    let x_5855 : f32 = u_xlat3.x;
    u_xlat1.x = (x_5853 * x_5855);
    let x_5858 : vec2<f32> = u_xlat68;
    let x_5859 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5858 + x_5859);
    let x_5862 : f32 = u_xlat99.z;
    let x_5864 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5862, x_5864);
    let x_5867 : f32 = u_xlat31.z;
    let x_5869 : f32 = u_xlat0.x;
    let x_5871 : f32 = u_xlat204;
    u_xlat1.x = ((x_5867 * x_5869) + -(x_5871));
    let x_5875 : f32 = u_xlat204;
    let x_5878 : vec3<f32> = u_xlat2;
    let x_5880 : vec2<f32> = (-(vec2<f32>(x_5875, x_5875)) + vec2<f32>(x_5878.x, x_5878.z));
    let x_5881 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5880.x, x_5880.y, x_5881.z);
    let x_5884 : f32 = u_xlat1.x;
    let x_5886 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5884, x_5886);
    let x_5890 : f32 = u_xlat1.y;
    let x_5893 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5890) + x_5893);
    let x_5897 : f32 = u_xlat1.y;
    let x_5899 : f32 = u_xlat3.y;
    u_xlat1.x = (x_5897 * x_5899);
    let x_5902 : vec2<f32> = u_xlat68;
    let x_5903 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5902 + x_5903);
    let x_5906 : f32 = u_xlat100.x;
    let x_5908 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5906, x_5908);
    let x_5911 : f32 = u_xlat32.x;
    let x_5913 : f32 = u_xlat0.x;
    let x_5915 : f32 = u_xlat204;
    u_xlat1.x = ((x_5911 * x_5913) + -(x_5915));
    let x_5919 : f32 = u_xlat204;
    let x_5922 : vec3<f32> = u_xlat2;
    let x_5924 : vec2<f32> = (-(vec2<f32>(x_5919, x_5919)) + vec2<f32>(x_5922.x, x_5922.z));
    let x_5925 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5924.x, x_5924.y, x_5925.z);
    let x_5928 : f32 = u_xlat1.x;
    let x_5930 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5928, x_5930);
    let x_5934 : f32 = u_xlat1.y;
    let x_5937 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5934) + x_5937);
    let x_5941 : f32 = u_xlat1.y;
    let x_5943 : f32 = u_xlat3.z;
    u_xlat1.x = (x_5941 * x_5943);
    let x_5946 : vec2<f32> = u_xlat68;
    let x_5947 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5946 + x_5947);
    let x_5950 : f32 = u_xlat100.z;
    let x_5952 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5950, x_5952);
    let x_5955 : f32 = u_xlat32.z;
    let x_5957 : f32 = u_xlat0.x;
    let x_5959 : f32 = u_xlat204;
    u_xlat1.x = ((x_5955 * x_5957) + -(x_5959));
    let x_5963 : f32 = u_xlat204;
    let x_5966 : vec3<f32> = u_xlat2;
    let x_5968 : vec2<f32> = (-(vec2<f32>(x_5963, x_5963)) + vec2<f32>(x_5966.x, x_5966.z));
    let x_5969 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_5968.x, x_5968.y, x_5969.z);
    let x_5972 : f32 = u_xlat1.x;
    let x_5974 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_5972, x_5974);
    let x_5978 : f32 = u_xlat1.y;
    let x_5981 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_5978) + x_5981);
    let x_5985 : f32 = u_xlat1.y;
    let x_5987 : f32 = u_xlat3.w;
    u_xlat1.x = (x_5985 * x_5987);
    let x_5990 : vec2<f32> = u_xlat68;
    let x_5991 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_5990 + x_5991);
    let x_5994 : f32 = u_xlat101.x;
    let x_5996 : f32 = u_xlat2.x;
    u_xlat204 = min(x_5994, x_5996);
    let x_5999 : f32 = u_xlat33.x;
    let x_6001 : f32 = u_xlat0.x;
    let x_6003 : f32 = u_xlat204;
    u_xlat1.x = ((x_5999 * x_6001) + -(x_6003));
    let x_6007 : f32 = u_xlat204;
    let x_6010 : vec3<f32> = u_xlat2;
    let x_6012 : vec2<f32> = (-(vec2<f32>(x_6007, x_6007)) + vec2<f32>(x_6010.x, x_6010.z));
    let x_6013 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6012.x, x_6012.y, x_6013.z);
    let x_6016 : f32 = u_xlat1.x;
    let x_6018 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6016, x_6018);
    let x_6022 : f32 = u_xlat1.y;
    let x_6025 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6022) + x_6025);
    let x_6029 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_6029.y, x_6029.y, x_6029.y, x_6029.y)) + vec4<f32>(0.5078125f, 0.515625f, 0.5234375f, 0.53125f));
    let x_6038 : vec4<f32> = u_xlat3;
    let x_6040 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_6038 / vec4<f32>(x_6040.x, x_6040.x, x_6040.x, x_6040.x));
    let x_6043 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_6043);
    let x_6046 : f32 = u_xlat1.y;
    let x_6048 : f32 = u_xlat3.x;
    u_xlat1.x = (x_6046 * x_6048);
    let x_6051 : vec2<f32> = u_xlat68;
    let x_6052 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6051 + x_6052);
    let x_6055 : f32 = u_xlat101.z;
    let x_6057 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6055, x_6057);
    let x_6060 : f32 = u_xlat33.z;
    let x_6062 : f32 = u_xlat0.x;
    let x_6064 : f32 = u_xlat204;
    u_xlat1.x = ((x_6060 * x_6062) + -(x_6064));
    let x_6068 : f32 = u_xlat204;
    let x_6071 : vec3<f32> = u_xlat2;
    let x_6073 : vec2<f32> = (-(vec2<f32>(x_6068, x_6068)) + vec2<f32>(x_6071.x, x_6071.z));
    let x_6074 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6073.x, x_6073.y, x_6074.z);
    let x_6077 : f32 = u_xlat1.x;
    let x_6079 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6077, x_6079);
    let x_6083 : f32 = u_xlat1.y;
    let x_6086 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6083) + x_6086);
    let x_6090 : f32 = u_xlat1.y;
    let x_6092 : f32 = u_xlat3.y;
    u_xlat1.x = (x_6090 * x_6092);
    let x_6095 : vec2<f32> = u_xlat68;
    let x_6096 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6095 + x_6096);
    let x_6099 : f32 = u_xlat102.x;
    let x_6101 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6099, x_6101);
    let x_6104 : f32 = u_xlat34.x;
    let x_6106 : f32 = u_xlat0.x;
    let x_6108 : f32 = u_xlat204;
    u_xlat1.x = ((x_6104 * x_6106) + -(x_6108));
    let x_6112 : f32 = u_xlat204;
    let x_6115 : vec3<f32> = u_xlat2;
    let x_6117 : vec2<f32> = (-(vec2<f32>(x_6112, x_6112)) + vec2<f32>(x_6115.x, x_6115.z));
    let x_6118 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6117.x, x_6117.y, x_6118.z);
    let x_6121 : f32 = u_xlat1.x;
    let x_6123 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6121, x_6123);
    let x_6127 : f32 = u_xlat1.y;
    let x_6130 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6127) + x_6130);
    let x_6134 : f32 = u_xlat1.y;
    let x_6136 : f32 = u_xlat3.z;
    u_xlat1.x = (x_6134 * x_6136);
    let x_6139 : vec2<f32> = u_xlat68;
    let x_6140 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6139 + x_6140);
    let x_6143 : f32 = u_xlat102.z;
    let x_6145 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6143, x_6145);
    let x_6148 : f32 = u_xlat34.z;
    let x_6150 : f32 = u_xlat0.x;
    let x_6152 : f32 = u_xlat204;
    u_xlat1.x = ((x_6148 * x_6150) + -(x_6152));
    let x_6156 : f32 = u_xlat204;
    let x_6159 : vec3<f32> = u_xlat2;
    let x_6161 : vec2<f32> = (-(vec2<f32>(x_6156, x_6156)) + vec2<f32>(x_6159.x, x_6159.z));
    let x_6162 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6161.x, x_6161.y, x_6162.z);
    let x_6165 : f32 = u_xlat1.x;
    let x_6167 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6165, x_6167);
    let x_6171 : f32 = u_xlat1.y;
    let x_6174 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6171) + x_6174);
    let x_6178 : f32 = u_xlat1.y;
    let x_6180 : f32 = u_xlat3.w;
    u_xlat1.x = (x_6178 * x_6180);
    let x_6183 : vec2<f32> = u_xlat68;
    let x_6184 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6183 + x_6184);
    let x_6187 : f32 = u_xlat103.x;
    let x_6189 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6187, x_6189);
    let x_6192 : f32 = u_xlat35.x;
    let x_6194 : f32 = u_xlat0.x;
    let x_6196 : f32 = u_xlat204;
    u_xlat1.x = ((x_6192 * x_6194) + -(x_6196));
    let x_6200 : f32 = u_xlat204;
    let x_6203 : vec3<f32> = u_xlat2;
    let x_6205 : vec2<f32> = (-(vec2<f32>(x_6200, x_6200)) + vec2<f32>(x_6203.x, x_6203.z));
    let x_6206 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6205.x, x_6205.y, x_6206.z);
    let x_6209 : f32 = u_xlat1.x;
    let x_6211 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6209, x_6211);
    let x_6215 : f32 = u_xlat1.y;
    let x_6218 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6215) + x_6218);
    let x_6222 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_6222.y, x_6222.y, x_6222.y, x_6222.y)) + vec4<f32>(0.5390625f, 0.546875f, 0.5546875f, 0.5625f));
    let x_6231 : vec4<f32> = u_xlat3;
    let x_6233 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_6231 / vec4<f32>(x_6233.x, x_6233.x, x_6233.x, x_6233.x));
    let x_6236 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_6236);
    let x_6239 : f32 = u_xlat1.y;
    let x_6241 : f32 = u_xlat3.x;
    u_xlat1.x = (x_6239 * x_6241);
    let x_6244 : vec2<f32> = u_xlat68;
    let x_6245 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6244 + x_6245);
    let x_6248 : f32 = u_xlat103.z;
    let x_6250 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6248, x_6250);
    let x_6253 : f32 = u_xlat35.z;
    let x_6255 : f32 = u_xlat0.x;
    let x_6257 : f32 = u_xlat204;
    u_xlat1.x = ((x_6253 * x_6255) + -(x_6257));
    let x_6261 : f32 = u_xlat204;
    let x_6264 : vec3<f32> = u_xlat2;
    let x_6266 : vec2<f32> = (-(vec2<f32>(x_6261, x_6261)) + vec2<f32>(x_6264.x, x_6264.z));
    let x_6267 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6266.x, x_6266.y, x_6267.z);
    let x_6270 : f32 = u_xlat1.x;
    let x_6272 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6270, x_6272);
    let x_6276 : f32 = u_xlat1.y;
    let x_6279 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6276) + x_6279);
    let x_6283 : f32 = u_xlat1.y;
    let x_6285 : f32 = u_xlat3.y;
    u_xlat1.x = (x_6283 * x_6285);
    let x_6288 : vec2<f32> = u_xlat68;
    let x_6289 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6288 + x_6289);
    let x_6292 : f32 = u_xlat104.x;
    let x_6294 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6292, x_6294);
    let x_6297 : f32 = u_xlat36.x;
    let x_6299 : f32 = u_xlat0.x;
    let x_6301 : f32 = u_xlat204;
    u_xlat1.x = ((x_6297 * x_6299) + -(x_6301));
    let x_6305 : f32 = u_xlat204;
    let x_6308 : vec3<f32> = u_xlat2;
    let x_6310 : vec2<f32> = (-(vec2<f32>(x_6305, x_6305)) + vec2<f32>(x_6308.x, x_6308.z));
    let x_6311 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6310.x, x_6310.y, x_6311.z);
    let x_6314 : f32 = u_xlat1.x;
    let x_6316 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6314, x_6316);
    let x_6320 : f32 = u_xlat1.y;
    let x_6323 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6320) + x_6323);
    let x_6327 : f32 = u_xlat1.y;
    let x_6329 : f32 = u_xlat3.z;
    u_xlat1.x = (x_6327 * x_6329);
    let x_6332 : vec2<f32> = u_xlat68;
    let x_6333 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6332 + x_6333);
    let x_6336 : f32 = u_xlat104.z;
    let x_6338 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6336, x_6338);
    let x_6341 : f32 = u_xlat36.z;
    let x_6343 : f32 = u_xlat0.x;
    let x_6345 : f32 = u_xlat204;
    u_xlat1.x = ((x_6341 * x_6343) + -(x_6345));
    let x_6349 : f32 = u_xlat204;
    let x_6352 : vec3<f32> = u_xlat2;
    let x_6354 : vec2<f32> = (-(vec2<f32>(x_6349, x_6349)) + vec2<f32>(x_6352.x, x_6352.z));
    let x_6355 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6354.x, x_6354.y, x_6355.z);
    let x_6358 : f32 = u_xlat1.x;
    let x_6360 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6358, x_6360);
    let x_6364 : f32 = u_xlat1.y;
    let x_6367 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6364) + x_6367);
    let x_6371 : f32 = u_xlat1.y;
    let x_6373 : f32 = u_xlat3.w;
    u_xlat1.x = (x_6371 * x_6373);
    let x_6376 : vec2<f32> = u_xlat68;
    let x_6377 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6376 + x_6377);
    let x_6380 : f32 = u_xlat105.x;
    let x_6382 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6380, x_6382);
    let x_6385 : f32 = u_xlat37.x;
    let x_6387 : f32 = u_xlat0.x;
    let x_6389 : f32 = u_xlat204;
    u_xlat1.x = ((x_6385 * x_6387) + -(x_6389));
    let x_6393 : f32 = u_xlat204;
    let x_6396 : vec3<f32> = u_xlat2;
    let x_6398 : vec2<f32> = (-(vec2<f32>(x_6393, x_6393)) + vec2<f32>(x_6396.x, x_6396.z));
    let x_6399 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6398.x, x_6398.y, x_6399.z);
    let x_6402 : f32 = u_xlat1.x;
    let x_6404 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6402, x_6404);
    let x_6408 : f32 = u_xlat1.y;
    let x_6411 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6408) + x_6411);
    let x_6415 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_6415.y, x_6415.y, x_6415.y, x_6415.y)) + vec4<f32>(0.5703125f, 0.578125f, 0.5859375f, 0.59375f));
    let x_6424 : vec4<f32> = u_xlat3;
    let x_6426 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_6424 / vec4<f32>(x_6426.x, x_6426.x, x_6426.x, x_6426.x));
    let x_6429 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_6429);
    let x_6432 : f32 = u_xlat1.y;
    let x_6434 : f32 = u_xlat3.x;
    u_xlat1.x = (x_6432 * x_6434);
    let x_6437 : vec2<f32> = u_xlat68;
    let x_6438 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6437 + x_6438);
    let x_6441 : f32 = u_xlat105.z;
    let x_6443 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6441, x_6443);
    let x_6446 : f32 = u_xlat37.z;
    let x_6448 : f32 = u_xlat0.x;
    let x_6450 : f32 = u_xlat204;
    u_xlat1.x = ((x_6446 * x_6448) + -(x_6450));
    let x_6454 : f32 = u_xlat204;
    let x_6457 : vec3<f32> = u_xlat2;
    let x_6459 : vec2<f32> = (-(vec2<f32>(x_6454, x_6454)) + vec2<f32>(x_6457.x, x_6457.z));
    let x_6460 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6459.x, x_6459.y, x_6460.z);
    let x_6463 : f32 = u_xlat1.x;
    let x_6465 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6463, x_6465);
    let x_6469 : f32 = u_xlat1.y;
    let x_6472 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6469) + x_6472);
    let x_6476 : f32 = u_xlat1.y;
    let x_6478 : f32 = u_xlat3.y;
    u_xlat1.x = (x_6476 * x_6478);
    let x_6481 : vec2<f32> = u_xlat68;
    let x_6482 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6481 + x_6482);
    let x_6485 : f32 = u_xlat106.x;
    let x_6487 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6485, x_6487);
    let x_6490 : f32 = u_xlat38.x;
    let x_6492 : f32 = u_xlat0.x;
    let x_6494 : f32 = u_xlat204;
    u_xlat1.x = ((x_6490 * x_6492) + -(x_6494));
    let x_6498 : f32 = u_xlat204;
    let x_6501 : vec3<f32> = u_xlat2;
    let x_6503 : vec2<f32> = (-(vec2<f32>(x_6498, x_6498)) + vec2<f32>(x_6501.x, x_6501.z));
    let x_6504 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6503.x, x_6503.y, x_6504.z);
    let x_6507 : f32 = u_xlat1.x;
    let x_6509 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6507, x_6509);
    let x_6513 : f32 = u_xlat1.y;
    let x_6516 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6513) + x_6516);
    let x_6520 : f32 = u_xlat1.y;
    let x_6522 : f32 = u_xlat3.z;
    u_xlat1.x = (x_6520 * x_6522);
    let x_6525 : vec2<f32> = u_xlat68;
    let x_6526 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6525 + x_6526);
    let x_6529 : f32 = u_xlat106.z;
    let x_6531 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6529, x_6531);
    let x_6534 : f32 = u_xlat38.z;
    let x_6536 : f32 = u_xlat0.x;
    let x_6538 : f32 = u_xlat204;
    u_xlat1.x = ((x_6534 * x_6536) + -(x_6538));
    let x_6542 : f32 = u_xlat204;
    let x_6545 : vec3<f32> = u_xlat2;
    let x_6547 : vec2<f32> = (-(vec2<f32>(x_6542, x_6542)) + vec2<f32>(x_6545.x, x_6545.z));
    let x_6548 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6547.x, x_6547.y, x_6548.z);
    let x_6551 : f32 = u_xlat1.x;
    let x_6553 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6551, x_6553);
    let x_6557 : f32 = u_xlat1.y;
    let x_6560 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6557) + x_6560);
    let x_6564 : f32 = u_xlat1.y;
    let x_6566 : f32 = u_xlat3.w;
    u_xlat1.x = (x_6564 * x_6566);
    let x_6569 : vec2<f32> = u_xlat68;
    let x_6570 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6569 + x_6570);
    let x_6573 : f32 = u_xlat107.x;
    let x_6575 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6573, x_6575);
    let x_6578 : f32 = u_xlat39.x;
    let x_6580 : f32 = u_xlat0.x;
    let x_6582 : f32 = u_xlat204;
    u_xlat1.x = ((x_6578 * x_6580) + -(x_6582));
    let x_6586 : f32 = u_xlat204;
    let x_6589 : vec3<f32> = u_xlat2;
    let x_6591 : vec2<f32> = (-(vec2<f32>(x_6586, x_6586)) + vec2<f32>(x_6589.x, x_6589.z));
    let x_6592 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6591.x, x_6591.y, x_6592.z);
    let x_6595 : f32 = u_xlat1.x;
    let x_6597 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6595, x_6597);
    let x_6601 : f32 = u_xlat1.y;
    let x_6604 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6601) + x_6604);
    let x_6608 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_6608.y, x_6608.y, x_6608.y, x_6608.y)) + vec4<f32>(0.6015625f, 0.609375f, 0.6171875f, 0.625f));
    let x_6617 : vec4<f32> = u_xlat3;
    let x_6619 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_6617 / vec4<f32>(x_6619.x, x_6619.x, x_6619.x, x_6619.x));
    let x_6622 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_6622);
    let x_6625 : f32 = u_xlat1.y;
    let x_6627 : f32 = u_xlat3.x;
    u_xlat1.x = (x_6625 * x_6627);
    let x_6630 : vec2<f32> = u_xlat68;
    let x_6631 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6630 + x_6631);
    let x_6634 : f32 = u_xlat107.z;
    let x_6636 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6634, x_6636);
    let x_6639 : f32 = u_xlat39.z;
    let x_6641 : f32 = u_xlat0.x;
    let x_6643 : f32 = u_xlat204;
    u_xlat1.x = ((x_6639 * x_6641) + -(x_6643));
    let x_6647 : f32 = u_xlat204;
    let x_6650 : vec3<f32> = u_xlat2;
    let x_6652 : vec2<f32> = (-(vec2<f32>(x_6647, x_6647)) + vec2<f32>(x_6650.x, x_6650.z));
    let x_6653 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6652.x, x_6652.y, x_6653.z);
    let x_6656 : f32 = u_xlat1.x;
    let x_6658 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6656, x_6658);
    let x_6662 : f32 = u_xlat1.y;
    let x_6665 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6662) + x_6665);
    let x_6669 : f32 = u_xlat1.y;
    let x_6671 : f32 = u_xlat3.y;
    u_xlat1.x = (x_6669 * x_6671);
    let x_6674 : vec2<f32> = u_xlat68;
    let x_6675 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6674 + x_6675);
    let x_6678 : f32 = u_xlat108.x;
    let x_6680 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6678, x_6680);
    let x_6683 : f32 = u_xlat40.x;
    let x_6685 : f32 = u_xlat0.x;
    let x_6687 : f32 = u_xlat204;
    u_xlat1.x = ((x_6683 * x_6685) + -(x_6687));
    let x_6691 : f32 = u_xlat204;
    let x_6694 : vec3<f32> = u_xlat2;
    let x_6696 : vec2<f32> = (-(vec2<f32>(x_6691, x_6691)) + vec2<f32>(x_6694.x, x_6694.z));
    let x_6697 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6696.x, x_6696.y, x_6697.z);
    let x_6700 : f32 = u_xlat1.x;
    let x_6702 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6700, x_6702);
    let x_6706 : f32 = u_xlat1.y;
    let x_6709 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6706) + x_6709);
    let x_6713 : f32 = u_xlat1.y;
    let x_6715 : f32 = u_xlat3.z;
    u_xlat1.x = (x_6713 * x_6715);
    let x_6718 : vec2<f32> = u_xlat68;
    let x_6719 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6718 + x_6719);
    let x_6722 : f32 = u_xlat108.z;
    let x_6724 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6722, x_6724);
    let x_6727 : f32 = u_xlat40.z;
    let x_6729 : f32 = u_xlat0.x;
    let x_6731 : f32 = u_xlat204;
    u_xlat1.x = ((x_6727 * x_6729) + -(x_6731));
    let x_6735 : f32 = u_xlat204;
    let x_6738 : vec3<f32> = u_xlat2;
    let x_6740 : vec2<f32> = (-(vec2<f32>(x_6735, x_6735)) + vec2<f32>(x_6738.x, x_6738.z));
    let x_6741 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6740.x, x_6740.y, x_6741.z);
    let x_6744 : f32 = u_xlat1.x;
    let x_6746 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6744, x_6746);
    let x_6750 : f32 = u_xlat1.y;
    let x_6753 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6750) + x_6753);
    let x_6757 : f32 = u_xlat1.y;
    let x_6759 : f32 = u_xlat3.w;
    u_xlat1.x = (x_6757 * x_6759);
    let x_6762 : vec2<f32> = u_xlat68;
    let x_6763 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6762 + x_6763);
    let x_6766 : f32 = u_xlat109.x;
    let x_6768 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6766, x_6768);
    let x_6771 : f32 = u_xlat41.x;
    let x_6773 : f32 = u_xlat0.x;
    let x_6775 : f32 = u_xlat204;
    u_xlat1.x = ((x_6771 * x_6773) + -(x_6775));
    let x_6779 : f32 = u_xlat204;
    let x_6782 : vec3<f32> = u_xlat2;
    let x_6784 : vec2<f32> = (-(vec2<f32>(x_6779, x_6779)) + vec2<f32>(x_6782.x, x_6782.z));
    let x_6785 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6784.x, x_6784.y, x_6785.z);
    let x_6788 : f32 = u_xlat1.x;
    let x_6790 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6788, x_6790);
    let x_6794 : f32 = u_xlat1.y;
    let x_6797 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6794) + x_6797);
    let x_6801 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_6801.y, x_6801.y, x_6801.y, x_6801.y)) + vec4<f32>(0.6328125f, 0.640625f, 0.6484375f, 0.65625f));
    let x_6810 : vec4<f32> = u_xlat3;
    let x_6812 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_6810 / vec4<f32>(x_6812.x, x_6812.x, x_6812.x, x_6812.x));
    let x_6815 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_6815);
    let x_6818 : f32 = u_xlat1.y;
    let x_6820 : f32 = u_xlat3.x;
    u_xlat1.x = (x_6818 * x_6820);
    let x_6823 : vec2<f32> = u_xlat68;
    let x_6824 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6823 + x_6824);
    let x_6827 : f32 = u_xlat109.z;
    let x_6829 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6827, x_6829);
    let x_6832 : f32 = u_xlat41.z;
    let x_6834 : f32 = u_xlat0.x;
    let x_6836 : f32 = u_xlat204;
    u_xlat1.x = ((x_6832 * x_6834) + -(x_6836));
    let x_6840 : f32 = u_xlat204;
    let x_6843 : vec3<f32> = u_xlat2;
    let x_6845 : vec2<f32> = (-(vec2<f32>(x_6840, x_6840)) + vec2<f32>(x_6843.x, x_6843.z));
    let x_6846 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6845.x, x_6845.y, x_6846.z);
    let x_6849 : f32 = u_xlat1.x;
    let x_6851 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6849, x_6851);
    let x_6855 : f32 = u_xlat1.y;
    let x_6858 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6855) + x_6858);
    let x_6862 : f32 = u_xlat1.y;
    let x_6864 : f32 = u_xlat3.y;
    u_xlat1.x = (x_6862 * x_6864);
    let x_6867 : vec2<f32> = u_xlat68;
    let x_6868 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6867 + x_6868);
    let x_6871 : f32 = u_xlat110.x;
    let x_6873 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6871, x_6873);
    let x_6876 : f32 = u_xlat42.x;
    let x_6878 : f32 = u_xlat0.x;
    let x_6880 : f32 = u_xlat204;
    u_xlat1.x = ((x_6876 * x_6878) + -(x_6880));
    let x_6884 : f32 = u_xlat204;
    let x_6887 : vec3<f32> = u_xlat2;
    let x_6889 : vec2<f32> = (-(vec2<f32>(x_6884, x_6884)) + vec2<f32>(x_6887.x, x_6887.z));
    let x_6890 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6889.x, x_6889.y, x_6890.z);
    let x_6893 : f32 = u_xlat1.x;
    let x_6895 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6893, x_6895);
    let x_6899 : f32 = u_xlat1.y;
    let x_6902 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6899) + x_6902);
    let x_6906 : f32 = u_xlat1.y;
    let x_6908 : f32 = u_xlat3.z;
    u_xlat1.x = (x_6906 * x_6908);
    let x_6911 : vec2<f32> = u_xlat68;
    let x_6912 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6911 + x_6912);
    let x_6915 : f32 = u_xlat110.z;
    let x_6917 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6915, x_6917);
    let x_6920 : f32 = u_xlat42.z;
    let x_6922 : f32 = u_xlat0.x;
    let x_6924 : f32 = u_xlat204;
    u_xlat1.x = ((x_6920 * x_6922) + -(x_6924));
    let x_6928 : f32 = u_xlat204;
    let x_6931 : vec3<f32> = u_xlat2;
    let x_6933 : vec2<f32> = (-(vec2<f32>(x_6928, x_6928)) + vec2<f32>(x_6931.x, x_6931.z));
    let x_6934 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6933.x, x_6933.y, x_6934.z);
    let x_6937 : f32 = u_xlat1.x;
    let x_6939 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6937, x_6939);
    let x_6943 : f32 = u_xlat1.y;
    let x_6946 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6943) + x_6946);
    let x_6950 : f32 = u_xlat1.y;
    let x_6952 : f32 = u_xlat3.w;
    u_xlat1.x = (x_6950 * x_6952);
    let x_6955 : vec2<f32> = u_xlat68;
    let x_6956 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_6955 + x_6956);
    let x_6959 : f32 = u_xlat111.x;
    let x_6961 : f32 = u_xlat2.x;
    u_xlat204 = min(x_6959, x_6961);
    let x_6964 : f32 = u_xlat43.x;
    let x_6966 : f32 = u_xlat0.x;
    let x_6968 : f32 = u_xlat204;
    u_xlat1.x = ((x_6964 * x_6966) + -(x_6968));
    let x_6972 : f32 = u_xlat204;
    let x_6975 : vec3<f32> = u_xlat2;
    let x_6977 : vec2<f32> = (-(vec2<f32>(x_6972, x_6972)) + vec2<f32>(x_6975.x, x_6975.z));
    let x_6978 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_6977.x, x_6977.y, x_6978.z);
    let x_6981 : f32 = u_xlat1.x;
    let x_6983 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_6981, x_6983);
    let x_6987 : f32 = u_xlat1.y;
    let x_6990 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_6987) + x_6990);
    let x_6994 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_6994.y, x_6994.y, x_6994.y, x_6994.y)) + vec4<f32>(0.6640625f, 0.671875f, 0.6796875f, 0.6875f));
    let x_7003 : vec4<f32> = u_xlat3;
    let x_7005 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_7003 / vec4<f32>(x_7005.x, x_7005.x, x_7005.x, x_7005.x));
    let x_7008 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_7008);
    let x_7011 : f32 = u_xlat1.y;
    let x_7013 : f32 = u_xlat3.x;
    u_xlat1.x = (x_7011 * x_7013);
    let x_7016 : vec2<f32> = u_xlat68;
    let x_7017 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7016 + x_7017);
    let x_7020 : f32 = u_xlat111.z;
    let x_7022 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7020, x_7022);
    let x_7025 : f32 = u_xlat43.z;
    let x_7027 : f32 = u_xlat0.x;
    let x_7029 : f32 = u_xlat204;
    u_xlat1.x = ((x_7025 * x_7027) + -(x_7029));
    let x_7033 : f32 = u_xlat204;
    let x_7036 : vec3<f32> = u_xlat2;
    let x_7038 : vec2<f32> = (-(vec2<f32>(x_7033, x_7033)) + vec2<f32>(x_7036.x, x_7036.z));
    let x_7039 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7038.x, x_7038.y, x_7039.z);
    let x_7042 : f32 = u_xlat1.x;
    let x_7044 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7042, x_7044);
    let x_7048 : f32 = u_xlat1.y;
    let x_7051 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7048) + x_7051);
    let x_7055 : f32 = u_xlat1.y;
    let x_7057 : f32 = u_xlat3.y;
    u_xlat1.x = (x_7055 * x_7057);
    let x_7060 : vec2<f32> = u_xlat68;
    let x_7061 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7060 + x_7061);
    let x_7064 : f32 = u_xlat112.x;
    let x_7066 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7064, x_7066);
    let x_7069 : f32 = u_xlat44.x;
    let x_7071 : f32 = u_xlat0.x;
    let x_7073 : f32 = u_xlat204;
    u_xlat1.x = ((x_7069 * x_7071) + -(x_7073));
    let x_7077 : f32 = u_xlat204;
    let x_7080 : vec3<f32> = u_xlat2;
    let x_7082 : vec2<f32> = (-(vec2<f32>(x_7077, x_7077)) + vec2<f32>(x_7080.x, x_7080.z));
    let x_7083 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7082.x, x_7082.y, x_7083.z);
    let x_7086 : f32 = u_xlat1.x;
    let x_7088 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7086, x_7088);
    let x_7092 : f32 = u_xlat1.y;
    let x_7095 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7092) + x_7095);
    let x_7099 : f32 = u_xlat1.y;
    let x_7101 : f32 = u_xlat3.z;
    u_xlat1.x = (x_7099 * x_7101);
    let x_7104 : vec2<f32> = u_xlat68;
    let x_7105 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7104 + x_7105);
    let x_7108 : f32 = u_xlat112.z;
    let x_7110 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7108, x_7110);
    let x_7113 : f32 = u_xlat44.z;
    let x_7115 : f32 = u_xlat0.x;
    let x_7117 : f32 = u_xlat204;
    u_xlat1.x = ((x_7113 * x_7115) + -(x_7117));
    let x_7121 : f32 = u_xlat204;
    let x_7124 : vec3<f32> = u_xlat2;
    let x_7126 : vec2<f32> = (-(vec2<f32>(x_7121, x_7121)) + vec2<f32>(x_7124.x, x_7124.z));
    let x_7127 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7126.x, x_7126.y, x_7127.z);
    let x_7130 : f32 = u_xlat1.x;
    let x_7132 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7130, x_7132);
    let x_7136 : f32 = u_xlat1.y;
    let x_7139 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7136) + x_7139);
    let x_7143 : f32 = u_xlat1.y;
    let x_7145 : f32 = u_xlat3.w;
    u_xlat1.x = (x_7143 * x_7145);
    let x_7148 : vec2<f32> = u_xlat68;
    let x_7149 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7148 + x_7149);
    let x_7152 : f32 = u_xlat113.x;
    let x_7154 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7152, x_7154);
    let x_7157 : f32 = u_xlat45.x;
    let x_7159 : f32 = u_xlat0.x;
    let x_7161 : f32 = u_xlat204;
    u_xlat1.x = ((x_7157 * x_7159) + -(x_7161));
    let x_7165 : f32 = u_xlat204;
    let x_7168 : vec3<f32> = u_xlat2;
    let x_7170 : vec2<f32> = (-(vec2<f32>(x_7165, x_7165)) + vec2<f32>(x_7168.x, x_7168.z));
    let x_7171 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7170.x, x_7170.y, x_7171.z);
    let x_7174 : f32 = u_xlat1.x;
    let x_7176 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7174, x_7176);
    let x_7180 : f32 = u_xlat1.y;
    let x_7183 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7180) + x_7183);
    let x_7187 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_7187.y, x_7187.y, x_7187.y, x_7187.y)) + vec4<f32>(0.6953125f, 0.703125f, 0.7109375f, 0.71875f));
    let x_7196 : vec4<f32> = u_xlat3;
    let x_7198 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_7196 / vec4<f32>(x_7198.x, x_7198.x, x_7198.x, x_7198.x));
    let x_7201 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_7201);
    let x_7204 : f32 = u_xlat1.y;
    let x_7206 : f32 = u_xlat3.x;
    u_xlat1.x = (x_7204 * x_7206);
    let x_7209 : vec2<f32> = u_xlat68;
    let x_7210 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7209 + x_7210);
    let x_7213 : f32 = u_xlat113.z;
    let x_7215 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7213, x_7215);
    let x_7218 : f32 = u_xlat45.z;
    let x_7220 : f32 = u_xlat0.x;
    let x_7222 : f32 = u_xlat204;
    u_xlat1.x = ((x_7218 * x_7220) + -(x_7222));
    let x_7226 : f32 = u_xlat204;
    let x_7229 : vec3<f32> = u_xlat2;
    let x_7231 : vec2<f32> = (-(vec2<f32>(x_7226, x_7226)) + vec2<f32>(x_7229.x, x_7229.z));
    let x_7232 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7231.x, x_7231.y, x_7232.z);
    let x_7235 : f32 = u_xlat1.x;
    let x_7237 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7235, x_7237);
    let x_7241 : f32 = u_xlat1.y;
    let x_7244 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7241) + x_7244);
    let x_7248 : f32 = u_xlat1.y;
    let x_7250 : f32 = u_xlat3.y;
    u_xlat1.x = (x_7248 * x_7250);
    let x_7253 : vec2<f32> = u_xlat68;
    let x_7254 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7253 + x_7254);
    let x_7257 : f32 = u_xlat114.x;
    let x_7259 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7257, x_7259);
    let x_7262 : f32 = u_xlat46.x;
    let x_7264 : f32 = u_xlat0.x;
    let x_7266 : f32 = u_xlat204;
    u_xlat1.x = ((x_7262 * x_7264) + -(x_7266));
    let x_7270 : f32 = u_xlat204;
    let x_7273 : vec3<f32> = u_xlat2;
    let x_7275 : vec2<f32> = (-(vec2<f32>(x_7270, x_7270)) + vec2<f32>(x_7273.x, x_7273.z));
    let x_7276 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7275.x, x_7275.y, x_7276.z);
    let x_7279 : f32 = u_xlat1.x;
    let x_7281 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7279, x_7281);
    let x_7285 : f32 = u_xlat1.y;
    let x_7288 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7285) + x_7288);
    let x_7292 : f32 = u_xlat1.y;
    let x_7294 : f32 = u_xlat3.z;
    u_xlat1.x = (x_7292 * x_7294);
    let x_7297 : vec2<f32> = u_xlat68;
    let x_7298 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7297 + x_7298);
    let x_7301 : f32 = u_xlat114.z;
    let x_7303 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7301, x_7303);
    let x_7306 : f32 = u_xlat46.z;
    let x_7308 : f32 = u_xlat0.x;
    let x_7310 : f32 = u_xlat204;
    u_xlat1.x = ((x_7306 * x_7308) + -(x_7310));
    let x_7314 : f32 = u_xlat204;
    let x_7317 : vec3<f32> = u_xlat2;
    let x_7319 : vec2<f32> = (-(vec2<f32>(x_7314, x_7314)) + vec2<f32>(x_7317.x, x_7317.z));
    let x_7320 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7319.x, x_7319.y, x_7320.z);
    let x_7323 : f32 = u_xlat1.x;
    let x_7325 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7323, x_7325);
    let x_7329 : f32 = u_xlat1.y;
    let x_7332 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7329) + x_7332);
    let x_7336 : f32 = u_xlat1.y;
    let x_7338 : f32 = u_xlat3.w;
    u_xlat1.x = (x_7336 * x_7338);
    let x_7341 : vec2<f32> = u_xlat68;
    let x_7342 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7341 + x_7342);
    let x_7345 : f32 = u_xlat115.x;
    let x_7347 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7345, x_7347);
    let x_7350 : f32 = u_xlat47.x;
    let x_7352 : f32 = u_xlat0.x;
    let x_7354 : f32 = u_xlat204;
    u_xlat1.x = ((x_7350 * x_7352) + -(x_7354));
    let x_7358 : f32 = u_xlat204;
    let x_7361 : vec3<f32> = u_xlat2;
    let x_7363 : vec2<f32> = (-(vec2<f32>(x_7358, x_7358)) + vec2<f32>(x_7361.x, x_7361.z));
    let x_7364 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7363.x, x_7363.y, x_7364.z);
    let x_7367 : f32 = u_xlat1.x;
    let x_7369 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7367, x_7369);
    let x_7373 : f32 = u_xlat1.y;
    let x_7376 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7373) + x_7376);
    let x_7380 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_7380.y, x_7380.y, x_7380.y, x_7380.y)) + vec4<f32>(0.7265625f, 0.734375f, 0.7421875f, 0.75f));
    let x_7389 : vec4<f32> = u_xlat3;
    let x_7391 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_7389 / vec4<f32>(x_7391.x, x_7391.x, x_7391.x, x_7391.x));
    let x_7394 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_7394);
    let x_7397 : f32 = u_xlat1.y;
    let x_7399 : f32 = u_xlat3.x;
    u_xlat1.x = (x_7397 * x_7399);
    let x_7402 : vec2<f32> = u_xlat68;
    let x_7403 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7402 + x_7403);
    let x_7406 : f32 = u_xlat115.z;
    let x_7408 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7406, x_7408);
    let x_7411 : f32 = u_xlat47.z;
    let x_7413 : f32 = u_xlat0.x;
    let x_7415 : f32 = u_xlat204;
    u_xlat1.x = ((x_7411 * x_7413) + -(x_7415));
    let x_7419 : f32 = u_xlat204;
    let x_7422 : vec3<f32> = u_xlat2;
    let x_7424 : vec2<f32> = (-(vec2<f32>(x_7419, x_7419)) + vec2<f32>(x_7422.x, x_7422.z));
    let x_7425 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7424.x, x_7424.y, x_7425.z);
    let x_7428 : f32 = u_xlat1.x;
    let x_7430 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7428, x_7430);
    let x_7434 : f32 = u_xlat1.y;
    let x_7437 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7434) + x_7437);
    let x_7441 : f32 = u_xlat1.y;
    let x_7443 : f32 = u_xlat3.y;
    u_xlat1.x = (x_7441 * x_7443);
    let x_7446 : vec2<f32> = u_xlat68;
    let x_7447 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7446 + x_7447);
    let x_7450 : f32 = u_xlat116.x;
    let x_7452 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7450, x_7452);
    let x_7455 : f32 = u_xlat48.x;
    let x_7457 : f32 = u_xlat0.x;
    let x_7459 : f32 = u_xlat204;
    u_xlat1.x = ((x_7455 * x_7457) + -(x_7459));
    let x_7463 : f32 = u_xlat204;
    let x_7466 : vec3<f32> = u_xlat2;
    let x_7468 : vec2<f32> = (-(vec2<f32>(x_7463, x_7463)) + vec2<f32>(x_7466.x, x_7466.z));
    let x_7469 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7468.x, x_7468.y, x_7469.z);
    let x_7472 : f32 = u_xlat1.x;
    let x_7474 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7472, x_7474);
    let x_7478 : f32 = u_xlat1.y;
    let x_7481 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7478) + x_7481);
    let x_7485 : f32 = u_xlat1.y;
    let x_7487 : f32 = u_xlat3.z;
    u_xlat1.x = (x_7485 * x_7487);
    let x_7490 : vec2<f32> = u_xlat68;
    let x_7491 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7490 + x_7491);
    let x_7494 : f32 = u_xlat116.z;
    let x_7496 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7494, x_7496);
    let x_7499 : f32 = u_xlat48.z;
    let x_7501 : f32 = u_xlat0.x;
    let x_7503 : f32 = u_xlat204;
    u_xlat1.x = ((x_7499 * x_7501) + -(x_7503));
    let x_7507 : f32 = u_xlat204;
    let x_7510 : vec3<f32> = u_xlat2;
    let x_7512 : vec2<f32> = (-(vec2<f32>(x_7507, x_7507)) + vec2<f32>(x_7510.x, x_7510.z));
    let x_7513 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7512.x, x_7512.y, x_7513.z);
    let x_7516 : f32 = u_xlat1.x;
    let x_7518 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7516, x_7518);
    let x_7522 : f32 = u_xlat1.y;
    let x_7525 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7522) + x_7525);
    let x_7529 : f32 = u_xlat1.y;
    let x_7531 : f32 = u_xlat3.w;
    u_xlat1.x = (x_7529 * x_7531);
    let x_7534 : vec2<f32> = u_xlat68;
    let x_7535 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7534 + x_7535);
    let x_7538 : f32 = u_xlat117.x;
    let x_7540 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7538, x_7540);
    let x_7543 : f32 = u_xlat49.x;
    let x_7545 : f32 = u_xlat0.x;
    let x_7547 : f32 = u_xlat204;
    u_xlat1.x = ((x_7543 * x_7545) + -(x_7547));
    let x_7551 : f32 = u_xlat204;
    let x_7554 : vec3<f32> = u_xlat2;
    let x_7556 : vec2<f32> = (-(vec2<f32>(x_7551, x_7551)) + vec2<f32>(x_7554.x, x_7554.z));
    let x_7557 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7556.x, x_7556.y, x_7557.z);
    let x_7560 : f32 = u_xlat1.x;
    let x_7562 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7560, x_7562);
    let x_7566 : f32 = u_xlat1.y;
    let x_7569 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7566) + x_7569);
    let x_7573 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_7573.y, x_7573.y, x_7573.y, x_7573.y)) + vec4<f32>(0.7578125f, 0.765625f, 0.7734375f, 0.78125f));
    let x_7582 : vec4<f32> = u_xlat3;
    let x_7584 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_7582 / vec4<f32>(x_7584.x, x_7584.x, x_7584.x, x_7584.x));
    let x_7587 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_7587);
    let x_7590 : f32 = u_xlat1.y;
    let x_7592 : f32 = u_xlat3.x;
    u_xlat1.x = (x_7590 * x_7592);
    let x_7595 : vec2<f32> = u_xlat68;
    let x_7596 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7595 + x_7596);
    let x_7599 : f32 = u_xlat117.z;
    let x_7601 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7599, x_7601);
    let x_7604 : f32 = u_xlat49.z;
    let x_7606 : f32 = u_xlat0.x;
    let x_7608 : f32 = u_xlat204;
    u_xlat1.x = ((x_7604 * x_7606) + -(x_7608));
    let x_7612 : f32 = u_xlat204;
    let x_7615 : vec3<f32> = u_xlat2;
    let x_7617 : vec2<f32> = (-(vec2<f32>(x_7612, x_7612)) + vec2<f32>(x_7615.x, x_7615.z));
    let x_7618 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7617.x, x_7617.y, x_7618.z);
    let x_7621 : f32 = u_xlat1.x;
    let x_7623 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7621, x_7623);
    let x_7627 : f32 = u_xlat1.y;
    let x_7630 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7627) + x_7630);
    let x_7634 : f32 = u_xlat1.y;
    let x_7636 : f32 = u_xlat3.y;
    u_xlat1.x = (x_7634 * x_7636);
    let x_7639 : vec2<f32> = u_xlat68;
    let x_7640 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7639 + x_7640);
    let x_7643 : f32 = u_xlat118.x;
    let x_7645 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7643, x_7645);
    let x_7648 : f32 = u_xlat50.x;
    let x_7650 : f32 = u_xlat0.x;
    let x_7652 : f32 = u_xlat204;
    u_xlat1.x = ((x_7648 * x_7650) + -(x_7652));
    let x_7656 : f32 = u_xlat204;
    let x_7659 : vec3<f32> = u_xlat2;
    let x_7661 : vec2<f32> = (-(vec2<f32>(x_7656, x_7656)) + vec2<f32>(x_7659.x, x_7659.z));
    let x_7662 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7661.x, x_7661.y, x_7662.z);
    let x_7665 : f32 = u_xlat1.x;
    let x_7667 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7665, x_7667);
    let x_7671 : f32 = u_xlat1.y;
    let x_7674 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7671) + x_7674);
    let x_7678 : f32 = u_xlat1.y;
    let x_7680 : f32 = u_xlat3.z;
    u_xlat1.x = (x_7678 * x_7680);
    let x_7683 : vec2<f32> = u_xlat68;
    let x_7684 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7683 + x_7684);
    let x_7687 : f32 = u_xlat118.z;
    let x_7689 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7687, x_7689);
    let x_7692 : f32 = u_xlat50.z;
    let x_7694 : f32 = u_xlat0.x;
    let x_7696 : f32 = u_xlat204;
    u_xlat1.x = ((x_7692 * x_7694) + -(x_7696));
    let x_7700 : f32 = u_xlat204;
    let x_7703 : vec3<f32> = u_xlat2;
    let x_7705 : vec2<f32> = (-(vec2<f32>(x_7700, x_7700)) + vec2<f32>(x_7703.x, x_7703.z));
    let x_7706 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7705.x, x_7705.y, x_7706.z);
    let x_7709 : f32 = u_xlat1.x;
    let x_7711 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7709, x_7711);
    let x_7715 : f32 = u_xlat1.y;
    let x_7718 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7715) + x_7718);
    let x_7722 : f32 = u_xlat1.y;
    let x_7724 : f32 = u_xlat3.w;
    u_xlat1.x = (x_7722 * x_7724);
    let x_7727 : vec2<f32> = u_xlat68;
    let x_7728 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7727 + x_7728);
    let x_7731 : f32 = u_xlat119.x;
    let x_7733 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7731, x_7733);
    let x_7736 : f32 = u_xlat51.x;
    let x_7738 : f32 = u_xlat0.x;
    let x_7740 : f32 = u_xlat204;
    u_xlat1.x = ((x_7736 * x_7738) + -(x_7740));
    let x_7744 : f32 = u_xlat204;
    let x_7747 : vec3<f32> = u_xlat2;
    let x_7749 : vec2<f32> = (-(vec2<f32>(x_7744, x_7744)) + vec2<f32>(x_7747.x, x_7747.z));
    let x_7750 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7749.x, x_7749.y, x_7750.z);
    let x_7753 : f32 = u_xlat1.x;
    let x_7755 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7753, x_7755);
    let x_7759 : f32 = u_xlat1.y;
    let x_7762 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7759) + x_7762);
    let x_7766 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_7766.y, x_7766.y, x_7766.y, x_7766.y)) + vec4<f32>(0.7890625f, 0.796875f, 0.8046875f, 0.8125f));
    let x_7775 : vec4<f32> = u_xlat3;
    let x_7777 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_7775 / vec4<f32>(x_7777.x, x_7777.x, x_7777.x, x_7777.x));
    let x_7780 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_7780);
    let x_7783 : f32 = u_xlat1.y;
    let x_7785 : f32 = u_xlat3.x;
    u_xlat1.x = (x_7783 * x_7785);
    let x_7788 : vec2<f32> = u_xlat68;
    let x_7789 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7788 + x_7789);
    let x_7792 : f32 = u_xlat119.z;
    let x_7794 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7792, x_7794);
    let x_7797 : f32 = u_xlat51.z;
    let x_7799 : f32 = u_xlat0.x;
    let x_7801 : f32 = u_xlat204;
    u_xlat1.x = ((x_7797 * x_7799) + -(x_7801));
    let x_7805 : f32 = u_xlat204;
    let x_7808 : vec3<f32> = u_xlat2;
    let x_7810 : vec2<f32> = (-(vec2<f32>(x_7805, x_7805)) + vec2<f32>(x_7808.x, x_7808.z));
    let x_7811 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7810.x, x_7810.y, x_7811.z);
    let x_7814 : f32 = u_xlat1.x;
    let x_7816 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7814, x_7816);
    let x_7820 : f32 = u_xlat1.y;
    let x_7823 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7820) + x_7823);
    let x_7827 : f32 = u_xlat1.y;
    let x_7829 : f32 = u_xlat3.y;
    u_xlat1.x = (x_7827 * x_7829);
    let x_7832 : vec2<f32> = u_xlat68;
    let x_7833 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7832 + x_7833);
    let x_7836 : f32 = u_xlat120.x;
    let x_7838 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7836, x_7838);
    let x_7841 : f32 = u_xlat52.x;
    let x_7843 : f32 = u_xlat0.x;
    let x_7845 : f32 = u_xlat204;
    u_xlat1.x = ((x_7841 * x_7843) + -(x_7845));
    let x_7849 : f32 = u_xlat204;
    let x_7852 : vec3<f32> = u_xlat2;
    let x_7854 : vec2<f32> = (-(vec2<f32>(x_7849, x_7849)) + vec2<f32>(x_7852.x, x_7852.z));
    let x_7855 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7854.x, x_7854.y, x_7855.z);
    let x_7858 : f32 = u_xlat1.x;
    let x_7860 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7858, x_7860);
    let x_7864 : f32 = u_xlat1.y;
    let x_7867 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7864) + x_7867);
    let x_7871 : f32 = u_xlat1.y;
    let x_7873 : f32 = u_xlat3.z;
    u_xlat1.x = (x_7871 * x_7873);
    let x_7876 : vec2<f32> = u_xlat68;
    let x_7877 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7876 + x_7877);
    let x_7880 : f32 = u_xlat120.z;
    let x_7882 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7880, x_7882);
    let x_7885 : f32 = u_xlat52.z;
    let x_7887 : f32 = u_xlat0.x;
    let x_7889 : f32 = u_xlat204;
    u_xlat1.x = ((x_7885 * x_7887) + -(x_7889));
    let x_7893 : f32 = u_xlat204;
    let x_7896 : vec3<f32> = u_xlat2;
    let x_7898 : vec2<f32> = (-(vec2<f32>(x_7893, x_7893)) + vec2<f32>(x_7896.x, x_7896.z));
    let x_7899 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7898.x, x_7898.y, x_7899.z);
    let x_7902 : f32 = u_xlat1.x;
    let x_7904 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7902, x_7904);
    let x_7908 : f32 = u_xlat1.y;
    let x_7911 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7908) + x_7911);
    let x_7915 : f32 = u_xlat1.y;
    let x_7917 : f32 = u_xlat3.w;
    u_xlat1.x = (x_7915 * x_7917);
    let x_7920 : vec2<f32> = u_xlat68;
    let x_7921 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7920 + x_7921);
    let x_7924 : f32 = u_xlat121.x;
    let x_7926 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7924, x_7926);
    let x_7929 : f32 = u_xlat53.x;
    let x_7931 : f32 = u_xlat0.x;
    let x_7933 : f32 = u_xlat204;
    u_xlat1.x = ((x_7929 * x_7931) + -(x_7933));
    let x_7937 : f32 = u_xlat204;
    let x_7940 : vec3<f32> = u_xlat2;
    let x_7942 : vec2<f32> = (-(vec2<f32>(x_7937, x_7937)) + vec2<f32>(x_7940.x, x_7940.z));
    let x_7943 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_7942.x, x_7942.y, x_7943.z);
    let x_7946 : f32 = u_xlat1.x;
    let x_7948 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_7946, x_7948);
    let x_7952 : f32 = u_xlat1.y;
    let x_7955 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_7952) + x_7955);
    let x_7959 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_7959.y, x_7959.y, x_7959.y, x_7959.y)) + vec4<f32>(0.8203125f, 0.828125f, 0.8359375f, 0.84375f));
    let x_7968 : vec4<f32> = u_xlat3;
    let x_7970 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_7968 / vec4<f32>(x_7970.x, x_7970.x, x_7970.x, x_7970.x));
    let x_7973 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_7973);
    let x_7976 : f32 = u_xlat1.y;
    let x_7978 : f32 = u_xlat3.x;
    u_xlat1.x = (x_7976 * x_7978);
    let x_7981 : vec2<f32> = u_xlat68;
    let x_7982 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_7981 + x_7982);
    let x_7985 : f32 = u_xlat121.z;
    let x_7987 : f32 = u_xlat2.x;
    u_xlat204 = min(x_7985, x_7987);
    let x_7990 : f32 = u_xlat53.z;
    let x_7992 : f32 = u_xlat0.x;
    let x_7994 : f32 = u_xlat204;
    u_xlat1.x = ((x_7990 * x_7992) + -(x_7994));
    let x_7998 : f32 = u_xlat204;
    let x_8001 : vec3<f32> = u_xlat2;
    let x_8003 : vec2<f32> = (-(vec2<f32>(x_7998, x_7998)) + vec2<f32>(x_8001.x, x_8001.z));
    let x_8004 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8003.x, x_8003.y, x_8004.z);
    let x_8007 : f32 = u_xlat1.x;
    let x_8009 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8007, x_8009);
    let x_8013 : f32 = u_xlat1.y;
    let x_8016 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8013) + x_8016);
    let x_8020 : f32 = u_xlat1.y;
    let x_8022 : f32 = u_xlat3.y;
    u_xlat1.x = (x_8020 * x_8022);
    let x_8025 : vec2<f32> = u_xlat68;
    let x_8026 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8025 + x_8026);
    let x_8029 : f32 = u_xlat122.x;
    let x_8031 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8029, x_8031);
    let x_8034 : f32 = u_xlat54.x;
    let x_8036 : f32 = u_xlat0.x;
    let x_8038 : f32 = u_xlat204;
    u_xlat1.x = ((x_8034 * x_8036) + -(x_8038));
    let x_8042 : f32 = u_xlat204;
    let x_8045 : vec3<f32> = u_xlat2;
    let x_8047 : vec2<f32> = (-(vec2<f32>(x_8042, x_8042)) + vec2<f32>(x_8045.x, x_8045.z));
    let x_8048 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8047.x, x_8047.y, x_8048.z);
    let x_8051 : f32 = u_xlat1.x;
    let x_8053 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8051, x_8053);
    let x_8057 : f32 = u_xlat1.y;
    let x_8060 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8057) + x_8060);
    let x_8064 : f32 = u_xlat1.y;
    let x_8066 : f32 = u_xlat3.z;
    u_xlat1.x = (x_8064 * x_8066);
    let x_8069 : vec2<f32> = u_xlat68;
    let x_8070 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8069 + x_8070);
    let x_8073 : f32 = u_xlat122.z;
    let x_8075 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8073, x_8075);
    let x_8078 : f32 = u_xlat54.z;
    let x_8080 : f32 = u_xlat0.x;
    let x_8082 : f32 = u_xlat204;
    u_xlat1.x = ((x_8078 * x_8080) + -(x_8082));
    let x_8086 : f32 = u_xlat204;
    let x_8089 : vec3<f32> = u_xlat2;
    let x_8091 : vec2<f32> = (-(vec2<f32>(x_8086, x_8086)) + vec2<f32>(x_8089.x, x_8089.z));
    let x_8092 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8091.x, x_8091.y, x_8092.z);
    let x_8095 : f32 = u_xlat1.x;
    let x_8097 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8095, x_8097);
    let x_8101 : f32 = u_xlat1.y;
    let x_8104 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8101) + x_8104);
    let x_8108 : f32 = u_xlat1.y;
    let x_8110 : f32 = u_xlat3.w;
    u_xlat1.x = (x_8108 * x_8110);
    let x_8113 : vec2<f32> = u_xlat68;
    let x_8114 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8113 + x_8114);
    let x_8117 : f32 = u_xlat123.x;
    let x_8119 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8117, x_8119);
    let x_8122 : f32 = u_xlat55.x;
    let x_8124 : f32 = u_xlat0.x;
    let x_8126 : f32 = u_xlat204;
    u_xlat1.x = ((x_8122 * x_8124) + -(x_8126));
    let x_8130 : f32 = u_xlat204;
    let x_8133 : vec3<f32> = u_xlat2;
    let x_8135 : vec2<f32> = (-(vec2<f32>(x_8130, x_8130)) + vec2<f32>(x_8133.x, x_8133.z));
    let x_8136 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8135.x, x_8135.y, x_8136.z);
    let x_8139 : f32 = u_xlat1.x;
    let x_8141 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8139, x_8141);
    let x_8145 : f32 = u_xlat1.y;
    let x_8148 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8145) + x_8148);
    let x_8152 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_8152.y, x_8152.y, x_8152.y, x_8152.y)) + vec4<f32>(0.8515625f, 0.859375f, 0.8671875f, 0.875f));
    let x_8161 : vec4<f32> = u_xlat3;
    let x_8163 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_8161 / vec4<f32>(x_8163.x, x_8163.x, x_8163.x, x_8163.x));
    let x_8166 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_8166);
    let x_8169 : f32 = u_xlat1.y;
    let x_8171 : f32 = u_xlat3.x;
    u_xlat1.x = (x_8169 * x_8171);
    let x_8174 : vec2<f32> = u_xlat68;
    let x_8175 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8174 + x_8175);
    let x_8178 : f32 = u_xlat123.z;
    let x_8180 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8178, x_8180);
    let x_8183 : f32 = u_xlat55.z;
    let x_8185 : f32 = u_xlat0.x;
    let x_8187 : f32 = u_xlat204;
    u_xlat1.x = ((x_8183 * x_8185) + -(x_8187));
    let x_8191 : f32 = u_xlat204;
    let x_8194 : vec3<f32> = u_xlat2;
    let x_8196 : vec2<f32> = (-(vec2<f32>(x_8191, x_8191)) + vec2<f32>(x_8194.x, x_8194.z));
    let x_8197 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8196.x, x_8196.y, x_8197.z);
    let x_8200 : f32 = u_xlat1.x;
    let x_8202 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8200, x_8202);
    let x_8206 : f32 = u_xlat1.y;
    let x_8209 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8206) + x_8209);
    let x_8213 : f32 = u_xlat1.y;
    let x_8215 : f32 = u_xlat3.y;
    u_xlat1.x = (x_8213 * x_8215);
    let x_8218 : vec2<f32> = u_xlat68;
    let x_8219 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8218 + x_8219);
    let x_8222 : f32 = u_xlat124.x;
    let x_8224 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8222, x_8224);
    let x_8227 : f32 = u_xlat56.x;
    let x_8229 : f32 = u_xlat0.x;
    let x_8231 : f32 = u_xlat204;
    u_xlat1.x = ((x_8227 * x_8229) + -(x_8231));
    let x_8235 : f32 = u_xlat204;
    let x_8238 : vec3<f32> = u_xlat2;
    let x_8240 : vec2<f32> = (-(vec2<f32>(x_8235, x_8235)) + vec2<f32>(x_8238.x, x_8238.z));
    let x_8241 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8240.x, x_8240.y, x_8241.z);
    let x_8244 : f32 = u_xlat1.x;
    let x_8246 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8244, x_8246);
    let x_8250 : f32 = u_xlat1.y;
    let x_8253 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8250) + x_8253);
    let x_8257 : f32 = u_xlat1.y;
    let x_8259 : f32 = u_xlat3.z;
    u_xlat1.x = (x_8257 * x_8259);
    let x_8262 : vec2<f32> = u_xlat68;
    let x_8263 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8262 + x_8263);
    let x_8266 : f32 = u_xlat124.z;
    let x_8268 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8266, x_8268);
    let x_8271 : f32 = u_xlat56.z;
    let x_8273 : f32 = u_xlat0.x;
    let x_8275 : f32 = u_xlat204;
    u_xlat1.x = ((x_8271 * x_8273) + -(x_8275));
    let x_8279 : f32 = u_xlat204;
    let x_8282 : vec3<f32> = u_xlat2;
    let x_8284 : vec2<f32> = (-(vec2<f32>(x_8279, x_8279)) + vec2<f32>(x_8282.x, x_8282.z));
    let x_8285 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8284.x, x_8284.y, x_8285.z);
    let x_8288 : f32 = u_xlat1.x;
    let x_8290 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8288, x_8290);
    let x_8294 : f32 = u_xlat1.y;
    let x_8297 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8294) + x_8297);
    let x_8301 : f32 = u_xlat1.y;
    let x_8303 : f32 = u_xlat3.w;
    u_xlat1.x = (x_8301 * x_8303);
    let x_8306 : vec2<f32> = u_xlat68;
    let x_8307 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8306 + x_8307);
    let x_8310 : f32 = u_xlat125.x;
    let x_8312 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8310, x_8312);
    let x_8315 : f32 = u_xlat57.x;
    let x_8317 : f32 = u_xlat0.x;
    let x_8319 : f32 = u_xlat204;
    u_xlat1.x = ((x_8315 * x_8317) + -(x_8319));
    let x_8323 : f32 = u_xlat204;
    let x_8326 : vec3<f32> = u_xlat2;
    let x_8328 : vec2<f32> = (-(vec2<f32>(x_8323, x_8323)) + vec2<f32>(x_8326.x, x_8326.z));
    let x_8329 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8328.x, x_8328.y, x_8329.z);
    let x_8332 : f32 = u_xlat1.x;
    let x_8334 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8332, x_8334);
    let x_8338 : f32 = u_xlat1.y;
    let x_8341 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8338) + x_8341);
    let x_8345 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_8345.y, x_8345.y, x_8345.y, x_8345.y)) + vec4<f32>(0.8828125f, 0.890625f, 0.8984375f, 0.90625f));
    let x_8354 : vec4<f32> = u_xlat3;
    let x_8356 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_8354 / vec4<f32>(x_8356.x, x_8356.x, x_8356.x, x_8356.x));
    let x_8359 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_8359);
    let x_8362 : f32 = u_xlat1.y;
    let x_8364 : f32 = u_xlat3.x;
    u_xlat1.x = (x_8362 * x_8364);
    let x_8367 : vec2<f32> = u_xlat68;
    let x_8368 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8367 + x_8368);
    let x_8371 : f32 = u_xlat125.z;
    let x_8373 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8371, x_8373);
    let x_8376 : f32 = u_xlat57.z;
    let x_8378 : f32 = u_xlat0.x;
    let x_8380 : f32 = u_xlat204;
    u_xlat1.x = ((x_8376 * x_8378) + -(x_8380));
    let x_8384 : f32 = u_xlat204;
    let x_8387 : vec3<f32> = u_xlat2;
    let x_8389 : vec2<f32> = (-(vec2<f32>(x_8384, x_8384)) + vec2<f32>(x_8387.x, x_8387.z));
    let x_8390 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8389.x, x_8389.y, x_8390.z);
    let x_8393 : f32 = u_xlat1.x;
    let x_8395 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8393, x_8395);
    let x_8399 : f32 = u_xlat1.y;
    let x_8402 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8399) + x_8402);
    let x_8406 : f32 = u_xlat1.y;
    let x_8408 : f32 = u_xlat3.y;
    u_xlat1.x = (x_8406 * x_8408);
    let x_8411 : vec2<f32> = u_xlat68;
    let x_8412 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8411 + x_8412);
    let x_8415 : f32 = u_xlat126.x;
    let x_8417 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8415, x_8417);
    let x_8420 : f32 = u_xlat58.x;
    let x_8422 : f32 = u_xlat0.x;
    let x_8424 : f32 = u_xlat204;
    u_xlat1.x = ((x_8420 * x_8422) + -(x_8424));
    let x_8428 : f32 = u_xlat204;
    let x_8431 : vec3<f32> = u_xlat2;
    let x_8433 : vec2<f32> = (-(vec2<f32>(x_8428, x_8428)) + vec2<f32>(x_8431.x, x_8431.z));
    let x_8434 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8433.x, x_8433.y, x_8434.z);
    let x_8437 : f32 = u_xlat1.x;
    let x_8439 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8437, x_8439);
    let x_8443 : f32 = u_xlat1.y;
    let x_8446 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8443) + x_8446);
    let x_8450 : f32 = u_xlat1.y;
    let x_8452 : f32 = u_xlat3.z;
    u_xlat1.x = (x_8450 * x_8452);
    let x_8455 : vec2<f32> = u_xlat68;
    let x_8456 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8455 + x_8456);
    let x_8459 : f32 = u_xlat126.z;
    let x_8461 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8459, x_8461);
    let x_8464 : f32 = u_xlat58.z;
    let x_8466 : f32 = u_xlat0.x;
    let x_8468 : f32 = u_xlat204;
    u_xlat1.x = ((x_8464 * x_8466) + -(x_8468));
    let x_8472 : f32 = u_xlat204;
    let x_8475 : vec3<f32> = u_xlat2;
    let x_8477 : vec2<f32> = (-(vec2<f32>(x_8472, x_8472)) + vec2<f32>(x_8475.x, x_8475.z));
    let x_8478 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8477.x, x_8477.y, x_8478.z);
    let x_8481 : f32 = u_xlat1.x;
    let x_8483 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8481, x_8483);
    let x_8487 : f32 = u_xlat1.y;
    let x_8490 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8487) + x_8490);
    let x_8494 : f32 = u_xlat1.y;
    let x_8496 : f32 = u_xlat3.w;
    u_xlat1.x = (x_8494 * x_8496);
    let x_8499 : vec2<f32> = u_xlat68;
    let x_8500 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8499 + x_8500);
    let x_8503 : f32 = u_xlat127.x;
    let x_8505 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8503, x_8505);
    let x_8508 : f32 = u_xlat59.x;
    let x_8510 : f32 = u_xlat0.x;
    let x_8512 : f32 = u_xlat204;
    u_xlat1.x = ((x_8508 * x_8510) + -(x_8512));
    let x_8516 : f32 = u_xlat204;
    let x_8519 : vec3<f32> = u_xlat2;
    let x_8521 : vec2<f32> = (-(vec2<f32>(x_8516, x_8516)) + vec2<f32>(x_8519.x, x_8519.z));
    let x_8522 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8521.x, x_8521.y, x_8522.z);
    let x_8525 : f32 = u_xlat1.x;
    let x_8527 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8525, x_8527);
    let x_8531 : f32 = u_xlat1.y;
    let x_8534 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8531) + x_8534);
    let x_8538 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_8538.y, x_8538.y, x_8538.y, x_8538.y)) + vec4<f32>(0.9140625f, 0.921875f, 0.9296875f, 0.9375f));
    let x_8547 : vec4<f32> = u_xlat3;
    let x_8549 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_8547 / vec4<f32>(x_8549.x, x_8549.x, x_8549.x, x_8549.x));
    let x_8552 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_8552);
    let x_8555 : f32 = u_xlat1.y;
    let x_8557 : f32 = u_xlat3.x;
    u_xlat1.x = (x_8555 * x_8557);
    let x_8560 : vec2<f32> = u_xlat68;
    let x_8561 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8560 + x_8561);
    let x_8564 : f32 = u_xlat127.z;
    let x_8566 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8564, x_8566);
    let x_8569 : f32 = u_xlat59.z;
    let x_8571 : f32 = u_xlat0.x;
    let x_8573 : f32 = u_xlat204;
    u_xlat1.x = ((x_8569 * x_8571) + -(x_8573));
    let x_8577 : f32 = u_xlat204;
    let x_8580 : vec3<f32> = u_xlat2;
    let x_8582 : vec2<f32> = (-(vec2<f32>(x_8577, x_8577)) + vec2<f32>(x_8580.x, x_8580.z));
    let x_8583 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8582.x, x_8582.y, x_8583.z);
    let x_8586 : f32 = u_xlat1.x;
    let x_8588 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8586, x_8588);
    let x_8592 : f32 = u_xlat1.y;
    let x_8595 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8592) + x_8595);
    let x_8599 : f32 = u_xlat1.y;
    let x_8601 : f32 = u_xlat3.y;
    u_xlat1.x = (x_8599 * x_8601);
    let x_8604 : vec2<f32> = u_xlat68;
    let x_8605 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8604 + x_8605);
    let x_8608 : f32 = u_xlat128.x;
    let x_8610 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8608, x_8610);
    let x_8613 : f32 = u_xlat60.x;
    let x_8615 : f32 = u_xlat0.x;
    let x_8617 : f32 = u_xlat204;
    u_xlat1.x = ((x_8613 * x_8615) + -(x_8617));
    let x_8621 : f32 = u_xlat204;
    let x_8624 : vec3<f32> = u_xlat2;
    let x_8626 : vec2<f32> = (-(vec2<f32>(x_8621, x_8621)) + vec2<f32>(x_8624.x, x_8624.z));
    let x_8627 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8626.x, x_8626.y, x_8627.z);
    let x_8630 : f32 = u_xlat1.x;
    let x_8632 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8630, x_8632);
    let x_8636 : f32 = u_xlat1.y;
    let x_8639 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8636) + x_8639);
    let x_8643 : f32 = u_xlat1.y;
    let x_8645 : f32 = u_xlat3.z;
    u_xlat1.x = (x_8643 * x_8645);
    let x_8648 : vec2<f32> = u_xlat68;
    let x_8649 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8648 + x_8649);
    let x_8652 : f32 = u_xlat128.z;
    let x_8654 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8652, x_8654);
    let x_8657 : f32 = u_xlat60.z;
    let x_8659 : f32 = u_xlat0.x;
    let x_8661 : f32 = u_xlat204;
    u_xlat1.x = ((x_8657 * x_8659) + -(x_8661));
    let x_8665 : f32 = u_xlat204;
    let x_8668 : vec3<f32> = u_xlat2;
    let x_8670 : vec2<f32> = (-(vec2<f32>(x_8665, x_8665)) + vec2<f32>(x_8668.x, x_8668.z));
    let x_8671 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8670.x, x_8670.y, x_8671.z);
    let x_8674 : f32 = u_xlat1.x;
    let x_8676 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8674, x_8676);
    let x_8680 : f32 = u_xlat1.y;
    let x_8683 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8680) + x_8683);
    let x_8687 : f32 = u_xlat1.y;
    let x_8689 : f32 = u_xlat3.w;
    u_xlat1.x = (x_8687 * x_8689);
    let x_8692 : vec2<f32> = u_xlat68;
    let x_8693 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8692 + x_8693);
    let x_8696 : f32 = u_xlat129.x;
    let x_8698 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8696, x_8698);
    let x_8701 : f32 = u_xlat61.x;
    let x_8703 : f32 = u_xlat0.x;
    let x_8705 : f32 = u_xlat204;
    u_xlat1.x = ((x_8701 * x_8703) + -(x_8705));
    let x_8709 : f32 = u_xlat204;
    let x_8712 : vec3<f32> = u_xlat2;
    let x_8714 : vec2<f32> = (-(vec2<f32>(x_8709, x_8709)) + vec2<f32>(x_8712.x, x_8712.z));
    let x_8715 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8714.x, x_8714.y, x_8715.z);
    let x_8718 : f32 = u_xlat1.x;
    let x_8720 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8718, x_8720);
    let x_8724 : f32 = u_xlat1.y;
    let x_8727 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8724) + x_8727);
    let x_8731 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (-(vec4<f32>(x_8731.y, x_8731.y, x_8731.y, x_8731.y)) + vec4<f32>(0.9453125f, 0.953125f, 0.9609375f, 0.96875f));
    let x_8740 : vec4<f32> = u_xlat3;
    let x_8742 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    u_xlat3 = (x_8740 / vec4<f32>(x_8742.x, x_8742.x, x_8742.x, x_8742.x));
    let x_8745 : vec4<f32> = u_xlat3;
    u_xlat3 = exp2(x_8745);
    let x_8748 : f32 = u_xlat1.y;
    let x_8750 : f32 = u_xlat3.x;
    u_xlat1.x = (x_8748 * x_8750);
    let x_8753 : vec2<f32> = u_xlat68;
    let x_8754 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8753 + x_8754);
    let x_8757 : f32 = u_xlat129.z;
    let x_8759 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8757, x_8759);
    let x_8762 : f32 = u_xlat61.z;
    let x_8764 : f32 = u_xlat0.x;
    let x_8766 : f32 = u_xlat204;
    u_xlat1.x = ((x_8762 * x_8764) + -(x_8766));
    let x_8770 : f32 = u_xlat204;
    let x_8773 : vec3<f32> = u_xlat2;
    let x_8775 : vec2<f32> = (-(vec2<f32>(x_8770, x_8770)) + vec2<f32>(x_8773.x, x_8773.z));
    let x_8776 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8775.x, x_8775.y, x_8776.z);
    let x_8779 : f32 = u_xlat1.x;
    let x_8781 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8779, x_8781);
    let x_8785 : f32 = u_xlat1.y;
    let x_8788 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8785) + x_8788);
    let x_8792 : f32 = u_xlat1.y;
    let x_8794 : f32 = u_xlat3.y;
    u_xlat1.x = (x_8792 * x_8794);
    let x_8797 : vec2<f32> = u_xlat68;
    let x_8798 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8797 + x_8798);
    let x_8801 : f32 = u_xlat130.x;
    let x_8803 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8801, x_8803);
    let x_8806 : f32 = u_xlat62.x;
    let x_8808 : f32 = u_xlat0.x;
    let x_8810 : f32 = u_xlat204;
    u_xlat1.x = ((x_8806 * x_8808) + -(x_8810));
    let x_8814 : f32 = u_xlat204;
    let x_8817 : vec3<f32> = u_xlat2;
    let x_8819 : vec2<f32> = (-(vec2<f32>(x_8814, x_8814)) + vec2<f32>(x_8817.x, x_8817.z));
    let x_8820 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8819.x, x_8819.y, x_8820.z);
    let x_8823 : f32 = u_xlat1.x;
    let x_8825 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8823, x_8825);
    let x_8829 : f32 = u_xlat1.y;
    let x_8832 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8829) + x_8832);
    let x_8836 : f32 = u_xlat1.y;
    let x_8838 : f32 = u_xlat3.z;
    u_xlat1.x = (x_8836 * x_8838);
    let x_8841 : vec2<f32> = u_xlat68;
    let x_8842 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8841 + x_8842);
    let x_8845 : f32 = u_xlat130.z;
    let x_8847 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8845, x_8847);
    let x_8850 : f32 = u_xlat62.z;
    let x_8852 : f32 = u_xlat0.x;
    let x_8854 : f32 = u_xlat204;
    u_xlat1.x = ((x_8850 * x_8852) + -(x_8854));
    let x_8858 : f32 = u_xlat204;
    let x_8861 : vec3<f32> = u_xlat2;
    let x_8863 : vec2<f32> = (-(vec2<f32>(x_8858, x_8858)) + vec2<f32>(x_8861.x, x_8861.z));
    let x_8864 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8863.x, x_8863.y, x_8864.z);
    let x_8867 : f32 = u_xlat1.x;
    let x_8869 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8867, x_8869);
    let x_8873 : f32 = u_xlat1.y;
    let x_8876 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8873) + x_8876);
    let x_8880 : f32 = u_xlat1.y;
    let x_8882 : f32 = u_xlat3.w;
    u_xlat1.x = (x_8880 * x_8882);
    let x_8885 : vec2<f32> = u_xlat68;
    let x_8886 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8885 + x_8886);
    let x_8889 : f32 = u_xlat131.x;
    let x_8891 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8889, x_8891);
    let x_8894 : f32 = u_xlat63.x;
    let x_8896 : f32 = u_xlat0.x;
    let x_8898 : f32 = u_xlat204;
    u_xlat1.x = ((x_8894 * x_8896) + -(x_8898));
    let x_8902 : f32 = u_xlat204;
    let x_8905 : vec3<f32> = u_xlat2;
    let x_8907 : vec2<f32> = (-(vec2<f32>(x_8902, x_8902)) + vec2<f32>(x_8905.x, x_8905.z));
    let x_8908 : vec3<f32> = u_xlat2;
    u_xlat2 = vec3<f32>(x_8907.x, x_8907.y, x_8908.z);
    let x_8911 : f32 = u_xlat1.x;
    let x_8913 : f32 = u_xlat2.y;
    u_xlat1.y = min(x_8911, x_8913);
    let x_8917 : f32 = u_xlat1.y;
    let x_8920 : f32 = u_xlat2.y;
    u_xlat2.z = (-(x_8917) + x_8920);
    let x_8924 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    let x_8931 : vec3<f32> = (-(vec3<f32>(x_8924.y, x_8924.y, x_8924.y)) + vec3<f32>(0.9765625f, 0.984375f, 0.9921875f));
    let x_8932 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_8931.x, x_8931.y, x_8931.z, x_8932.w);
    let x_8934 : vec4<f32> = u_xlat3;
    let x_8937 : vec4<f32> = x_2845.x_ScaleOffsetRes;
    let x_8939 : vec3<f32> = (vec3<f32>(x_8934.x, x_8934.y, x_8934.z) / vec3<f32>(x_8937.x, x_8937.x, x_8937.x));
    let x_8940 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_8939.x, x_8939.y, x_8939.z, x_8940.w);
    let x_8942 : vec4<f32> = u_xlat3;
    let x_8944 : vec3<f32> = exp2(vec3<f32>(x_8942.x, x_8942.y, x_8942.z));
    let x_8945 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_8944.x, x_8944.y, x_8944.z, x_8945.w);
    let x_8948 : f32 = u_xlat1.y;
    let x_8950 : f32 = u_xlat3.x;
    u_xlat1.x = (x_8948 * x_8950);
    let x_8953 : vec2<f32> = u_xlat68;
    let x_8954 : vec2<f32> = u_xlat1;
    u_xlat68 = (x_8953 + x_8954);
    let x_8957 : f32 = u_xlat131.z;
    let x_8959 : f32 = u_xlat2.x;
    u_xlat204 = min(x_8957, x_8959);
    let x_8962 : f32 = u_xlat63.z;
    let x_8964 : f32 = u_xlat0.x;
    let x_8966 : f32 = u_xlat204;
    u_xlat1.x = ((x_8962 * x_8964) + -(x_8966));
    let x_8970 : f32 = u_xlat204;
    let x_8973 : vec3<f32> = u_xlat2;
    u_xlat69 = (-(vec2<f32>(x_8970, x_8970)) + vec2<f32>(x_8973.x, x_8973.z));
    let x_8977 : f32 = u_xlat1.x;
    let x_8979 : f32 = u_xlat69.y;
    u_xlat2.y = min(x_8977, x_8979);
    let x_8983 : f32 = u_xlat69.y;
    let x_8985 : f32 = u_xlat2.y;
    u_xlat204 = (x_8983 + -(x_8985));
    let x_8989 : f32 = u_xlat2.y;
    let x_8991 : f32 = u_xlat3.y;
    u_xlat2.x = (x_8989 * x_8991);
    let x_8994 : vec2<f32> = u_xlat68;
    let x_8995 : vec3<f32> = u_xlat2;
    u_xlat68 = (x_8994 + vec2<f32>(x_8995.x, x_8995.y));
    let x_8998 : f32 = u_xlat132;
    let x_9000 : f32 = u_xlat69.x;
    u_xlat1.x = min(x_8998, x_9000);
    let x_9003 : f32 = u_xlat64;
    let x_9005 : f32 = u_xlat0.x;
    let x_9008 : f32 = u_xlat1.x;
    u_xlat0.x = ((x_9003 * x_9005) + -(x_9008));
    let x_9012 : f32 = u_xlat204;
    let x_9014 : f32 = u_xlat1.x;
    u_xlat204 = (x_9012 + -(x_9014));
    let x_9018 : f32 = u_xlat0.x;
    let x_9019 : f32 = u_xlat204;
    u_xlat1.y = min(x_9018, x_9019);
    let x_9023 : f32 = u_xlat1.y;
    let x_9025 : f32 = u_xlat3.z;
    u_xlat1.x = (x_9023 * x_9025);
    let x_9028 : vec2<f32> = u_xlat68;
    let x_9029 : vec2<f32> = u_xlat1;
    u_xlat0 = (x_9028 + x_9029);
    let x_9032 : f32 = u_xlat0.y;
    u_xlat68.x = max(x_9032, 0.0001f);
    let x_9037 : f32 = u_xlat0.x;
    let x_9039 : f32 = u_xlat68.x;
    u_xlat0.x = (x_9037 / x_9039);
    let x_9043 : f32 = u_xlat0.x;
    let x_9045 : f32 = x_2845.x_Params1.z;
    u_xlat0.x = max(x_9043, x_9045);
    let x_9049 : f32 = u_xlat0.x;
    let x_9051 : f32 = x_2845.x_Params1.w;
    u_xlat0.x = min(x_9049, x_9051);
    let x_9055 : f32 = u_xlat0.x;
    u_xlat0.x = max(x_9055, 0.0001f);
    let x_9059 : f32 = x_2845.x_Params2.z;
    let x_9061 : f32 = u_xlat0.x;
    u_xlat0.x = (x_9059 / x_9061);
    let x_9070 : vec2<f32> = u_xlat0;
    textureStore(x_Destination_origX0X, vec2<i32>(0i, 0i), vec4<f32>(x_9070.x, x_9070.x, x_9070.x, x_9070.x));
  }
  return;
}

@compute @workgroup_size(16i, 8i, 1i)
fn main(@builtin(local_invocation_id) gl_LocalInvocationID_param : vec3<u32>) {
  gl_LocalInvocationID = gl_LocalInvocationID_param;
  main_1();
}

